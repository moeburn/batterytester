
c:/Users/moebu/Documents/projects/BATTER~1/batterytester/target/2.3.1/photon/batterytester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ae0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3b00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000484  20000000  080a3b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001dc  20000484  20000484  00030484  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3f88  080a3f88  00023f88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3fb0  080a3fb0  00023fb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00117e9e  00000000  00000000  00023fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013e85  00000000  00000000  0013be52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001686d  00000000  00000000  0014fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f20  00000000  00000000  00166544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004838  00000000  00000000  00168464  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029fcc  00000000  00000000  0016cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c5d3  00000000  00000000  00196c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b0637  00000000  00000000  001c323b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005060  00000000  00000000  00273874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f91f 	bl	80a3274 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f927 	bl	80a3290 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3b04 	.word	0x080a3b04
 80a0050:	20000484 	.word	0x20000484
 80a0054:	20000484 	.word	0x20000484
 80a0058:	2000065d 	.word	0x2000065d
 80a005c:	2000065d 	.word	0x2000065d

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fdb3 	bl	80a1bcc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a3adc 	.word	0x080a3adc
 80a0084:	080a3afc 	.word	0x080a3afc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b820 	b.w	80a00cc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f873 	bl	80a0178 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f001 bd51 	b.w	80a1b3c <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 bae5 	b.w	80a1668 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 bae3 	b.w	80a1668 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 bae9 	b.w	80a1678 <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f001 fa3e 	bl	80a1530 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a125d 	.word	0x080a125d

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <setup>:
    if (millis() - __every__##interval >= interval && (__every__##interval = millis()))

SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

void setup () {//Setup
 80a00cc:	b510      	push	{r4, lr}
RGB.control(true);
 80a00ce:	2001      	movs	r0, #1
    Serial.begin(38400);
    display.begin(SH1106_SWITCHCAPVCC, 0x3C); 
 80a00d0:	4c16      	ldr	r4, [pc, #88]	; (80a012c <setup+0x60>)
RGB.control(true);
 80a00d2:	f001 fcd4 	bl	80a1a7e <_ZN8RGBClass7controlEb>
    Serial.begin(38400);
 80a00d6:	f001 fe6d 	bl	80a1db4 <_Z16_fetch_usbserialv>
 80a00da:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80a00de:	f001 fe5d 	bl	80a1d9c <_ZN9USBSerial5beginEl>
    display.begin(SH1106_SWITCHCAPVCC, 0x3C); 
 80a00e2:	2301      	movs	r3, #1
 80a00e4:	223c      	movs	r2, #60	; 0x3c
 80a00e6:	2102      	movs	r1, #2
 80a00e8:	4620      	mov	r0, r4
 80a00ea:	f000 fdfb 	bl	80a0ce4 <_ZN15Adafruit_SH11065beginEhhb>
    display.clearDisplay();
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	f000 fcf2 	bl	80a0ad8 <_ZN15Adafruit_SH110612clearDisplayEv>
    display.setTextColor(WHITE);
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	2101      	movs	r1, #1
 80a00f8:	f001 f874 	bl	80a11e4 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(0,1);
 80a00fc:	2201      	movs	r2, #1
 80a00fe:	4620      	mov	r0, r4
 80a0100:	2100      	movs	r1, #0
 80a0102:	f001 f867 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
    display.setTextSize(1);
 80a0106:	4620      	mov	r0, r4
 80a0108:	2101      	movs	r1, #1
 80a010a:	f001 f866 	bl	80a11da <_ZN12Adafruit_GFX11setTextSizeEh>
    display.print("Battery tester ");
 80a010e:	4620      	mov	r0, r4
 80a0110:	4907      	ldr	r1, [pc, #28]	; (80a0130 <setup+0x64>)
 80a0112:	f001 fba1 	bl	80a1858 <_ZN5Print5printEPKc>
    display.print(milliamps);
 80a0116:	4b07      	ldr	r3, [pc, #28]	; (80a0134 <setup+0x68>)
 80a0118:	4620      	mov	r0, r4
 80a011a:	2202      	movs	r2, #2
 80a011c:	6819      	ldr	r1, [r3, #0]
 80a011e:	f001 fc7f 	bl	80a1a20 <_ZN5Print5printEfi>
    display.display();
 80a0122:	4620      	mov	r0, r4

}//Setup
 80a0124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    display.display();
 80a0128:	f000 bd4e 	b.w	80a0bc8 <_ZN15Adafruit_SH11067displayEv>
 80a012c:	200004b0 	.word	0x200004b0
 80a0130:	080a33dc 	.word	0x080a33dc
 80a0134:	20000004 	.word	0x20000004

080a0138 <_ZN7AverageIiE4pushEi>:

template <class T> Average<T>::~Average() {
    free(_store);
}

template <class T> void Average<T>::push(T entry) {
 80a0138:	b530      	push	{r4, r5, lr}
 80a013a:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
    if (_count < _size) {                                     // adding new values to array
 80a013e:	6905      	ldr	r5, [r0, #16]
 80a0140:	6802      	ldr	r2, [r0, #0]
 80a0142:	42ab      	cmp	r3, r5
        _count++;                                             // count number of values in array
    } else {                                                    // overwriting old values
        _sum = _sum -_store[_position];                       // remove old value from _sum
 80a0144:	bf25      	ittet	cs
 80a0146:	f852 5024 	ldrcs.w	r5, [r2, r4, lsl #2]
 80a014a:	6843      	ldrcs	r3, [r0, #4]
        _count++;                                             // count number of values in array
 80a014c:	3301      	addcc	r3, #1
        _sum = _sum -_store[_position];                       // remove old value from _sum
 80a014e:	1b5b      	subcs	r3, r3, r5
 80a0150:	bf2c      	ite	cs
 80a0152:	6043      	strcs	r3, [r0, #4]
        _count++;                                             // count number of values in array
 80a0154:	60c3      	strcc	r3, [r0, #12]
    }
    _store[_position] = entry;                                // store new value in array
 80a0156:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    _sum += entry;                                            // add the new value to _sum
 80a015a:	6843      	ldr	r3, [r0, #4]
    _position += 1;                                           // increment the position counter
    if (_position >= _size) _position = 0;                    // loop the position counter
 80a015c:	6902      	ldr	r2, [r0, #16]
    _sum += entry;                                            // add the new value to _sum
 80a015e:	4419      	add	r1, r3
    _position += 1;                                           // increment the position counter
 80a0160:	6883      	ldr	r3, [r0, #8]
    _sum += entry;                                            // add the new value to _sum
 80a0162:	6041      	str	r1, [r0, #4]
    _position += 1;                                           // increment the position counter
 80a0164:	3301      	adds	r3, #1
    if (_position >= _size) _position = 0;                    // loop the position counter
 80a0166:	4293      	cmp	r3, r2
    _position += 1;                                           // increment the position counter
 80a0168:	6083      	str	r3, [r0, #8]
    if (_position >= _size) _position = 0;                    // loop the position counter
 80a016a:	bf24      	itt	cs
 80a016c:	2300      	movcs	r3, #0
 80a016e:	6083      	strcs	r3, [r0, #8]
}
 80a0170:	bd30      	pop	{r4, r5, pc}
 80a0172:	0000      	movs	r0, r0
 80a0174:	0000      	movs	r0, r0
	...

080a0178 <loop>:

//************************* End of Setup function *******************************

void loop() {
 80a0178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017c:	f001 f876 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
if (millis() - timermillis > 10)
 80a0180:	4db5      	ldr	r5, [pc, #724]	; (80a0458 <loop+0x2e0>)
 80a0182:	4cb6      	ldr	r4, [pc, #728]	; (80a045c <loop+0x2e4>)
 80a0184:	682b      	ldr	r3, [r5, #0]
 80a0186:	f8df b32c 	ldr.w	fp, [pc, #812]	; 80a04b4 <loop+0x33c>
 80a018a:	1ac0      	subs	r0, r0, r3
 80a018c:	280a      	cmp	r0, #10
 80a018e:	f240 819a 	bls.w	80a04c6 <loop+0x34e>
 80a0192:	f001 f86b 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
    {
    timermillis = millis();
 80a0196:	6028      	str	r0, [r5, #0]
        aread = analogRead(A0);
 80a0198:	200a      	movs	r0, #10
 80a019a:	f002 f879 	bl	80a2290 <analogRead>
    push(entry);
    return mean();
}

template <class T> float Average<T>::mean() {
    if (_count == 0) {
 80a019e:	4bb0      	ldr	r3, [pc, #704]	; (80a0460 <loop+0x2e8>)
 80a01a0:	6020      	str	r0, [r4, #0]
 80a01a2:	68de      	ldr	r6, [r3, #12]
 80a01a4:	2e00      	cmp	r6, #0
 80a01a6:	f000 8149 	beq.w	80a043c <loop+0x2c4>
        return 0;
    }
    return ((float)_sum / (float)_count);                     // mean calculation based on _sum
 80a01aa:	6858      	ldr	r0, [r3, #4]
 80a01ac:	f002 feb8 	bl	80a2f20 <__aeabi_i2f>
 80a01b0:	4605      	mov	r5, r0
 80a01b2:	4630      	mov	r0, r6
 80a01b4:	f002 feb0 	bl	80a2f18 <__aeabi_ui2f>
 80a01b8:	4601      	mov	r1, r0
 80a01ba:	4628      	mov	r0, r5
 80a01bc:	f002 ffb8 	bl	80a3130 <__aeabi_fdiv>
        volts = (A0avg.mean() / 4096.0) * 6.6; //3.3 * 2 because of voltage divider
 80a01c0:	f002 fa54 	bl	80a266c <__aeabi_f2d>
 80a01c4:	2200      	movs	r2, #0
 80a01c6:	4ba7      	ldr	r3, [pc, #668]	; (80a0464 <loop+0x2ec>)
 80a01c8:	f002 faa8 	bl	80a271c <__aeabi_dmul>
 80a01cc:	a39e      	add	r3, pc, #632	; (adr r3, 80a0448 <loop+0x2d0>)
 80a01ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01d2:	f002 faa3 	bl	80a271c <__aeabi_dmul>
 80a01d6:	f002 fd99 	bl	80a2d0c <__aeabi_d2f>
 80a01da:	4ea3      	ldr	r6, [pc, #652]	; (80a0468 <loop+0x2f0>)
        milliamps = (volts / ohms) * 1000;
 80a01dc:	49a3      	ldr	r1, [pc, #652]	; (80a046c <loop+0x2f4>)
        volts = (A0avg.mean() / 4096.0) * 6.6; //3.3 * 2 because of voltage divider
 80a01de:	6030      	str	r0, [r6, #0]
 80a01e0:	4607      	mov	r7, r0
        milliamps = (volts / ohms) * 1000;
 80a01e2:	f002 ffa5 	bl	80a3130 <__aeabi_fdiv>
 80a01e6:	49a2      	ldr	r1, [pc, #648]	; (80a0470 <loop+0x2f8>)
 80a01e8:	f002 feee 	bl	80a2fc8 <__aeabi_fmul>
 80a01ec:	4da1      	ldr	r5, [pc, #644]	; (80a0474 <loop+0x2fc>)
        mah = milliamps * (endtime/3600000.0);
 80a01ee:	4ba2      	ldr	r3, [pc, #648]	; (80a0478 <loop+0x300>)
        milliamps = (volts / ohms) * 1000;
 80a01f0:	4682      	mov	sl, r0
 80a01f2:	6028      	str	r0, [r5, #0]
        mah = milliamps * (endtime/3600000.0);
 80a01f4:	6818      	ldr	r0, [r3, #0]
 80a01f6:	f002 fa17 	bl	80a2628 <__aeabi_ui2d>
 80a01fa:	a395      	add	r3, pc, #596	; (adr r3, 80a0450 <loop+0x2d8>)
 80a01fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0200:	f002 fbb6 	bl	80a2970 <__aeabi_ddiv>
 80a0204:	4680      	mov	r8, r0
 80a0206:	4650      	mov	r0, sl
 80a0208:	4689      	mov	r9, r1
 80a020a:	f002 fa2f 	bl	80a266c <__aeabi_f2d>
 80a020e:	460b      	mov	r3, r1
 80a0210:	4602      	mov	r2, r0
 80a0212:	4649      	mov	r1, r9
 80a0214:	4640      	mov	r0, r8
 80a0216:	f002 fa81 	bl	80a271c <__aeabi_dmul>
 80a021a:	f002 fd77 	bl	80a2d0c <__aeabi_d2f>
 80a021e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80a04b8 <loop+0x340>
 80a0222:	4601      	mov	r1, r0
 80a0224:	f8c9 0000 	str.w	r0, [r9]
        mwh = mah * volts;
 80a0228:	4638      	mov	r0, r7
 80a022a:	f002 fecd 	bl	80a2fc8 <__aeabi_fmul>
 80a022e:	f8df 828c 	ldr.w	r8, [pc, #652]	; 80a04bc <loop+0x344>
 80a0232:	f8df a244 	ldr.w	sl, [pc, #580]	; 80a0478 <loop+0x300>
 80a0236:	f8c8 0000 	str.w	r0, [r8]

        display.clearDisplay();
 80a023a:	4890      	ldr	r0, [pc, #576]	; (80a047c <loop+0x304>)
 80a023c:	f000 fc4c 	bl	80a0ad8 <_ZN15Adafruit_SH110612clearDisplayEv>
        display.setCursor(0,0);
 80a0240:	2200      	movs	r2, #0
 80a0242:	488e      	ldr	r0, [pc, #568]	; (80a047c <loop+0x304>)
 80a0244:	4611      	mov	r1, r2
 80a0246:	f000 ffc5 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
        display.print("Cutoff: ");
 80a024a:	498d      	ldr	r1, [pc, #564]	; (80a0480 <loop+0x308>)
 80a024c:	488b      	ldr	r0, [pc, #556]	; (80a047c <loop+0x304>)
 80a024e:	f001 fb03 	bl	80a1858 <_ZN5Print5printEPKc>
        display.print(cutoffA0);
 80a0252:	f8db 7000 	ldr.w	r7, [fp]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0256:	2f00      	cmp	r7, #0
 80a0258:	f280 80f2 	bge.w	80a0440 <loop+0x2c8>
            t = print('-');
 80a025c:	212d      	movs	r1, #45	; 0x2d
 80a025e:	4887      	ldr	r0, [pc, #540]	; (80a047c <loop+0x304>)
 80a0260:	f001 fafe 	bl	80a1860 <_ZN5Print5printEc>
            val = -n;
 80a0264:	4279      	negs	r1, r7
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0266:	220a      	movs	r2, #10
 80a0268:	4884      	ldr	r0, [pc, #528]	; (80a047c <loop+0x304>)
 80a026a:	f001 fafc 	bl	80a1866 <_ZN5Print11printNumberEmh>
        display.setCursor(0,10);
 80a026e:	220a      	movs	r2, #10
 80a0270:	2100      	movs	r1, #0
 80a0272:	4882      	ldr	r0, [pc, #520]	; (80a047c <loop+0x304>)
 80a0274:	f000 ffae 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
        display.print("A0: ");
 80a0278:	4982      	ldr	r1, [pc, #520]	; (80a0484 <loop+0x30c>)
 80a027a:	4880      	ldr	r0, [pc, #512]	; (80a047c <loop+0x304>)
 80a027c:	f001 faec 	bl	80a1858 <_ZN5Print5printEPKc>
        display.print(aread);  
 80a0280:	6827      	ldr	r7, [r4, #0]
        if (n < 0 && base == 10) {
 80a0282:	2f00      	cmp	r7, #0
 80a0284:	f280 80de 	bge.w	80a0444 <loop+0x2cc>
            t = print('-');
 80a0288:	212d      	movs	r1, #45	; 0x2d
 80a028a:	487c      	ldr	r0, [pc, #496]	; (80a047c <loop+0x304>)
 80a028c:	f001 fae8 	bl	80a1860 <_ZN5Print5printEc>
            val = -n;
 80a0290:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0292:	220a      	movs	r2, #10
 80a0294:	4879      	ldr	r0, [pc, #484]	; (80a047c <loop+0x304>)
 80a0296:	f001 fae6 	bl	80a1866 <_ZN5Print11printNumberEmh>
        display.print(" (");
 80a029a:	497b      	ldr	r1, [pc, #492]	; (80a0488 <loop+0x310>)
 80a029c:	4877      	ldr	r0, [pc, #476]	; (80a047c <loop+0x304>)
 80a029e:	f001 fadb 	bl	80a1858 <_ZN5Print5printEPKc>
        display.print((aread / 4096.0) * 6.6); 
 80a02a2:	6820      	ldr	r0, [r4, #0]
 80a02a4:	f002 f9d0 	bl	80a2648 <__aeabi_i2d>
 80a02a8:	2200      	movs	r2, #0
 80a02aa:	4b6e      	ldr	r3, [pc, #440]	; (80a0464 <loop+0x2ec>)
 80a02ac:	f002 fa36 	bl	80a271c <__aeabi_dmul>
 80a02b0:	a365      	add	r3, pc, #404	; (adr r3, 80a0448 <loop+0x2d0>)
 80a02b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02b6:	f002 fa31 	bl	80a271c <__aeabi_dmul>
 80a02ba:	2702      	movs	r7, #2
 80a02bc:	460b      	mov	r3, r1
 80a02be:	4602      	mov	r2, r0
 80a02c0:	9700      	str	r7, [sp, #0]
 80a02c2:	486e      	ldr	r0, [pc, #440]	; (80a047c <loop+0x304>)
 80a02c4:	f001 fbbb 	bl	80a1a3e <_ZN5Print5printEdi>
        display.print("V)");
 80a02c8:	4970      	ldr	r1, [pc, #448]	; (80a048c <loop+0x314>)
 80a02ca:	486c      	ldr	r0, [pc, #432]	; (80a047c <loop+0x304>)
 80a02cc:	f001 fac4 	bl	80a1858 <_ZN5Print5printEPKc>
        
        if (hasstarted){
 80a02d0:	4b6f      	ldr	r3, [pc, #444]	; (80a0490 <loop+0x318>)
 80a02d2:	781b      	ldrb	r3, [r3, #0]
 80a02d4:	2b00      	cmp	r3, #0
 80a02d6:	d057      	beq.n	80a0388 <loop+0x210>
            RGB.color(20, 0, 0);
 80a02d8:	2200      	movs	r2, #0
 80a02da:	2014      	movs	r0, #20
 80a02dc:	4611      	mov	r1, r2
 80a02de:	f001 fbde 	bl	80a1a9e <_ZN8RGBClass5colorEiii>
 80a02e2:	f000 ffc3 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
            endtime = (millis() - starttime);
 80a02e6:	4b6b      	ldr	r3, [pc, #428]	; (80a0494 <loop+0x31c>)
            display.setCursor(0,20);
 80a02e8:	2214      	movs	r2, #20
            endtime = (millis() - starttime);
 80a02ea:	681b      	ldr	r3, [r3, #0]
            display.setCursor(0,20);
 80a02ec:	2100      	movs	r1, #0
            endtime = (millis() - starttime);
 80a02ee:	1ac0      	subs	r0, r0, r3
 80a02f0:	f8ca 0000 	str.w	r0, [sl]
            display.setCursor(0,20);
 80a02f4:	4861      	ldr	r0, [pc, #388]	; (80a047c <loop+0x304>)
 80a02f6:	f000 ff6d 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("Time: ");
 80a02fa:	4967      	ldr	r1, [pc, #412]	; (80a0498 <loop+0x320>)
 80a02fc:	485f      	ldr	r0, [pc, #380]	; (80a047c <loop+0x304>)
 80a02fe:	f001 faab 	bl	80a1858 <_ZN5Print5printEPKc>
 80a0302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            display.print(endtime/1000);
 80a0306:	f8da 1000 	ldr.w	r1, [sl]
 80a030a:	220a      	movs	r2, #10
 80a030c:	fbb1 f1f3 	udiv	r1, r1, r3
 80a0310:	485a      	ldr	r0, [pc, #360]	; (80a047c <loop+0x304>)
 80a0312:	f001 faa8 	bl	80a1866 <_ZN5Print11printNumberEmh>
            display.setCursor(0,30);        
 80a0316:	221e      	movs	r2, #30
 80a0318:	2100      	movs	r1, #0
 80a031a:	4858      	ldr	r0, [pc, #352]	; (80a047c <loop+0x304>)
 80a031c:	f000 ff5a 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("Avg: "); 
 80a0320:	495e      	ldr	r1, [pc, #376]	; (80a049c <loop+0x324>)
 80a0322:	4856      	ldr	r0, [pc, #344]	; (80a047c <loop+0x304>)
 80a0324:	f001 fa98 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(volts); 
 80a0328:	463a      	mov	r2, r7
 80a032a:	6831      	ldr	r1, [r6, #0]
 80a032c:	4853      	ldr	r0, [pc, #332]	; (80a047c <loop+0x304>)
 80a032e:	f001 fb77 	bl	80a1a20 <_ZN5Print5printEfi>
            display.print("V, ");
 80a0332:	495b      	ldr	r1, [pc, #364]	; (80a04a0 <loop+0x328>)
 80a0334:	4851      	ldr	r0, [pc, #324]	; (80a047c <loop+0x304>)
 80a0336:	f001 fa8f 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(milliamps);
 80a033a:	463a      	mov	r2, r7
 80a033c:	6829      	ldr	r1, [r5, #0]
 80a033e:	484f      	ldr	r0, [pc, #316]	; (80a047c <loop+0x304>)
 80a0340:	f001 fb6e 	bl	80a1a20 <_ZN5Print5printEfi>
            display.print("mA");
 80a0344:	4957      	ldr	r1, [pc, #348]	; (80a04a4 <loop+0x32c>)
 80a0346:	484d      	ldr	r0, [pc, #308]	; (80a047c <loop+0x304>)
 80a0348:	f001 fa86 	bl	80a1858 <_ZN5Print5printEPKc>
            display.setCursor(0,40);        
 80a034c:	2228      	movs	r2, #40	; 0x28
 80a034e:	2100      	movs	r1, #0
 80a0350:	484a      	ldr	r0, [pc, #296]	; (80a047c <loop+0x304>)
 80a0352:	f000 ff3f 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("mAh: ");
 80a0356:	4954      	ldr	r1, [pc, #336]	; (80a04a8 <loop+0x330>)
 80a0358:	4848      	ldr	r0, [pc, #288]	; (80a047c <loop+0x304>)
 80a035a:	f001 fa7d 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(mah); 
 80a035e:	463a      	mov	r2, r7
 80a0360:	f8d9 1000 	ldr.w	r1, [r9]
 80a0364:	4845      	ldr	r0, [pc, #276]	; (80a047c <loop+0x304>)
 80a0366:	f001 fb5b 	bl	80a1a20 <_ZN5Print5printEfi>
            display.setCursor(0,50);        
 80a036a:	2232      	movs	r2, #50	; 0x32
 80a036c:	2100      	movs	r1, #0
 80a036e:	4843      	ldr	r0, [pc, #268]	; (80a047c <loop+0x304>)
 80a0370:	f000 ff30 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("mWh: ");
 80a0374:	494d      	ldr	r1, [pc, #308]	; (80a04ac <loop+0x334>)
 80a0376:	4841      	ldr	r0, [pc, #260]	; (80a047c <loop+0x304>)
 80a0378:	f001 fa6e 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(mwh); 
 80a037c:	463a      	mov	r2, r7
 80a037e:	f8d8 1000 	ldr.w	r1, [r8]
 80a0382:	483e      	ldr	r0, [pc, #248]	; (80a047c <loop+0x304>)
 80a0384:	f001 fb4c 	bl	80a1a20 <_ZN5Print5printEfi>
        }
        if (hasfinished){
 80a0388:	4b49      	ldr	r3, [pc, #292]	; (80a04b0 <loop+0x338>)
 80a038a:	781b      	ldrb	r3, [r3, #0]
 80a038c:	2b00      	cmp	r3, #0
 80a038e:	f000 8097 	beq.w	80a04c0 <loop+0x348>
            RGB.color(0, 20, 0);
 80a0392:	2200      	movs	r2, #0
 80a0394:	2114      	movs	r1, #20
 80a0396:	4610      	mov	r0, r2
 80a0398:	f001 fb81 	bl	80a1a9e <_ZN8RGBClass5colorEiii>
            display.setCursor(0,20);
 80a039c:	2214      	movs	r2, #20
 80a039e:	2100      	movs	r1, #0
 80a03a0:	4836      	ldr	r0, [pc, #216]	; (80a047c <loop+0x304>)
 80a03a2:	f000 ff17 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("Time: ");
 80a03a6:	493c      	ldr	r1, [pc, #240]	; (80a0498 <loop+0x320>)
 80a03a8:	4834      	ldr	r0, [pc, #208]	; (80a047c <loop+0x304>)
 80a03aa:	f001 fa55 	bl	80a1858 <_ZN5Print5printEPKc>
 80a03ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            display.print(endtime/1000);
 80a03b2:	f8da 1000 	ldr.w	r1, [sl]
 80a03b6:	220a      	movs	r2, #10
 80a03b8:	fbb1 f1f3 	udiv	r1, r1, r3
 80a03bc:	482f      	ldr	r0, [pc, #188]	; (80a047c <loop+0x304>)
 80a03be:	f001 fa52 	bl	80a1866 <_ZN5Print11printNumberEmh>
            display.setCursor(0,30);        
 80a03c2:	221e      	movs	r2, #30
 80a03c4:	2100      	movs	r1, #0
 80a03c6:	482d      	ldr	r0, [pc, #180]	; (80a047c <loop+0x304>)
 80a03c8:	f000 ff04 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("Avg: "); 
 80a03cc:	4933      	ldr	r1, [pc, #204]	; (80a049c <loop+0x324>)
 80a03ce:	482b      	ldr	r0, [pc, #172]	; (80a047c <loop+0x304>)
 80a03d0:	f001 fa42 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(volts); 
 80a03d4:	2202      	movs	r2, #2
 80a03d6:	6831      	ldr	r1, [r6, #0]
 80a03d8:	4828      	ldr	r0, [pc, #160]	; (80a047c <loop+0x304>)
 80a03da:	f001 fb21 	bl	80a1a20 <_ZN5Print5printEfi>
            display.print("V, ");
 80a03de:	4930      	ldr	r1, [pc, #192]	; (80a04a0 <loop+0x328>)
 80a03e0:	4826      	ldr	r0, [pc, #152]	; (80a047c <loop+0x304>)
 80a03e2:	f001 fa39 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(milliamps);
 80a03e6:	2202      	movs	r2, #2
 80a03e8:	6829      	ldr	r1, [r5, #0]
 80a03ea:	4824      	ldr	r0, [pc, #144]	; (80a047c <loop+0x304>)
 80a03ec:	f001 fb18 	bl	80a1a20 <_ZN5Print5printEfi>
            display.print("mA");
 80a03f0:	492c      	ldr	r1, [pc, #176]	; (80a04a4 <loop+0x32c>)
 80a03f2:	4822      	ldr	r0, [pc, #136]	; (80a047c <loop+0x304>)
 80a03f4:	f001 fa30 	bl	80a1858 <_ZN5Print5printEPKc>
            display.setCursor(0,40);        
 80a03f8:	2228      	movs	r2, #40	; 0x28
 80a03fa:	2100      	movs	r1, #0
 80a03fc:	481f      	ldr	r0, [pc, #124]	; (80a047c <loop+0x304>)
 80a03fe:	f000 fee9 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("mAh: ");
 80a0402:	4929      	ldr	r1, [pc, #164]	; (80a04a8 <loop+0x330>)
 80a0404:	481d      	ldr	r0, [pc, #116]	; (80a047c <loop+0x304>)
 80a0406:	f001 fa27 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(mah); 
 80a040a:	2202      	movs	r2, #2
 80a040c:	f8d9 1000 	ldr.w	r1, [r9]
 80a0410:	481a      	ldr	r0, [pc, #104]	; (80a047c <loop+0x304>)
 80a0412:	f001 fb05 	bl	80a1a20 <_ZN5Print5printEfi>
            display.setCursor(0,50);        
 80a0416:	2232      	movs	r2, #50	; 0x32
 80a0418:	2100      	movs	r1, #0
 80a041a:	4818      	ldr	r0, [pc, #96]	; (80a047c <loop+0x304>)
 80a041c:	f000 feda 	bl	80a11d4 <_ZN12Adafruit_GFX9setCursorEss>
            display.print("mWh: ");
 80a0420:	4922      	ldr	r1, [pc, #136]	; (80a04ac <loop+0x334>)
 80a0422:	4816      	ldr	r0, [pc, #88]	; (80a047c <loop+0x304>)
 80a0424:	f001 fa18 	bl	80a1858 <_ZN5Print5printEPKc>
            display.print(mwh); 
 80a0428:	2202      	movs	r2, #2
 80a042a:	f8d8 1000 	ldr.w	r1, [r8]
 80a042e:	4813      	ldr	r0, [pc, #76]	; (80a047c <loop+0x304>)
 80a0430:	f001 faf6 	bl	80a1a20 <_ZN5Print5printEfi>
            display.display();
 80a0434:	4811      	ldr	r0, [pc, #68]	; (80a047c <loop+0x304>)
 80a0436:	f000 fbc7 	bl	80a0bc8 <_ZN15Adafruit_SH11067displayEv>
            while(1);
 80a043a:	e7fe      	b.n	80a043a <loop+0x2c2>
        return 0;
 80a043c:	2000      	movs	r0, #0
 80a043e:	e6bf      	b.n	80a01c0 <loop+0x48>
            val = n;
 80a0440:	4639      	mov	r1, r7
 80a0442:	e710      	b.n	80a0266 <loop+0xee>
 80a0444:	4639      	mov	r1, r7
 80a0446:	e724      	b.n	80a0292 <loop+0x11a>
 80a0448:	66666666 	.word	0x66666666
 80a044c:	401a6666 	.word	0x401a6666
 80a0450:	00000000 	.word	0x00000000
 80a0454:	414b7740 	.word	0x414b7740
 80a0458:	200004e8 	.word	0x200004e8
 80a045c:	200004ac 	.word	0x200004ac
 80a0460:	20000484 	.word	0x20000484
 80a0464:	3f300000 	.word	0x3f300000
 80a0468:	200004ec 	.word	0x200004ec
 80a046c:	41400000 	.word	0x41400000
 80a0470:	447a0000 	.word	0x447a0000
 80a0474:	20000004 	.word	0x20000004
 80a0478:	200004d4 	.word	0x200004d4
 80a047c:	200004b0 	.word	0x200004b0
 80a0480:	080a33ec 	.word	0x080a33ec
 80a0484:	080a33f5 	.word	0x080a33f5
 80a0488:	080a33fa 	.word	0x080a33fa
 80a048c:	080a33fd 	.word	0x080a33fd
 80a0490:	200004d9 	.word	0x200004d9
 80a0494:	200004e4 	.word	0x200004e4
 80a0498:	080a3400 	.word	0x080a3400
 80a049c:	080a3407 	.word	0x080a3407
 80a04a0:	080a340d 	.word	0x080a340d
 80a04a4:	080a3411 	.word	0x080a3411
 80a04a8:	080a3414 	.word	0x080a3414
 80a04ac:	080a341a 	.word	0x080a341a
 80a04b0:	200004d8 	.word	0x200004d8
 80a04b4:	20000000 	.word	0x20000000
 80a04b8:	200004dc 	.word	0x200004dc
 80a04bc:	200004e0 	.word	0x200004e0
        }
        display.display();
 80a04c0:	4825      	ldr	r0, [pc, #148]	; (80a0558 <loop+0x3e0>)
 80a04c2:	f000 fb81 	bl	80a0bc8 <_ZN15Adafruit_SH11067displayEv>
    }
    every (1000){
 80a04c6:	4e25      	ldr	r6, [pc, #148]	; (80a055c <loop+0x3e4>)
 80a04c8:	4d25      	ldr	r5, [pc, #148]	; (80a0560 <loop+0x3e8>)
 80a04ca:	7833      	ldrb	r3, [r6, #0]
 80a04cc:	f3bf 8f5b 	dmb	ish
 80a04d0:	f013 0f01 	tst.w	r3, #1
 80a04d4:	d109      	bne.n	80a04ea <loop+0x372>
 80a04d6:	4630      	mov	r0, r6
 80a04d8:	f7ff fdf0 	bl	80a00bc <__cxa_guard_acquire>
 80a04dc:	b128      	cbz	r0, 80a04ea <loop+0x372>
 80a04de:	f000 fec5 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
 80a04e2:	6028      	str	r0, [r5, #0]
 80a04e4:	4630      	mov	r0, r6
 80a04e6:	f7ff fdee 	bl	80a00c6 <__cxa_guard_release>
 80a04ea:	f000 febf 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
 80a04ee:	682b      	ldr	r3, [r5, #0]
 80a04f0:	1ac0      	subs	r0, r0, r3
 80a04f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a04f6:	d30a      	bcc.n	80a050e <loop+0x396>
 80a04f8:	f000 feb8 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
 80a04fc:	6028      	str	r0, [r5, #0]
 80a04fe:	b130      	cbz	r0, 80a050e <loop+0x396>
        if (!hasfinished) {A0avg.push(aread);}
 80a0500:	4b18      	ldr	r3, [pc, #96]	; (80a0564 <loop+0x3ec>)
 80a0502:	781b      	ldrb	r3, [r3, #0]
 80a0504:	b91b      	cbnz	r3, 80a050e <loop+0x396>
 80a0506:	6821      	ldr	r1, [r4, #0]
 80a0508:	4817      	ldr	r0, [pc, #92]	; (80a0568 <loop+0x3f0>)
 80a050a:	f7ff fe15 	bl	80a0138 <_ZN7AverageIiE4pushEi>
        
    }
    if ((aread > cutoffA0) && (!hasstarted)) {
 80a050e:	6821      	ldr	r1, [r4, #0]
 80a0510:	f8db 3000 	ldr.w	r3, [fp]
 80a0514:	4299      	cmp	r1, r3
 80a0516:	dd0e      	ble.n	80a0536 <loop+0x3be>
 80a0518:	4d14      	ldr	r5, [pc, #80]	; (80a056c <loop+0x3f4>)
 80a051a:	782b      	ldrb	r3, [r5, #0]
 80a051c:	b9c3      	cbnz	r3, 80a0550 <loop+0x3d8>
template <class T> T Average<T>::sum() {
    return _sum;
}

template <class T> void Average<T>::clear() {
    _count = 0;
 80a051e:	4812      	ldr	r0, [pc, #72]	; (80a0568 <loop+0x3f0>)
    _sum = 0;
    _position = 0;
 80a0520:	e9c0 3301 	strd	r3, r3, [r0, #4]
    _count = 0;
 80a0524:	60c3      	str	r3, [r0, #12]
        A0avg.clear();
        A0avg.push(aread);
 80a0526:	f7ff fe07 	bl	80a0138 <_ZN7AverageIiE4pushEi>
        hasstarted = true;
 80a052a:	2301      	movs	r3, #1
 80a052c:	702b      	strb	r3, [r5, #0]
 80a052e:	f000 fe9d 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
        starttime = millis();
 80a0532:	4b0f      	ldr	r3, [pc, #60]	; (80a0570 <loop+0x3f8>)
 80a0534:	6018      	str	r0, [r3, #0]
        }

        if ((aread < cutoffA0) && (hasstarted)) {
 80a0536:	6822      	ldr	r2, [r4, #0]
 80a0538:	f8db 3000 	ldr.w	r3, [fp]
 80a053c:	429a      	cmp	r2, r3
 80a053e:	da07      	bge.n	80a0550 <loop+0x3d8>
 80a0540:	4b0a      	ldr	r3, [pc, #40]	; (80a056c <loop+0x3f4>)
 80a0542:	781a      	ldrb	r2, [r3, #0]
 80a0544:	b122      	cbz	r2, 80a0550 <loop+0x3d8>
        hasstarted = false;
 80a0546:	2200      	movs	r2, #0
 80a0548:	701a      	strb	r2, [r3, #0]
        hasfinished = true;
 80a054a:	2201      	movs	r2, #1
 80a054c:	4b05      	ldr	r3, [pc, #20]	; (80a0564 <loop+0x3ec>)
 80a054e:	701a      	strb	r2, [r3, #0]
        }       

}
 80a0550:	b003      	add	sp, #12
 80a0552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0556:	bf00      	nop
 80a0558:	200004b0 	.word	0x200004b0
 80a055c:	200004a4 	.word	0x200004a4
 80a0560:	200004a8 	.word	0x200004a8
 80a0564:	200004d8 	.word	0x200004d8
 80a0568:	20000484 	.word	0x20000484
 80a056c:	200004d9 	.word	0x200004d9
 80a0570:	200004e4 	.word	0x200004e4

080a0574 <_GLOBAL__sub_I_cutoffA0>:
 80a0574:	b538      	push	{r3, r4, r5, lr}
    _count = 0;
 80a0576:	2400      	movs	r4, #0
 80a0578:	f648 43a0 	movw	r3, #36000	; 0x8ca0
    _size = size;
 80a057c:	4d11      	ldr	r5, [pc, #68]	; (80a05c4 <_GLOBAL__sub_I_cutoffA0+0x50>)
    _store = (T *)malloc(sizeof(T) * size);
 80a057e:	4812      	ldr	r0, [pc, #72]	; (80a05c8 <_GLOBAL__sub_I_cutoffA0+0x54>)
    _count = 0;
 80a0580:	e9c5 4303 	strd	r4, r3, [r5, #12]
    _store = (T *)malloc(sizeof(T) * size);
 80a0584:	f001 f870 	bl	80a1668 <malloc>
    _sum = 0;                                                 // track sum for fast mean calculation
 80a0588:	4623      	mov	r3, r4
 80a058a:	e9c5 4401 	strd	r4, r4, [r5, #4]
    for (uint32_t i = 0; i < size; i++) {
 80a058e:	4a0e      	ldr	r2, [pc, #56]	; (80a05c8 <_GLOBAL__sub_I_cutoffA0+0x54>)
    _store = (T *)malloc(sizeof(T) * size);
 80a0590:	6028      	str	r0, [r5, #0]
        _store[i] = 0;
 80a0592:	6829      	ldr	r1, [r5, #0]
 80a0594:	50cc      	str	r4, [r1, r3]
    for (uint32_t i = 0; i < size; i++) {
 80a0596:	3304      	adds	r3, #4
 80a0598:	4293      	cmp	r3, r2
 80a059a:	d1fa      	bne.n	80a0592 <_GLOBAL__sub_I_cutoffA0+0x1e>
Adafruit_SH1106 display(OLED_RESET);
 80a059c:	f04f 31ff 	mov.w	r1, #4294967295
 80a05a0:	480a      	ldr	r0, [pc, #40]	; (80a05cc <_GLOBAL__sub_I_cutoffA0+0x58>)
 80a05a2:	f000 fa83 	bl	80a0aac <_ZN15Adafruit_SH1106C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a05a6:	4b0a      	ldr	r3, [pc, #40]	; (80a05d0 <_GLOBAL__sub_I_cutoffA0+0x5c>)
    SleepResult() {}
 80a05a8:	4a0a      	ldr	r2, [pc, #40]	; (80a05d4 <_GLOBAL__sub_I_cutoffA0+0x60>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a05aa:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
 80a05ac:	601c      	str	r4, [r3, #0]
 80a05ae:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
 80a05b0:	719c      	strb	r4, [r3, #6]
 80a05b2:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 80a05b4:	f000 ffc4 	bl	80a1540 <set_system_mode>
}
 80a05b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_THREAD(ENABLED);
 80a05bc:	2100      	movs	r1, #0
 80a05be:	2001      	movs	r0, #1
 80a05c0:	f000 bfce 	b.w	80a1560 <system_thread_set_state>
 80a05c4:	20000484 	.word	0x20000484
 80a05c8:	00023280 	.word	0x00023280
 80a05cc:	200004b0 	.word	0x200004b0
 80a05d0:	20000498 	.word	0x20000498
 80a05d4:	ffff0000 	.word	0xffff0000

080a05d8 <_ZN15Adafruit_SH110613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SH1106::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a05d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) {
 80a05da:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SH1106::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a05dc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) {
 80a05e0:	2d02      	cmp	r5, #2
 80a05e2:	d045      	beq.n	80a0670 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x98>
 80a05e4:	2d03      	cmp	r5, #3
 80a05e6:	d07c      	beq.n	80a06e2 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x10a>
 80a05e8:	2d01      	cmp	r5, #1
 80a05ea:	d149      	bne.n	80a0680 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xa8>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      sh1106_swap(x, y);
      x = WIDTH - x - 1;
 80a05ec:	43d2      	mvns	r2, r2
 80a05ee:	8905      	ldrh	r5, [r0, #8]
 80a05f0:	442a      	add	r2, r5
 80a05f2:	b212      	sxth	r2, r2


void Adafruit_SH1106::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a05f4:	2a00      	cmp	r2, #0
 80a05f6:	f2c0 80c1 	blt.w	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
 80a05fa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a05fe:	4295      	cmp	r5, r2
 80a0600:	f340 80bc 	ble.w	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
 80a0604:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0606:	bfbe      	ittt	lt
 80a0608:	185b      	addlt	r3, r3, r1
    __y = 0;
 80a060a:	2100      	movlt	r1, #0
    __h += __y;
 80a060c:	b21b      	sxthlt	r3, r3

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
 80a060e:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a0612:	18cd      	adds	r5, r1, r3
 80a0614:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 80a0616:	bfc4      	itt	gt
 80a0618:	1a43      	subgt	r3, r0, r1
 80a061a:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
 80a061c:	2b00      	cmp	r3, #0
 80a061e:	f340 80ad 	ble.w	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
 80a0622:	f3c1 00c4 	ubfx	r0, r1, #3, #5
  // and offset x columns in
  pBuf += x;
 80a0626:	4e64      	ldr	r6, [pc, #400]	; (80a07b8 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1e0>)
 80a0628:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a062c:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
 80a0630:	b2db      	uxtb	r3, r3
  pBuf += x;
 80a0632:	eb06 0002 	add.w	r0, r6, r2
  if(mod) {
 80a0636:	d064      	beq.n	80a0702 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x12a>
    // mask off the high n bits we want to set
    mod = 8-mod;
 80a0638:	f1c1 0708 	rsb	r7, r1, #8
 80a063c:	b2ff      	uxtb	r7, r7

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a063e:	4d5f      	ldr	r5, [pc, #380]	; (80a07bc <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1e4>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
 80a0640:	42bb      	cmp	r3, r7
    register uint8_t mask = premask[mod];
 80a0642:	5ded      	ldrb	r5, [r5, r7]
    if( h < mod) {
 80a0644:	f080 80b0 	bcs.w	80a07a8 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1d0>
      mask &= (0XFF >> (mod-h));
 80a0648:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a064c:	eba7 0e03 	sub.w	lr, r7, r3
 80a0650:	fa4c fc0e 	asr.w	ip, ip, lr
    }

  switch (color)
 80a0654:	2c01      	cmp	r4, #1
      mask &= (0XFF >> (mod-h));
 80a0656:	ea0c 0505 	and.w	r5, ip, r5
  switch (color)
 80a065a:	d047      	beq.n	80a06ec <_ZN15Adafruit_SH110613drawFastHLineEssst+0x114>
 80a065c:	2c02      	cmp	r4, #2
 80a065e:	d077      	beq.n	80a0750 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x178>
 80a0660:	2c00      	cmp	r4, #0
 80a0662:	f040 808b 	bne.w	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
 80a0666:	f816 c002 	ldrb.w	ip, [r6, r2]
 80a066a:	ea2c 0505 	bic.w	r5, ip, r5
 80a066e:	e041      	b.n	80a06f4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x11c>
      y = HEIGHT - y - 1;
 80a0670:	43d2      	mvns	r2, r2
 80a0672:	8945      	ldrh	r5, [r0, #10]
 80a0674:	442a      	add	r2, r5
      x -= (w-1);
 80a0676:	18cd      	adds	r5, r1, r3
 80a0678:	8901      	ldrh	r1, [r0, #8]
      y = HEIGHT - y - 1;
 80a067a:	b212      	sxth	r2, r2
      x -= (w-1);
 80a067c:	1b49      	subs	r1, r1, r5
 80a067e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
 80a0680:	2a00      	cmp	r2, #0
 80a0682:	db7b      	blt.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
 80a0684:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80a0688:	4295      	cmp	r5, r2
 80a068a:	dd77      	ble.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
  if(x < 0) {
 80a068c:	2900      	cmp	r1, #0
    w += x;
 80a068e:	bfbe      	ittt	lt
 80a0690:	185b      	addlt	r3, r3, r1
    x = 0;
 80a0692:	2100      	movlt	r1, #0
    w += x;
 80a0694:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) {
 80a0696:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80a069a:	18cd      	adds	r5, r1, r3
 80a069c:	4285      	cmp	r5, r0
    w = (WIDTH - x);
 80a069e:	bfc4      	itt	gt
 80a06a0:	1a43      	subgt	r3, r0, r1
 80a06a2:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 80a06a4:	2b00      	cmp	r3, #0
 80a06a6:	dd69      	ble.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
  pBuf += ((y/8) * SH1106_LCDWIDTH);
 80a06a8:	10d0      	asrs	r0, r2, #3
  pBuf += x;
 80a06aa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a06ae:	4842      	ldr	r0, [pc, #264]	; (80a07b8 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1e0>)
  switch (color)
 80a06b0:	2c01      	cmp	r4, #1
  pBuf += x;
 80a06b2:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
 80a06b4:	f002 0107 	and.w	r1, r2, #7
 80a06b8:	f04f 0201 	mov.w	r2, #1
 80a06bc:	fa02 f201 	lsl.w	r2, r2, r1
 80a06c0:	b2d2      	uxtb	r2, r2
  switch (color)
 80a06c2:	d068      	beq.n	80a0796 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1be>
 80a06c4:	2c02      	cmp	r4, #2
 80a06c6:	d05d      	beq.n	80a0784 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1ac>
 80a06c8:	2c00      	cmp	r4, #0
 80a06ca:	d157      	bne.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 80a06cc:	43d2      	mvns	r2, r2
 80a06ce:	4403      	add	r3, r0
 80a06d0:	b2d2      	uxtb	r2, r2
 80a06d2:	4283      	cmp	r3, r0
 80a06d4:	d052      	beq.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
 80a06d6:	f810 4b01 	ldrb.w	r4, [r0], #1
 80a06da:	4014      	ands	r4, r2
 80a06dc:	f800 4c01 	strb.w	r4, [r0, #-1]
 80a06e0:	e7f7      	b.n	80a06d2 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xfa>
      y -= (w-1);
 80a06e2:	18cd      	adds	r5, r1, r3
 80a06e4:	8941      	ldrh	r1, [r0, #10]
 80a06e6:	1b49      	subs	r1, r1, r5
 80a06e8:	b209      	sxth	r1, r1
      break;
 80a06ea:	e783      	b.n	80a05f4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1c>
    case WHITE:   *pBuf |=  mask;  break;
 80a06ec:	f816 c002 	ldrb.w	ip, [r6, r2]
 80a06f0:	ea45 050c 	orr.w	r5, r5, ip
    case INVERSE: *pBuf ^=  mask;  break;
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a06f4:	42bb      	cmp	r3, r7
    case INVERSE: *pBuf ^=  mask;  break;
 80a06f6:	54b5      	strb	r5, [r6, r2]
    if(h<mod) { return; }
 80a06f8:	d340      	bcc.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>

    h -= mod;
 80a06fa:	3908      	subs	r1, #8
 80a06fc:	440b      	add	r3, r1
 80a06fe:	b2db      	uxtb	r3, r3

    pBuf += SH1106_LCDWIDTH;
 80a0700:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
 80a0702:	2b07      	cmp	r3, #7
 80a0704:	d918      	bls.n	80a0738 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x160>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
 80a0706:	2c02      	cmp	r4, #2
 80a0708:	f100 0280 	add.w	r2, r0, #128	; 0x80
 80a070c:	d125      	bne.n	80a075a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x182>
 80a070e:	4619      	mov	r1, r3
      do  {
      *pBuf=~(*pBuf);
 80a0710:	f812 5c80 	ldrb.w	r5, [r2, #-128]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SH1106_LCDWIDTH;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 80a0714:	3908      	subs	r1, #8
      *pBuf=~(*pBuf);
 80a0716:	43ed      	mvns	r5, r5
        h -= 8;
 80a0718:	b2c9      	uxtb	r1, r1
      } while(h >= 8);
 80a071a:	2907      	cmp	r1, #7
      *pBuf=~(*pBuf);
 80a071c:	f802 5c80 	strb.w	r5, [r2, #-128]
      } while(h >= 8);
 80a0720:	f102 0280 	add.w	r2, r2, #128	; 0x80
 80a0724:	d8f4      	bhi.n	80a0710 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x138>
 80a0726:	f1a3 0208 	sub.w	r2, r3, #8
 80a072a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a072e:	3201      	adds	r2, #1
 80a0730:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 80a0734:	f003 0307 	and.w	r3, r3, #7
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
 80a0738:	b303      	cbz	r3, 80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a073a:	4a21      	ldr	r2, [pc, #132]	; (80a07c0 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1e8>)
    switch (color)
 80a073c:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 80a073e:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
 80a0740:	d019      	beq.n	80a0776 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x19e>
 80a0742:	2c02      	cmp	r4, #2
 80a0744:	d01b      	beq.n	80a077e <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a6>
 80a0746:	b9cc      	cbnz	r4, 80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
 80a0748:	7802      	ldrb	r2, [r0, #0]
 80a074a:	ea22 0303 	bic.w	r3, r2, r3
 80a074e:	e014      	b.n	80a077a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a2>
    case INVERSE: *pBuf ^=  mask;  break;
 80a0750:	f816 c002 	ldrb.w	ip, [r6, r2]
 80a0754:	ea85 050c 	eor.w	r5, r5, ip
 80a0758:	e7cc      	b.n	80a06f4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x11c>
      register uint8_t val = (color == WHITE) ? 255 : 0;
 80a075a:	2c01      	cmp	r4, #1
 80a075c:	bf0c      	ite	eq
 80a075e:	25ff      	moveq	r5, #255	; 0xff
 80a0760:	2500      	movne	r5, #0
 80a0762:	4619      	mov	r1, r3
        h -= 8;
 80a0764:	3908      	subs	r1, #8
 80a0766:	b2c9      	uxtb	r1, r1
      } while(h >= 8);
 80a0768:	2907      	cmp	r1, #7
      *pBuf = val;
 80a076a:	f802 5c80 	strb.w	r5, [r2, #-128]
      } while(h >= 8);
 80a076e:	f102 0280 	add.w	r2, r2, #128	; 0x80
 80a0772:	d8f7      	bhi.n	80a0764 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x18c>
 80a0774:	e7d7      	b.n	80a0726 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x14e>
      case WHITE:   *pBuf |=  mask;  break;
 80a0776:	7802      	ldrb	r2, [r0, #0]
 80a0778:	4313      	orrs	r3, r2
      case INVERSE: *pBuf ^=  mask;  break;
 80a077a:	7003      	strb	r3, [r0, #0]
}
 80a077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case INVERSE: *pBuf ^=  mask;  break;
 80a077e:	7802      	ldrb	r2, [r0, #0]
 80a0780:	4053      	eors	r3, r2
 80a0782:	e7fa      	b.n	80a077a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a2>
 80a0784:	4403      	add	r3, r0
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 80a0786:	4298      	cmp	r0, r3
 80a0788:	d0f8      	beq.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
 80a078a:	f810 4b01 	ldrb.w	r4, [r0], #1
 80a078e:	4054      	eors	r4, r2
 80a0790:	f800 4c01 	strb.w	r4, [r0, #-1]
 80a0794:	e7f7      	b.n	80a0786 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1ae>
 80a0796:	4403      	add	r3, r0
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 80a0798:	4283      	cmp	r3, r0
 80a079a:	d0ef      	beq.n	80a077c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1a4>
 80a079c:	f810 4b01 	ldrb.w	r4, [r0], #1
 80a07a0:	4314      	orrs	r4, r2
 80a07a2:	f800 4c01 	strb.w	r4, [r0, #-1]
 80a07a6:	e7f7      	b.n	80a0798 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1c0>
  switch (color)
 80a07a8:	2c01      	cmp	r4, #1
 80a07aa:	d09f      	beq.n	80a06ec <_ZN15Adafruit_SH110613drawFastHLineEssst+0x114>
 80a07ac:	2c02      	cmp	r4, #2
 80a07ae:	d0cf      	beq.n	80a0750 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x178>
 80a07b0:	2c00      	cmp	r4, #0
 80a07b2:	d1a2      	bne.n	80a06fa <_ZN15Adafruit_SH110613drawFastHLineEssst+0x122>
 80a07b4:	e757      	b.n	80a0666 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x8e>
 80a07b6:	bf00      	nop
 80a07b8:	20000018 	.word	0x20000018
 80a07bc:	20000010 	.word	0x20000010
 80a07c0:	20000008 	.word	0x20000008

080a07c4 <_ZN15Adafruit_SH110613drawFastVLineEssst>:
void Adafruit_SH1106::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a07c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) {
 80a07c6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SH1106::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a07c8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) {
 80a07cc:	2d02      	cmp	r5, #2
 80a07ce:	d03f      	beq.n	80a0850 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x8c>
 80a07d0:	2d03      	cmp	r5, #3
 80a07d2:	f000 8081 	beq.w	80a08d8 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x114>
 80a07d6:	2d01      	cmp	r5, #1
 80a07d8:	d142      	bne.n	80a0860 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x9c>
      x -= (h-1);
 80a07da:	18d5      	adds	r5, r2, r3
 80a07dc:	8902      	ldrh	r2, [r0, #8]
 80a07de:	1b52      	subs	r2, r2, r5
 80a07e0:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
 80a07e2:	2900      	cmp	r1, #0
 80a07e4:	f2c0 80d7 	blt.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
 80a07e8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80a07ec:	428d      	cmp	r5, r1
 80a07ee:	f340 80d2 	ble.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
  if(x < 0) {
 80a07f2:	2a00      	cmp	r2, #0
    w += x;
 80a07f4:	bfbc      	itt	lt
 80a07f6:	189b      	addlt	r3, r3, r2
    x = 0;
 80a07f8:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) {
 80a07fa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    w += x;
 80a07fe:	bfb8      	it	lt
 80a0800:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) {
 80a0802:	18d0      	adds	r0, r2, r3
 80a0804:	42a8      	cmp	r0, r5
    w = (WIDTH - x);
 80a0806:	bfc4      	itt	gt
 80a0808:	1aad      	subgt	r5, r5, r2
 80a080a:	b22b      	sxthgt	r3, r5
  if(w <= 0) { return; }
 80a080c:	2b00      	cmp	r3, #0
 80a080e:	f340 80c2 	ble.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
  pBuf += ((y/8) * SH1106_LCDWIDTH);
 80a0812:	10ce      	asrs	r6, r1, #3
  pBuf += x;
 80a0814:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
 80a0818:	4e64      	ldr	r6, [pc, #400]	; (80a09ac <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1e8>)
  switch (color)
 80a081a:	2c01      	cmp	r4, #1
  pBuf += x;
 80a081c:	4416      	add	r6, r2
  register uint8_t mask = 1 << (y&7);
 80a081e:	f001 0207 	and.w	r2, r1, #7
 80a0822:	f04f 0101 	mov.w	r1, #1
 80a0826:	fa01 f102 	lsl.w	r1, r1, r2
 80a082a:	b2c9      	uxtb	r1, r1
  switch (color)
 80a082c:	d062      	beq.n	80a08f4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x130>
 80a082e:	2c02      	cmp	r4, #2
 80a0830:	d057      	beq.n	80a08e2 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x11e>
 80a0832:	2c00      	cmp	r4, #0
 80a0834:	f040 80af 	bne.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 80a0838:	43c9      	mvns	r1, r1
 80a083a:	4433      	add	r3, r6
 80a083c:	b2c9      	uxtb	r1, r1
 80a083e:	429e      	cmp	r6, r3
 80a0840:	f000 80a9 	beq.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
 80a0844:	f816 4b01 	ldrb.w	r4, [r6], #1
 80a0848:	400c      	ands	r4, r1
 80a084a:	f806 4c01 	strb.w	r4, [r6, #-1]
 80a084e:	e7f6      	b.n	80a083e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x7a>
      x = WIDTH - x - 1;
 80a0850:	43c9      	mvns	r1, r1
 80a0852:	8905      	ldrh	r5, [r0, #8]
 80a0854:	4429      	add	r1, r5
      y -= (h-1);
 80a0856:	18d5      	adds	r5, r2, r3
 80a0858:	8942      	ldrh	r2, [r0, #10]
      x = WIDTH - x - 1;
 80a085a:	b209      	sxth	r1, r1
      y -= (h-1);
 80a085c:	1b52      	subs	r2, r2, r5
 80a085e:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
 80a0860:	2900      	cmp	r1, #0
 80a0862:	f2c0 8098 	blt.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
 80a0866:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a086a:	428d      	cmp	r5, r1
 80a086c:	f340 8093 	ble.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
  if(__y < 0) {
 80a0870:	2a00      	cmp	r2, #0
    __h += __y;
 80a0872:	bfbe      	ittt	lt
 80a0874:	189b      	addlt	r3, r3, r2
    __y = 0;
 80a0876:	2200      	movlt	r2, #0
    __h += __y;
 80a0878:	b21b      	sxthlt	r3, r3
  if( (__y + __h) > HEIGHT) {
 80a087a:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a087e:	18d5      	adds	r5, r2, r3
 80a0880:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 80a0882:	bfc4      	itt	gt
 80a0884:	1a80      	subgt	r0, r0, r2
 80a0886:	b203      	sxthgt	r3, r0
  if(__h <= 0) {
 80a0888:	2b00      	cmp	r3, #0
 80a088a:	f340 8084 	ble.w	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
  pBuf += ((y/8) * SH1106_LCDWIDTH);
 80a088e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  pBuf += x;
 80a0892:	4f46      	ldr	r7, [pc, #280]	; (80a09ac <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1e8>)
 80a0894:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
 80a0898:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
 80a089c:	b2db      	uxtb	r3, r3
  pBuf += x;
 80a089e:	eb07 0501 	add.w	r5, r7, r1
  if(mod) {
 80a08a2:	d03b      	beq.n	80a091c <_ZN15Adafruit_SH110613drawFastVLineEssst+0x158>
    mod = 8-mod;
 80a08a4:	f1c2 0608 	rsb	r6, r2, #8
 80a08a8:	b2f6      	uxtb	r6, r6
    register uint8_t mask = premask[mod];
 80a08aa:	4841      	ldr	r0, [pc, #260]	; (80a09b0 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1ec>)
    if( h < mod) {
 80a08ac:	42b3      	cmp	r3, r6
    register uint8_t mask = premask[mod];
 80a08ae:	5d80      	ldrb	r0, [r0, r6]
    if( h < mod) {
 80a08b0:	d275      	bcs.n	80a099e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1da>
      mask &= (0XFF >> (mod-h));
 80a08b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a08b6:	eba6 0e03 	sub.w	lr, r6, r3
 80a08ba:	fa4c fc0e 	asr.w	ip, ip, lr
  switch (color)
 80a08be:	2c01      	cmp	r4, #1
      mask &= (0XFF >> (mod-h));
 80a08c0:	ea0c 0000 	and.w	r0, ip, r0
  switch (color)
 80a08c4:	d01f      	beq.n	80a0906 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x142>
 80a08c6:	2c02      	cmp	r4, #2
 80a08c8:	d04f      	beq.n	80a096a <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1a6>
 80a08ca:	2c00      	cmp	r4, #0
 80a08cc:	d163      	bne.n	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
    case BLACK:   *pBuf &= ~mask;  break;
 80a08ce:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a08d2:	ea2c 0000 	bic.w	r0, ip, r0
 80a08d6:	e01a      	b.n	80a090e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x14a>
      y = HEIGHT - y - 1;
 80a08d8:	43c9      	mvns	r1, r1
 80a08da:	8945      	ldrh	r5, [r0, #10]
 80a08dc:	4429      	add	r1, r5
 80a08de:	b209      	sxth	r1, r1
      break;
 80a08e0:	e77f      	b.n	80a07e2 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1e>
 80a08e2:	4433      	add	r3, r6
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 80a08e4:	429e      	cmp	r6, r3
 80a08e6:	d056      	beq.n	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
 80a08e8:	f816 4b01 	ldrb.w	r4, [r6], #1
 80a08ec:	404c      	eors	r4, r1
 80a08ee:	f806 4c01 	strb.w	r4, [r6, #-1]
 80a08f2:	e7f7      	b.n	80a08e4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x120>
 80a08f4:	4433      	add	r3, r6
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 80a08f6:	429e      	cmp	r6, r3
 80a08f8:	d04d      	beq.n	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
 80a08fa:	f816 4b01 	ldrb.w	r4, [r6], #1
 80a08fe:	430c      	orrs	r4, r1
 80a0900:	f806 4c01 	strb.w	r4, [r6, #-1]
 80a0904:	e7f7      	b.n	80a08f6 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x132>
    case WHITE:   *pBuf |=  mask;  break;
 80a0906:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a090a:	ea40 000c 	orr.w	r0, r0, ip
    if(h<mod) { return; }
 80a090e:	42b3      	cmp	r3, r6
    case INVERSE: *pBuf ^=  mask;  break;
 80a0910:	5478      	strb	r0, [r7, r1]
    if(h<mod) { return; }
 80a0912:	d340      	bcc.n	80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
    h -= mod;
 80a0914:	3a08      	subs	r2, #8
 80a0916:	4413      	add	r3, r2
 80a0918:	b2db      	uxtb	r3, r3
    pBuf += SH1106_LCDWIDTH;
 80a091a:	3580      	adds	r5, #128	; 0x80
  if(h >= 8) {
 80a091c:	2b07      	cmp	r3, #7
 80a091e:	d918      	bls.n	80a0952 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x18e>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
 80a0920:	2c02      	cmp	r4, #2
 80a0922:	f105 0280 	add.w	r2, r5, #128	; 0x80
 80a0926:	d125      	bne.n	80a0974 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1b0>
 80a0928:	4619      	mov	r1, r3
      *pBuf=~(*pBuf);
 80a092a:	f812 0c80 	ldrb.w	r0, [r2, #-128]
        h -= 8;
 80a092e:	3908      	subs	r1, #8
      *pBuf=~(*pBuf);
 80a0930:	43c0      	mvns	r0, r0
        h -= 8;
 80a0932:	b2c9      	uxtb	r1, r1
      } while(h >= 8);
 80a0934:	2907      	cmp	r1, #7
      *pBuf=~(*pBuf);
 80a0936:	f802 0c80 	strb.w	r0, [r2, #-128]
      } while(h >= 8);
 80a093a:	f102 0280 	add.w	r2, r2, #128	; 0x80
 80a093e:	d8f4      	bhi.n	80a092a <_ZN15Adafruit_SH110613drawFastVLineEssst+0x166>
 80a0940:	f1a3 0208 	sub.w	r2, r3, #8
 80a0944:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0948:	3201      	adds	r2, #1
 80a094a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80a094e:	f003 0307 	and.w	r3, r3, #7
  if(h) {
 80a0952:	b303      	cbz	r3, 80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
    register uint8_t mask = postmask[mod];
 80a0954:	4a17      	ldr	r2, [pc, #92]	; (80a09b4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1f0>)
    switch (color)
 80a0956:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 80a0958:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
 80a095a:	d019      	beq.n	80a0990 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1cc>
 80a095c:	2c02      	cmp	r4, #2
 80a095e:	d01b      	beq.n	80a0998 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d4>
 80a0960:	b9cc      	cbnz	r4, 80a0996 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d2>
      case BLACK:   *pBuf &= ~mask;  break;
 80a0962:	782a      	ldrb	r2, [r5, #0]
 80a0964:	ea22 0303 	bic.w	r3, r2, r3
 80a0968:	e014      	b.n	80a0994 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d0>
    case INVERSE: *pBuf ^=  mask;  break;
 80a096a:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a096e:	ea80 000c 	eor.w	r0, r0, ip
 80a0972:	e7cc      	b.n	80a090e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x14a>
      register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0974:	2c01      	cmp	r4, #1
 80a0976:	bf0c      	ite	eq
 80a0978:	20ff      	moveq	r0, #255	; 0xff
 80a097a:	2000      	movne	r0, #0
 80a097c:	4619      	mov	r1, r3
        h -= 8;
 80a097e:	3908      	subs	r1, #8
 80a0980:	b2c9      	uxtb	r1, r1
      } while(h >= 8);
 80a0982:	2907      	cmp	r1, #7
      *pBuf = val;
 80a0984:	f802 0c80 	strb.w	r0, [r2, #-128]
      } while(h >= 8);
 80a0988:	f102 0280 	add.w	r2, r2, #128	; 0x80
 80a098c:	d8f7      	bhi.n	80a097e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1ba>
 80a098e:	e7d7      	b.n	80a0940 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x17c>
      case WHITE:   *pBuf |=  mask;  break;
 80a0990:	782a      	ldrb	r2, [r5, #0]
 80a0992:	4313      	orrs	r3, r2
      case INVERSE: *pBuf ^=  mask;  break;
 80a0994:	702b      	strb	r3, [r5, #0]
}
 80a0996:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case INVERSE: *pBuf ^=  mask;  break;
 80a0998:	782a      	ldrb	r2, [r5, #0]
 80a099a:	4053      	eors	r3, r2
 80a099c:	e7fa      	b.n	80a0994 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d0>
  switch (color)
 80a099e:	2c01      	cmp	r4, #1
 80a09a0:	d0b1      	beq.n	80a0906 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x142>
 80a09a2:	2c02      	cmp	r4, #2
 80a09a4:	d0e1      	beq.n	80a096a <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1a6>
 80a09a6:	2c00      	cmp	r4, #0
 80a09a8:	d1b4      	bne.n	80a0914 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x150>
 80a09aa:	e790      	b.n	80a08ce <_ZN15Adafruit_SH110613drawFastVLineEssst+0x10a>
 80a09ac:	20000018 	.word	0x20000018
 80a09b0:	20000010 	.word	0x20000010
 80a09b4:	20000008 	.word	0x20000008

080a09b8 <_ZN15Adafruit_SH1106D1Ev>:
#define SH1106_RIGHT_HORIZONTAL_SCROLL 0x26
#define SH1106_LEFT_HORIZONTAL_SCROLL 0x27
#define SH1106_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SH1106_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SH1106 : public Adafruit_GFX {
 80a09b8:	4770      	bx	lr
	...

080a09bc <_ZN15Adafruit_SH11069drawPixelEsst>:
void Adafruit_SH1106::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a09bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a09be:	1e0d      	subs	r5, r1, #0
void Adafruit_SH1106::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a09c0:	4606      	mov	r6, r0
 80a09c2:	4614      	mov	r4, r2
 80a09c4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a09c6:	db4d      	blt.n	80a0a64 <_ZN15Adafruit_SH11069drawPixelEsst+0xa8>
 80a09c8:	f000 fc11 	bl	80a11ee <_ZN12Adafruit_GFX5widthEv>
 80a09cc:	42a8      	cmp	r0, r5
 80a09ce:	dd49      	ble.n	80a0a64 <_ZN15Adafruit_SH11069drawPixelEsst+0xa8>
 80a09d0:	2c00      	cmp	r4, #0
 80a09d2:	db47      	blt.n	80a0a64 <_ZN15Adafruit_SH11069drawPixelEsst+0xa8>
 80a09d4:	4630      	mov	r0, r6
 80a09d6:	f000 fc0d 	bl	80a11f4 <_ZN12Adafruit_GFX6heightEv>
 80a09da:	42a0      	cmp	r0, r4
 80a09dc:	dd42      	ble.n	80a0a64 <_ZN15Adafruit_SH11069drawPixelEsst+0xa8>
  switch (getRotation()) {
 80a09de:	4630      	mov	r0, r6
 80a09e0:	f000 fc03 	bl	80a11ea <_ZN12Adafruit_GFX11getRotationEv>
 80a09e4:	2802      	cmp	r0, #2
 80a09e6:	d01e      	beq.n	80a0a26 <_ZN15Adafruit_SH11069drawPixelEsst+0x6a>
 80a09e8:	2803      	cmp	r0, #3
 80a09ea:	d025      	beq.n	80a0a38 <_ZN15Adafruit_SH11069drawPixelEsst+0x7c>
 80a09ec:	2801      	cmp	r0, #1
 80a09ee:	d104      	bne.n	80a09fa <_ZN15Adafruit_SH11069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
 80a09f0:	43e4      	mvns	r4, r4
 80a09f2:	8932      	ldrh	r2, [r6, #8]
 80a09f4:	4422      	add	r2, r4
    break;
 80a09f6:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
 80a09f8:	b215      	sxth	r5, r2
    switch (color)
 80a09fa:	2f01      	cmp	r7, #1
 80a09fc:	d022      	beq.n	80a0a44 <_ZN15Adafruit_SH11069drawPixelEsst+0x88>
 80a09fe:	2f02      	cmp	r7, #2
 80a0a00:	d031      	beq.n	80a0a66 <_ZN15Adafruit_SH11069drawPixelEsst+0xaa>
 80a0a02:	bb7f      	cbnz	r7, 80a0a64 <_ZN15Adafruit_SH11069drawPixelEsst+0xa8>
      case BLACK:   buffer[x+ (y/8)*SH1106_LCDWIDTH] &= ~(1 << (y&7)); break;
 80a0a04:	4621      	mov	r1, r4
 80a0a06:	2201      	movs	r2, #1
 80a0a08:	2c00      	cmp	r4, #0
 80a0a0a:	bfb8      	it	lt
 80a0a0c:	1de1      	addlt	r1, r4, #7
 80a0a0e:	4b1e      	ldr	r3, [pc, #120]	; (80a0a88 <_ZN15Adafruit_SH11069drawPixelEsst+0xcc>)
 80a0a10:	f341 01cf 	sbfx	r1, r1, #3, #16
 80a0a14:	f004 0407 	and.w	r4, r4, #7
 80a0a18:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
 80a0a1c:	40a2      	lsls	r2, r4
 80a0a1e:	5d5c      	ldrb	r4, [r3, r5]
 80a0a20:	ea24 0402 	bic.w	r4, r4, r2
 80a0a24:	e01d      	b.n	80a0a62 <_ZN15Adafruit_SH11069drawPixelEsst+0xa6>
    y = HEIGHT - y - 1;
 80a0a26:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
 80a0a28:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a0a2a:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
 80a0a2c:	3901      	subs	r1, #1
 80a0a2e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
 80a0a30:	4414      	add	r4, r2
    x = WIDTH - x - 1;
 80a0a32:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 80a0a34:	b224      	sxth	r4, r4
    break;
 80a0a36:	e7e0      	b.n	80a09fa <_ZN15Adafruit_SH11069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
 80a0a38:	8973      	ldrh	r3, [r6, #10]
 80a0a3a:	3b01      	subs	r3, #1
 80a0a3c:	1b5b      	subs	r3, r3, r5
    break;
 80a0a3e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
 80a0a40:	b21c      	sxth	r4, r3
    break;
 80a0a42:	e7da      	b.n	80a09fa <_ZN15Adafruit_SH11069drawPixelEsst+0x3e>
      case WHITE:   buffer[x+ (y/8)*SH1106_LCDWIDTH] |=  (1 << (y&7)); break;
 80a0a44:	4621      	mov	r1, r4
 80a0a46:	2c00      	cmp	r4, #0
 80a0a48:	f004 0207 	and.w	r2, r4, #7
 80a0a4c:	bfb8      	it	lt
 80a0a4e:	1de1      	addlt	r1, r4, #7
 80a0a50:	2401      	movs	r4, #1
 80a0a52:	4b0d      	ldr	r3, [pc, #52]	; (80a0a88 <_ZN15Adafruit_SH11069drawPixelEsst+0xcc>)
 80a0a54:	f341 01cf 	sbfx	r1, r1, #3, #16
 80a0a58:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
 80a0a5c:	4094      	lsls	r4, r2
 80a0a5e:	5d5a      	ldrb	r2, [r3, r5]
 80a0a60:	4314      	orrs	r4, r2
      case INVERSE: buffer[x+ (y/8)*SH1106_LCDWIDTH] ^=  (1 << (y&7)); break;
 80a0a62:	555c      	strb	r4, [r3, r5]
}
 80a0a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case INVERSE: buffer[x+ (y/8)*SH1106_LCDWIDTH] ^=  (1 << (y&7)); break;
 80a0a66:	4621      	mov	r1, r4
 80a0a68:	2201      	movs	r2, #1
 80a0a6a:	2c00      	cmp	r4, #0
 80a0a6c:	bfb8      	it	lt
 80a0a6e:	1de1      	addlt	r1, r4, #7
 80a0a70:	4b05      	ldr	r3, [pc, #20]	; (80a0a88 <_ZN15Adafruit_SH11069drawPixelEsst+0xcc>)
 80a0a72:	f341 01cf 	sbfx	r1, r1, #3, #16
 80a0a76:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
 80a0a7a:	f004 0407 	and.w	r4, r4, #7
 80a0a7e:	fa02 f404 	lsl.w	r4, r2, r4
 80a0a82:	5d5a      	ldrb	r2, [r3, r5]
 80a0a84:	4054      	eors	r4, r2
 80a0a86:	e7ec      	b.n	80a0a62 <_ZN15Adafruit_SH11069drawPixelEsst+0xa6>
 80a0a88:	20000018 	.word	0x20000018

080a0a8c <_ZN15Adafruit_SH1106D0Ev>:
 80a0a8c:	b510      	push	{r4, lr}
 80a0a8e:	4604      	mov	r4, r0
 80a0a90:	2124      	movs	r1, #36	; 0x24
 80a0a92:	f001 fc83 	bl	80a239c <_ZdlPvj>
 80a0a96:	4620      	mov	r0, r4
 80a0a98:	bd10      	pop	{r4, pc}
	...

080a0a9c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0a9c:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <__tcf_0+0xc>)
 80a0a9e:	6898      	ldr	r0, [r3, #8]
 80a0aa0:	b108      	cbz	r0, 80a0aa6 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0aa2:	f000 bbf3 	b.w	80a128c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0aa6:	4770      	bx	lr
 80a0aa8:	200004f4 	.word	0x200004f4

080a0aac <_ZN15Adafruit_SH1106C1Ea>:
Adafruit_SH1106::Adafruit_SH1106(int8_t reset) :
 80a0aac:	b538      	push	{r3, r4, r5, lr}
 80a0aae:	4604      	mov	r4, r0
 80a0ab0:	460d      	mov	r5, r1
Adafruit_GFX(SH1106_LCDWIDTH, SH1106_LCDHEIGHT) {
 80a0ab2:	2240      	movs	r2, #64	; 0x40
 80a0ab4:	2180      	movs	r1, #128	; 0x80
 80a0ab6:	f000 fac5 	bl	80a1044 <_ZN12Adafruit_GFXC1Ess>
 80a0aba:	4b06      	ldr	r3, [pc, #24]	; (80a0ad4 <_ZN15Adafruit_SH1106C1Ea+0x28>)
}
 80a0abc:	4620      	mov	r0, r4
Adafruit_GFX(SH1106_LCDWIDTH, SH1106_LCDHEIGHT) {
 80a0abe:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 80a0ac0:	23ff      	movs	r3, #255	; 0xff
 80a0ac2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80a0ac6:	7763      	strb	r3, [r4, #29]
 80a0ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  rst = reset;
 80a0acc:	f884 5020 	strb.w	r5, [r4, #32]
  sclk = dc = cs = sid = -1;
 80a0ad0:	83e3      	strh	r3, [r4, #30]
}
 80a0ad2:	bd38      	pop	{r3, r4, r5, pc}
 80a0ad4:	080a3428 	.word	0x080a3428

080a0ad8 <_ZN15Adafruit_SH110612clearDisplayEv>:
  memset(buffer, 0, (SH1106_LCDWIDTH*SH1106_LCDHEIGHT/8));
 80a0ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0adc:	2100      	movs	r1, #0
 80a0ade:	4801      	ldr	r0, [pc, #4]	; (80a0ae4 <_ZN15Adafruit_SH110612clearDisplayEv+0xc>)
 80a0ae0:	f002 bbd6 	b.w	80a3290 <memset>
 80a0ae4:	20000018 	.word	0x20000018

080a0ae8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a0ae8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a0aea:	4d0b      	ldr	r5, [pc, #44]	; (80a0b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 80a0aec:	7829      	ldrb	r1, [r5, #0]
 80a0aee:	f3bf 8f5b 	dmb	ish
 80a0af2:	f011 0401 	ands.w	r4, r1, #1
 80a0af6:	d10d      	bne.n	80a0b14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a0af8:	4628      	mov	r0, r5
 80a0afa:	f7ff fadf 	bl	80a00bc <__cxa_guard_acquire>
 80a0afe:	b148      	cbz	r0, 80a0b14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a0b00:	4621      	mov	r1, r4
 80a0b02:	4806      	ldr	r0, [pc, #24]	; (80a0b1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a0b04:	f000 fdcb 	bl	80a169e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0b08:	4628      	mov	r0, r5
 80a0b0a:	f7ff fadc 	bl	80a00c6 <__cxa_guard_release>
 80a0b0e:	4804      	ldr	r0, [pc, #16]	; (80a0b20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a0b10:	f002 fbaa 	bl	80a3268 <atexit>
        return instance;
    }
 80a0b14:	4801      	ldr	r0, [pc, #4]	; (80a0b1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a0b16:	bd38      	pop	{r3, r4, r5, pc}
 80a0b18:	200004f0 	.word	0x200004f0
 80a0b1c:	200004f4 	.word	0x200004f4
 80a0b20:	080a0a9d 	.word	0x080a0a9d

080a0b24 <_ZN15Adafruit_SH110612fastSPIwriteEh>:
inline void Adafruit_SH1106::fastSPIwrite(uint8_t d) {
 80a0b24:	b510      	push	{r4, lr}
  if(hwSPI) {
 80a0b26:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
inline void Adafruit_SH1106::fastSPIwrite(uint8_t d) {
 80a0b2a:	460c      	mov	r4, r1
  if(hwSPI) {
 80a0b2c:	b133      	cbz	r3, 80a0b3c <_ZN15Adafruit_SH110612fastSPIwriteEh+0x18>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a0b2e:	f7ff ffdb 	bl	80a0ae8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0b32:	4621      	mov	r1, r4
}
 80a0b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0b38:	f000 be50 	b.w	80a17dc <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a0b3c:	460b      	mov	r3, r1
}
 80a0b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a0b42:	7f81      	ldrb	r1, [r0, #30]
 80a0b44:	2201      	movs	r2, #1
 80a0b46:	7f40      	ldrb	r0, [r0, #29]
 80a0b48:	f001 bbb9 	b.w	80a22be <shiftOut>

080a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>:
void Adafruit_SH1106::SH1106_command(uint8_t c) {
 80a0b4c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 80a0b4e:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SH1106::SH1106_command(uint8_t c) {
 80a0b52:	4604      	mov	r4, r0
  if (sid != -1)
 80a0b54:	3301      	adds	r3, #1
void Adafruit_SH1106::SH1106_command(uint8_t c) {
 80a0b56:	460d      	mov	r5, r1
  if (sid != -1)
 80a0b58:	d01d      	beq.n	80a0b96 <_ZN15Adafruit_SH110614SH1106_commandEh+0x4a>
    digitalWrite(cs, HIGH);
 80a0b5a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 80a0b5e:	2101      	movs	r1, #1
 80a0b60:	b280      	uxth	r0, r0
 80a0b62:	f001 fb7c 	bl	80a225e <digitalWrite>
    digitalWrite(dc, LOW);
 80a0b66:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a0b6a:	2100      	movs	r1, #0
 80a0b6c:	b280      	uxth	r0, r0
 80a0b6e:	f001 fb76 	bl	80a225e <digitalWrite>
    digitalWrite(cs, LOW);
 80a0b72:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0b76:	2100      	movs	r1, #0
 80a0b78:	b280      	uxth	r0, r0
 80a0b7a:	f001 fb70 	bl	80a225e <digitalWrite>
    fastSPIwrite(c);
 80a0b7e:	4629      	mov	r1, r5
 80a0b80:	4620      	mov	r0, r4
 80a0b82:	f7ff ffcf 	bl	80a0b24 <_ZN15Adafruit_SH110612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
 80a0b86:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0b8a:	2101      	movs	r1, #1
}
 80a0b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
 80a0b90:	b280      	uxth	r0, r0
 80a0b92:	f001 bb64 	b.w	80a225e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
 80a0b96:	f001 fbdd 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0b9a:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a0b9e:	f001 fa31 	bl	80a2004 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 80a0ba2:	f001 fbd7 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0ba6:	6803      	ldr	r3, [r0, #0]
 80a0ba8:	2100      	movs	r1, #0
 80a0baa:	689b      	ldr	r3, [r3, #8]
 80a0bac:	4798      	blx	r3
    Wire.write(c);
 80a0bae:	f001 fbd1 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0bb2:	6803      	ldr	r3, [r0, #0]
 80a0bb4:	4629      	mov	r1, r5
 80a0bb6:	689b      	ldr	r3, [r3, #8]
 80a0bb8:	4798      	blx	r3
    Wire.endTransmission();
 80a0bba:	f001 fbcb 	bl	80a2354 <_Z19__fetch_global_Wirev>
}
 80a0bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
 80a0bc2:	f001 ba26 	b.w	80a2012 <_ZN7TwoWire15endTransmissionEv>
	...

080a0bc8 <_ZN15Adafruit_SH11067displayEv>:
void Adafruit_SH1106::display(void) {
 80a0bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0bcc:	4604      	mov	r4, r0
    SH1106_command(SH1106_SETLOWCOLUMN | 0x0);  // low col = 0
 80a0bce:	2100      	movs	r1, #0
 80a0bd0:	f7ff ffbc 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETHIGHCOLUMN | 0x0);  // hi col = 0
 80a0bd4:	2110      	movs	r1, #16
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	f7ff ffb8 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETSTARTLINE | 0x0); // line #0
 80a0bdc:	2140      	movs	r1, #64	; 0x40
 80a0bde:	4620      	mov	r0, r4
 80a0be0:	f7ff ffb4 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
	if(sid != -1)
 80a0be4:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a0be8:	26b0      	movs	r6, #176	; 0xb0
 80a0bea:	3301      	adds	r3, #1
 80a0bec:	f04f 0580 	mov.w	r5, #128	; 0x80
 80a0bf0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80a0ce0 <_ZN15Adafruit_SH11067displayEv+0x118>
 80a0bf4:	d03d      	beq.n	80a0c72 <_ZN15Adafruit_SH11067displayEv+0xaa>
        SH1106_command(0xB0 + i + m_row);//set page address
 80a0bf6:	4631      	mov	r1, r6
 80a0bf8:	4620      	mov	r0, r4
 80a0bfa:	f7ff ffa7 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
        SH1106_command(m_col & 0xf);//set lower column address
 80a0bfe:	2102      	movs	r1, #2
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	f7ff ffa3 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
        SH1106_command(0x10 | (m_col >> 4));//set higher column address
 80a0c06:	2110      	movs	r1, #16
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	f1a5 0a80 	sub.w	sl, r5, #128	; 0x80
 80a0c0e:	f7ff ff9d 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
			  digitalWrite(cs, HIGH);
 80a0c12:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0c16:	2101      	movs	r1, #1
 80a0c18:	b280      	uxth	r0, r0
 80a0c1a:	f001 fb20 	bl	80a225e <digitalWrite>
    digitalWrite(dc, HIGH);
 80a0c1e:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a0c22:	2101      	movs	r1, #1
 80a0c24:	b280      	uxth	r0, r0
 80a0c26:	f001 fb1a 	bl	80a225e <digitalWrite>
    digitalWrite(cs, LOW);
 80a0c2a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0c2e:	2100      	movs	r1, #0
 80a0c30:	b280      	uxth	r0, r0
 80a0c32:	f001 fb14 	bl	80a225e <digitalWrite>
 80a0c36:	2710      	movs	r7, #16
 80a0c38:	eb08 090a 	add.w	r9, r8, sl
					fastSPIwrite(buffer[p]);
 80a0c3c:	4620      	mov	r0, r4
 80a0c3e:	f819 1b01 	ldrb.w	r1, [r9], #1
 80a0c42:	3f01      	subs	r7, #1
 80a0c44:	f7ff ff6e 	bl	80a0b24 <_ZN15Adafruit_SH110612fastSPIwriteEh>
            for ( k = 0; k < width; k++, p++) {
 80a0c48:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80a0c4c:	d1f6      	bne.n	80a0c3c <_ZN15Adafruit_SH11067displayEv+0x74>
              digitalWrite(cs, HIGH);
 80a0c4e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0c52:	2101      	movs	r1, #1
 80a0c54:	f10a 0a10 	add.w	sl, sl, #16
 80a0c58:	b280      	uxth	r0, r0
 80a0c5a:	f001 fb00 	bl	80a225e <digitalWrite>
        for( j = 0; j < 8; j++){
 80a0c5e:	4555      	cmp	r5, sl
 80a0c60:	d1d7      	bne.n	80a0c12 <_ZN15Adafruit_SH11067displayEv+0x4a>
		for ( i = 0; i < height; i++) {
 80a0c62:	3580      	adds	r5, #128	; 0x80
 80a0c64:	3601      	adds	r6, #1
 80a0c66:	f5b5 6f90 	cmp.w	r5, #1152	; 0x480
 80a0c6a:	b2f6      	uxtb	r6, r6
 80a0c6c:	d1c3      	bne.n	80a0bf6 <_ZN15Adafruit_SH11067displayEv+0x2e>
}
 80a0c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        SH1106_command(0xB0 + i + m_row);//set page address
 80a0c72:	4631      	mov	r1, r6
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	f7ff ff69 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
        SH1106_command(m_col & 0xf);//set lower column address
 80a0c7a:	2102      	movs	r1, #2
 80a0c7c:	4620      	mov	r0, r4
 80a0c7e:	f7ff ff65 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
        SH1106_command(0x10 | (m_col >> 4));//set higher column address
 80a0c82:	2110      	movs	r1, #16
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
 80a0c8a:	f7ff ff5f 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
			Wire.beginTransmission(_i2caddr);
 80a0c8e:	f001 fb61 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0c92:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a0c96:	f001 f9b5 	bl	80a2004 <_ZN7TwoWire17beginTransmissionEi>
            Wire.write(0x40);
 80a0c9a:	f001 fb5b 	bl	80a2354 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0c9e:	6803      	ldr	r3, [r0, #0]
 80a0ca0:	2140      	movs	r1, #64	; 0x40
 80a0ca2:	689b      	ldr	r3, [r3, #8]
 80a0ca4:	4798      	blx	r3
 80a0ca6:	2710      	movs	r7, #16
 80a0ca8:	eb08 0a09 	add.w	sl, r8, r9
		Wire.write(buffer[p]);
 80a0cac:	f001 fb52 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0cb0:	6803      	ldr	r3, [r0, #0]
 80a0cb2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80a0cb6:	689b      	ldr	r3, [r3, #8]
 80a0cb8:	3f01      	subs	r7, #1
 80a0cba:	4798      	blx	r3
            for ( k = 0; k < width; k++, p++) {
 80a0cbc:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80a0cc0:	d1f4      	bne.n	80a0cac <_ZN15Adafruit_SH11067displayEv+0xe4>
            Wire.endTransmission();
 80a0cc2:	f001 fb47 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0cc6:	f109 0910 	add.w	r9, r9, #16
 80a0cca:	f001 f9a2 	bl	80a2012 <_ZN7TwoWire15endTransmissionEv>
        for( j = 0; j < 8; j++){
 80a0cce:	45a9      	cmp	r9, r5
 80a0cd0:	d1dd      	bne.n	80a0c8e <_ZN15Adafruit_SH11067displayEv+0xc6>
	for ( i = 0; i < height; i++) {
 80a0cd2:	3580      	adds	r5, #128	; 0x80
 80a0cd4:	3601      	adds	r6, #1
 80a0cd6:	f5b5 6f90 	cmp.w	r5, #1152	; 0x480
 80a0cda:	b2f6      	uxtb	r6, r6
 80a0cdc:	d1c9      	bne.n	80a0c72 <_ZN15Adafruit_SH11067displayEv+0xaa>
 80a0cde:	e7c6      	b.n	80a0c6e <_ZN15Adafruit_SH11067displayEv+0xa6>
 80a0ce0:	20000018 	.word	0x20000018

080a0ce4 <_ZN15Adafruit_SH11065beginEhhb>:
void Adafruit_SH1106::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
 80a0ce4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
 80a0ce6:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SH1106::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
 80a0cea:	4604      	mov	r4, r0
  if (sid != -1){
 80a0cec:	3301      	adds	r3, #1
void Adafruit_SH1106::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
 80a0cee:	460d      	mov	r5, r1
  _vccstate = vccstate;
 80a0cf0:	7701      	strb	r1, [r0, #28]
  _i2caddr = i2caddr;
 80a0cf2:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
 80a0cf4:	f000 80c9 	beq.w	80a0e8a <_ZN15Adafruit_SH11065beginEhhb+0x1a6>
    pinMode(dc, OUTPUT);
 80a0cf8:	f990 001f 	ldrsb.w	r0, [r0, #31]
 80a0cfc:	2101      	movs	r1, #1
 80a0cfe:	b280      	uxth	r0, r0
 80a0d00:	f001 fa9c 	bl	80a223c <pinMode>
    pinMode(cs, OUTPUT);
 80a0d04:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0d08:	2101      	movs	r1, #1
 80a0d0a:	b280      	uxth	r0, r0
 80a0d0c:	f001 fa96 	bl	80a223c <pinMode>
    if (!hwSPI){
 80a0d10:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0d14:	2b00      	cmp	r3, #0
 80a0d16:	f000 80a6 	beq.w	80a0e66 <_ZN15Adafruit_SH11065beginEhhb+0x182>
        digitalWrite(cs, HIGH);
 80a0d1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0d1e:	2101      	movs	r1, #1
 80a0d20:	b280      	uxth	r0, r0
 80a0d22:	f001 fa9c 	bl	80a225e <digitalWrite>
        instance().setBitOrder(order);
 80a0d26:	f7ff fedf 	bl	80a0ae8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0d2a:	2101      	movs	r1, #1
 80a0d2c:	f000 fcd4 	bl	80a16d8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
 80a0d30:	f7ff feda 	bl	80a0ae8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0d34:	2110      	movs	r1, #16
 80a0d36:	f000 fd2d 	bl	80a1794 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 80a0d3a:	f7ff fed5 	bl	80a0ae8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0d3e:	2100      	movs	r1, #0
 80a0d40:	f000 fcd8 	bl	80a16f4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
 80a0d44:	f7ff fed0 	bl	80a0ae8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0d48:	f000 fcb8 	bl	80a16bc <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
 80a0d4c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0d50:	2101      	movs	r1, #1
 80a0d52:	b280      	uxth	r0, r0
 80a0d54:	f001 fa72 	bl	80a223c <pinMode>
  digitalWrite(rst, HIGH);
 80a0d58:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0d5c:	2101      	movs	r1, #1
 80a0d5e:	b280      	uxth	r0, r0
 80a0d60:	f001 fa7d 	bl	80a225e <digitalWrite>
  delay(1);
 80a0d64:	2001      	movs	r0, #1
 80a0d66:	f000 fe87 	bl	80a1a78 <delay>
  digitalWrite(rst, LOW);
 80a0d6a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0d6e:	2100      	movs	r1, #0
 80a0d70:	b280      	uxth	r0, r0
 80a0d72:	f001 fa74 	bl	80a225e <digitalWrite>
  delay(10);
 80a0d76:	200a      	movs	r0, #10
 80a0d78:	f000 fe7e 	bl	80a1a78 <delay>
  digitalWrite(rst, HIGH);
 80a0d7c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0d80:	2101      	movs	r1, #1
 80a0d82:	b280      	uxth	r0, r0
 80a0d84:	f001 fa6b 	bl	80a225e <digitalWrite>
    SH1106_command(SH1106_DISPLAYOFF);                    // 0xAE
 80a0d88:	4620      	mov	r0, r4
 80a0d8a:	21ae      	movs	r1, #174	; 0xae
 80a0d8c:	f7ff fede 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETDISPLAYCLOCKDIV);            // 0xD5
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	21d5      	movs	r1, #213	; 0xd5
 80a0d94:	f7ff feda 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(0x80);                                  // the suggested ratio 0x80
 80a0d98:	4620      	mov	r0, r4
 80a0d9a:	2180      	movs	r1, #128	; 0x80
 80a0d9c:	f7ff fed6 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETMULTIPLEX);                  // 0xA8
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	21a8      	movs	r1, #168	; 0xa8
 80a0da4:	f7ff fed2 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(0x3F);
 80a0da8:	4620      	mov	r0, r4
 80a0daa:	213f      	movs	r1, #63	; 0x3f
 80a0dac:	f7ff fece 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETDISPLAYOFFSET);              // 0xD3
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	21d3      	movs	r1, #211	; 0xd3
 80a0db4:	f7ff feca 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(0x00);                                   // no offset
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	2100      	movs	r1, #0
 80a0dbc:	f7ff fec6 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETSTARTLINE | 0x0);            // line #0 0x40
 80a0dc0:	4620      	mov	r0, r4
 80a0dc2:	2140      	movs	r1, #64	; 0x40
 80a0dc4:	f7ff fec2 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_CHARGEPUMP);                    // 0x8D
 80a0dc8:	218d      	movs	r1, #141	; 0x8d
 80a0dca:	4620      	mov	r0, r4
 80a0dcc:	f7ff febe 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    if (vccstate == SH1106_EXTERNALVCC)
 80a0dd0:	2d01      	cmp	r5, #1
      { SH1106_command(0x10); }
 80a0dd2:	bf0c      	ite	eq
 80a0dd4:	2110      	moveq	r1, #16
      { SH1106_command(0x14); }
 80a0dd6:	2114      	movne	r1, #20
 80a0dd8:	4620      	mov	r0, r4
 80a0dda:	f7ff feb7 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_MEMORYMODE);                    // 0x20
 80a0dde:	4620      	mov	r0, r4
 80a0de0:	2120      	movs	r1, #32
 80a0de2:	f7ff feb3 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(0x00);                                  // 0x0 act like ks0108
 80a0de6:	4620      	mov	r0, r4
 80a0de8:	2100      	movs	r1, #0
 80a0dea:	f7ff feaf 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SEGREMAP | 0x1);
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	21a1      	movs	r1, #161	; 0xa1
 80a0df2:	f7ff feab 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_COMSCANDEC);
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	21c8      	movs	r1, #200	; 0xc8
 80a0dfa:	f7ff fea7 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETCOMPINS);                    // 0xDA
 80a0dfe:	4620      	mov	r0, r4
 80a0e00:	21da      	movs	r1, #218	; 0xda
 80a0e02:	f7ff fea3 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(0x12);
 80a0e06:	4620      	mov	r0, r4
 80a0e08:	2112      	movs	r1, #18
 80a0e0a:	f7ff fe9f 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETCONTRAST);                   // 0x81
 80a0e0e:	2181      	movs	r1, #129	; 0x81
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	f7ff fe9b 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    if (vccstate == SH1106_EXTERNALVCC)
 80a0e16:	2d01      	cmp	r5, #1
      { SH1106_command(0x9F); }
 80a0e18:	bf0c      	ite	eq
 80a0e1a:	219f      	moveq	r1, #159	; 0x9f
      { SH1106_command(0xCF); }
 80a0e1c:	21cf      	movne	r1, #207	; 0xcf
 80a0e1e:	4620      	mov	r0, r4
 80a0e20:	f7ff fe94 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETPRECHARGE);                  // 0xd9
 80a0e24:	21d9      	movs	r1, #217	; 0xd9
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	f7ff fe90 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    if (vccstate == SH1106_EXTERNALVCC)
 80a0e2c:	2d01      	cmp	r5, #1
      { SH1106_command(0x22); }
 80a0e2e:	bf0c      	ite	eq
 80a0e30:	2122      	moveq	r1, #34	; 0x22
      { SH1106_command(0xF1); }
 80a0e32:	21f1      	movne	r1, #241	; 0xf1
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	f7ff fe89 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_SETVCOMDETECT);                 // 0xDB
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	21db      	movs	r1, #219	; 0xdb
 80a0e3e:	f7ff fe85 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(0x40);
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	2140      	movs	r1, #64	; 0x40
 80a0e46:	f7ff fe81 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_DISPLAYALLON_RESUME);           // 0xA4
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	21a4      	movs	r1, #164	; 0xa4
 80a0e4e:	f7ff fe7d 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    SH1106_command(SH1106_NORMALDISPLAY);                 // 0xA6
 80a0e52:	4620      	mov	r0, r4
 80a0e54:	21a6      	movs	r1, #166	; 0xa6
 80a0e56:	f7ff fe79 	bl	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_DISPLAYON);//--turn on oled panel
 80a0e5a:	4620      	mov	r0, r4
}
 80a0e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SH1106_command(SH1106_DISPLAYON);//--turn on oled panel
 80a0e60:	21af      	movs	r1, #175	; 0xaf
 80a0e62:	f7ff be73 	b.w	80a0b4c <_ZN15Adafruit_SH110614SH1106_commandEh>
    	pinMode(sid, OUTPUT);
 80a0e66:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0e6a:	2101      	movs	r1, #1
 80a0e6c:	b280      	uxth	r0, r0
 80a0e6e:	f001 f9e5 	bl	80a223c <pinMode>
    	pinMode(sclk, OUTPUT);
 80a0e72:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a0e76:	2101      	movs	r1, #1
 80a0e78:	b280      	uxth	r0, r0
 80a0e7a:	f001 f9df 	bl	80a223c <pinMode>
    if (hwSPI){
 80a0e7e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0e82:	2b00      	cmp	r3, #0
 80a0e84:	f43f af62 	beq.w	80a0d4c <_ZN15Adafruit_SH11065beginEhhb+0x68>
 80a0e88:	e747      	b.n	80a0d1a <_ZN15Adafruit_SH11065beginEhhb+0x36>
    Wire.begin();
 80a0e8a:	f001 fa63 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0e8e:	f001 f8af 	bl	80a1ff0 <_ZN7TwoWire5beginEv>
 80a0e92:	e75b      	b.n	80a0d4c <_ZN15Adafruit_SH11065beginEhhb+0x68>

080a0e94 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e98:	461f      	mov	r7, r3
 80a0e9a:	b085      	sub	sp, #20
 80a0e9c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0ea0:	eba7 0a01 	sub.w	sl, r7, r1
 80a0ea4:	eba8 0902 	sub.w	r9, r8, r2
 80a0ea8:	f1b9 0f00 	cmp.w	r9, #0
 80a0eac:	bfb8      	it	lt
 80a0eae:	f1c9 0900 	rsblt	r9, r9, #0
 80a0eb2:	f1ba 0f00 	cmp.w	sl, #0
 80a0eb6:	bfb8      	it	lt
 80a0eb8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 80a0ebc:	45d1      	cmp	r9, sl
			    uint16_t color) {
 80a0ebe:	4683      	mov	fp, r0
 80a0ec0:	460c      	mov	r4, r1
 80a0ec2:	4616      	mov	r6, r2
 80a0ec4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 80a0ec8:	dd04      	ble.n	80a0ed4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 80a0eca:	463a      	mov	r2, r7
    swap(x0, y0);
 80a0ecc:	4634      	mov	r4, r6
    swap(x1, y1);
 80a0ece:	4647      	mov	r7, r8
    swap(x0, y0);
 80a0ed0:	460e      	mov	r6, r1
    swap(x1, y1);
 80a0ed2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 80a0ed4:	42bc      	cmp	r4, r7
 80a0ed6:	dd05      	ble.n	80a0ee4 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 80a0ed8:	4632      	mov	r2, r6
    swap(x0, x1);
    swap(y0, y1);
 80a0eda:	4646      	mov	r6, r8
 80a0edc:	4690      	mov	r8, r2
  if (x0 > x1) {
 80a0ede:	4622      	mov	r2, r4
 80a0ee0:	463c      	mov	r4, r7
 80a0ee2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0ee4:	1b3a      	subs	r2, r7, r4
 80a0ee6:	b291      	uxth	r1, r2
 80a0ee8:	9100      	str	r1, [sp, #0]
  dy = abs(y1 - y0);
 80a0eea:	eba8 0106 	sub.w	r1, r8, r6
 80a0eee:	2900      	cmp	r1, #0
 80a0ef0:	bfb8      	it	lt
 80a0ef2:	4249      	neglt	r1, r1

  int16_t err = dx / 2;
 80a0ef4:	f3c2 35c0 	ubfx	r5, r2, #15, #1
  dy = abs(y1 - y0);
 80a0ef8:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 80a0efa:	b211      	sxth	r1, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0efc:	4546      	cmp	r6, r8
 80a0efe:	bfb4      	ite	lt
 80a0f00:	2201      	movlt	r2, #1
 80a0f02:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
 80a0f06:	440d      	add	r5, r1
 80a0f08:	106d      	asrs	r5, r5, #1
    ystep = -1;
 80a0f0a:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a0f0c:	42bc      	cmp	r4, r7
 80a0f0e:	dc1c      	bgt.n	80a0f4a <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
 80a0f10:	f8db 2000 	ldr.w	r2, [fp]
 80a0f14:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 80a0f16:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80a0f1a:	bfc7      	ittee	gt
 80a0f1c:	4631      	movgt	r1, r6
 80a0f1e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 80a0f20:	4632      	movle	r2, r6
 80a0f22:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 80a0f24:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 80a0f26:	4658      	mov	r0, fp
 80a0f28:	47c0      	blx	r8
    }
    err -= dy;
 80a0f2a:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 80a0f2c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 80a0f2e:	1aad      	subs	r5, r5, r2
 80a0f30:	b2a9      	uxth	r1, r5
 80a0f32:	b22d      	sxth	r5, r5
    if (err < 0) {
 80a0f34:	2d00      	cmp	r5, #0
 80a0f36:	da05      	bge.n	80a0f44 <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
 80a0f38:	9a02      	ldr	r2, [sp, #8]
 80a0f3a:	4416      	add	r6, r2
      err += dx;
 80a0f3c:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 80a0f3e:	b236      	sxth	r6, r6
      err += dx;
 80a0f40:	1855      	adds	r5, r2, r1
 80a0f42:	b22d      	sxth	r5, r5
  for (; x0<=x1; x0++) {
 80a0f44:	3401      	adds	r4, #1
 80a0f46:	b224      	sxth	r4, r4
 80a0f48:	e7e0      	b.n	80a0f0c <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
 80a0f4a:	b005      	add	sp, #20
 80a0f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0f50 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0f50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0f54:	4604      	mov	r4, r0
 80a0f56:	4616      	mov	r6, r2
 80a0f58:	468a      	mov	sl, r1
 80a0f5a:	461d      	mov	r5, r3
 80a0f5c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a0f60:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 80a0f62:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a0f66:	f8cd 8000 	str.w	r8, [sp]
 80a0f6a:	69ff      	ldr	r7, [r7, #28]
 80a0f6c:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a0f6e:	6823      	ldr	r3, [r4, #0]
 80a0f70:	f109 32ff 	add.w	r2, r9, #4294967295
 80a0f74:	f8cd 8000 	str.w	r8, [sp]
 80a0f78:	4432      	add	r2, r6
 80a0f7a:	4651      	mov	r1, sl
 80a0f7c:	4620      	mov	r0, r4
 80a0f7e:	69df      	ldr	r7, [r3, #28]
 80a0f80:	b212      	sxth	r2, r2
 80a0f82:	462b      	mov	r3, r5
 80a0f84:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a0f86:	6823      	ldr	r3, [r4, #0]
 80a0f88:	f8cd 8000 	str.w	r8, [sp]
 80a0f8c:	4632      	mov	r2, r6
 80a0f8e:	4651      	mov	r1, sl
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	699f      	ldr	r7, [r3, #24]
 80a0f94:	464b      	mov	r3, r9
 80a0f96:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0f98:	6823      	ldr	r3, [r4, #0]
 80a0f9a:	3d01      	subs	r5, #1
 80a0f9c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a0fa0:	eb05 010a 	add.w	r1, r5, sl
 80a0fa4:	699d      	ldr	r5, [r3, #24]
 80a0fa6:	4632      	mov	r2, r6
 80a0fa8:	464b      	mov	r3, r9
 80a0faa:	4620      	mov	r0, r4
 80a0fac:	46ac      	mov	ip, r5
 80a0fae:	b209      	sxth	r1, r1
}
 80a0fb0:	b002      	add	sp, #8
 80a0fb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 80a0fb6:	4760      	bx	ip

080a0fb8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0fba:	3b01      	subs	r3, #1
 80a0fbc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0fc0:	4413      	add	r3, r2
 80a0fc2:	6804      	ldr	r4, [r0, #0]
 80a0fc4:	b21b      	sxth	r3, r3
 80a0fc6:	9300      	str	r3, [sp, #0]
 80a0fc8:	9501      	str	r5, [sp, #4]
 80a0fca:	460b      	mov	r3, r1
 80a0fcc:	6964      	ldr	r4, [r4, #20]
 80a0fce:	47a0      	blx	r4
}
 80a0fd0:	b003      	add	sp, #12
 80a0fd2:	bd30      	pop	{r4, r5, pc}

080a0fd4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0fd6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0fda:	6804      	ldr	r4, [r0, #0]
 80a0fdc:	e9cd 2500 	strd	r2, r5, [sp]
 80a0fe0:	3b01      	subs	r3, #1
 80a0fe2:	440b      	add	r3, r1
 80a0fe4:	6964      	ldr	r4, [r4, #20]
 80a0fe6:	b21b      	sxth	r3, r3
 80a0fe8:	47a0      	blx	r4
}
 80a0fea:	b003      	add	sp, #12
 80a0fec:	bd30      	pop	{r4, r5, pc}

080a0fee <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0fee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0ff2:	4605      	mov	r5, r0
 80a0ff4:	4616      	mov	r6, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0ff6:	460c      	mov	r4, r1
			    uint16_t color) {
 80a0ff8:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80a0ffc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 80a1000:	18cf      	adds	r7, r1, r3
 80a1002:	42bc      	cmp	r4, r7
 80a1004:	da0c      	bge.n	80a1020 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a1006:	682b      	ldr	r3, [r5, #0]
 80a1008:	f8cd 9000 	str.w	r9, [sp]
 80a100c:	4621      	mov	r1, r4
 80a100e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80a1012:	4632      	mov	r2, r6
 80a1014:	4653      	mov	r3, sl
 80a1016:	4628      	mov	r0, r5
 80a1018:	3401      	adds	r4, #1
 80a101a:	47c0      	blx	r8
  for (int16_t i=x; i<x+w; i++) {
 80a101c:	b224      	sxth	r4, r4
 80a101e:	e7f0      	b.n	80a1002 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 80a1020:	b002      	add	sp, #8
 80a1022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1026 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a1026:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a1028:	9101      	str	r1, [sp, #4]
 80a102a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80a102e:	6802      	ldr	r2, [r0, #0]
 80a1030:	9100      	str	r1, [sp, #0]
 80a1032:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80a1034:	2200      	movs	r2, #0
 80a1036:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a103a:	4611      	mov	r1, r2
 80a103c:	47a0      	blx	r4
}
 80a103e:	b002      	add	sp, #8
 80a1040:	bd10      	pop	{r4, pc}

080a1042 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 80a1042:	4770      	bx	lr

080a1044 <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 80a1044:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 80a1046:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 80a1048:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a104c:	b530      	push	{r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 80a104e:	6142      	str	r2, [r0, #20]
    Print() : write_error(0) {}
 80a1050:	2400      	movs	r4, #0
  textsize  = 1;
 80a1052:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 80a1054:	4d04      	ldr	r5, [pc, #16]	; (80a1068 <_ZN12Adafruit_GFXC1Ess+0x24>)
 80a1056:	6044      	str	r4, [r0, #4]
 80a1058:	6005      	str	r5, [r0, #0]
 80a105a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 80a105c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
 80a105e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 80a1060:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 80a1062:	7682      	strb	r2, [r0, #26]
}
 80a1064:	bd30      	pop	{r4, r5, pc}
 80a1066:	bf00      	nop
 80a1068:	080a395c 	.word	0x080a395c

080a106c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a106c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1070:	b08d      	sub	sp, #52	; 0x34
 80a1072:	9105      	str	r1, [sp, #20]
 80a1074:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
 80a1078:	4682      	mov	sl, r0
 80a107a:	9106      	str	r1, [sp, #24]
 80a107c:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 80a1080:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80a1084:	9107      	str	r1, [sp, #28]
  if((x >= _width)            || // Clip right
 80a1086:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a108a:	9805      	ldr	r0, [sp, #20]
 80a108c:	4281      	cmp	r1, r0
 80a108e:	dd4f      	ble.n	80a1130 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc4>
 80a1090:	f9ba 100e 	ldrsh.w	r1, [sl, #14]
 80a1094:	4291      	cmp	r1, r2
 80a1096:	dd4b      	ble.n	80a1130 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc4>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a1098:	2106      	movs	r1, #6
 80a109a:	fb01 0406 	mla	r4, r1, r6, r0
     (y >= _height)           || // Clip bottom
 80a109e:	2c00      	cmp	r4, #0
 80a10a0:	dd46      	ble.n	80a1130 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc4>
     ((y + 8 * size - 1) < 0))   // Clip top
 80a10a2:	eb02 04c6 	add.w	r4, r2, r6, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
 80a10a6:	2c00      	cmp	r4, #0
 80a10a8:	dd42      	ble.n	80a1130 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc4>
  for (int8_t i=0; i<6; i++ ) {
 80a10aa:	2500      	movs	r5, #0
      line = pgm_read_byte(font+(c*5)+i);
 80a10ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a10b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80a10b2:	b293      	uxth	r3, r2
 80a10b4:	9108      	str	r1, [sp, #32]
 80a10b6:	9304      	str	r3, [sp, #16]
    if (i == 5) 
 80a10b8:	2d05      	cmp	r5, #5
      line = 0x0;
 80a10ba:	bf08      	it	eq
 80a10bc:	2300      	moveq	r3, #0
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a10be:	f04f 0800 	mov.w	r8, #0
      line = pgm_read_byte(font+(c*5)+i);
 80a10c2:	bf1f      	itttt	ne
 80a10c4:	4b29      	ldrne	r3, [pc, #164]	; (80a116c <_ZN12Adafruit_GFX8drawCharEsshtth+0x100>)
 80a10c6:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
 80a10c8:	195b      	addne	r3, r3, r5
 80a10ca:	5c9b      	ldrbne	r3, [r3, r2]
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a10cc:	b2ac      	uxth	r4, r5
      line = 0x0;
 80a10ce:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a10d0:	b2b3      	uxth	r3, r6
 80a10d2:	930a      	str	r3, [sp, #40]	; 0x28
 80a10d4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a10d8:	9f04      	ldr	r7, [sp, #16]
 80a10da:	fb06 3204 	mla	r2, r6, r4, r3
          drawPixel(x+i, y+j, bg);
 80a10de:	441c      	add	r4, r3
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a10e0:	b212      	sxth	r2, r2
 80a10e2:	9209      	str	r2, [sp, #36]	; 0x24
 80a10e4:	fa0f f986 	sxth.w	r9, r6
          drawPixel(x+i, y+j, bg);
 80a10e8:	b224      	sxth	r4, r4
      if (line & 0x1) {
 80a10ea:	9b03      	ldr	r3, [sp, #12]
 80a10ec:	07db      	lsls	r3, r3, #31
 80a10ee:	d52d      	bpl.n	80a114c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
        if (size == 1) // default size
 80a10f0:	2e01      	cmp	r6, #1
 80a10f2:	f8da 3000 	ldr.w	r3, [sl]
 80a10f6:	d11e      	bne.n	80a1136 <_ZN12Adafruit_GFX8drawCharEsshtth+0xca>
          drawPixel(x+i, y+j, color);
 80a10f8:	9a04      	ldr	r2, [sp, #16]
 80a10fa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a10fe:	9b06      	ldr	r3, [sp, #24]
 80a1100:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
 80a1102:	4621      	mov	r1, r4
 80a1104:	4650      	mov	r0, sl
 80a1106:	b212      	sxth	r2, r2
 80a1108:	47d8      	blx	fp
      line >>= 1;
 80a110a:	9b03      	ldr	r3, [sp, #12]
 80a110c:	f108 0801 	add.w	r8, r8, #1
 80a1110:	085b      	lsrs	r3, r3, #1
 80a1112:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 80a1114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1116:	f1b8 0f08 	cmp.w	r8, #8
 80a111a:	441f      	add	r7, r3
 80a111c:	b2bf      	uxth	r7, r7
 80a111e:	d1e4      	bne.n	80a10ea <_ZN12Adafruit_GFX8drawCharEsshtth+0x7e>
  for (int8_t i=0; i<6; i++ ) {
 80a1120:	9b08      	ldr	r3, [sp, #32]
 80a1122:	3501      	adds	r5, #1
 80a1124:	3b01      	subs	r3, #1
 80a1126:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a112a:	b26d      	sxtb	r5, r5
 80a112c:	9308      	str	r3, [sp, #32]
 80a112e:	d1c3      	bne.n	80a10b8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4c>
}
 80a1130:	b00d      	add	sp, #52	; 0x34
 80a1132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a1136:	9a06      	ldr	r2, [sp, #24]
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a1138:	e9cd 9200 	strd	r9, r2, [sp]
 80a113c:	4650      	mov	r0, sl
 80a113e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a1142:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1144:	464b      	mov	r3, r9
 80a1146:	b23a      	sxth	r2, r7
 80a1148:	47d8      	blx	fp
 80a114a:	e7de      	b.n	80a110a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
      } else if (bg != color) {
 80a114c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1150:	4293      	cmp	r3, r2
 80a1152:	d0da      	beq.n	80a110a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
        if (size == 1) // default size
 80a1154:	2e01      	cmp	r6, #1
 80a1156:	f8da 3000 	ldr.w	r3, [sl]
 80a115a:	d105      	bne.n	80a1168 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfc>
          drawPixel(x+i, y+j, bg);
 80a115c:	9a04      	ldr	r2, [sp, #16]
 80a115e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1162:	4442      	add	r2, r8
 80a1164:	9b07      	ldr	r3, [sp, #28]
 80a1166:	e7cc      	b.n	80a1102 <_ZN12Adafruit_GFX8drawCharEsshtth+0x96>
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a1168:	9a07      	ldr	r2, [sp, #28]
 80a116a:	e7e5      	b.n	80a1138 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
 80a116c:	080a3458 	.word	0x080a3458

080a1170 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 80a1170:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
 80a1172:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 80a1174:	4604      	mov	r4, r0
 80a1176:	460b      	mov	r3, r1
 80a1178:	b085      	sub	sp, #20
  if (c == '\n') {
 80a117a:	d107      	bne.n	80a118c <_ZN12Adafruit_GFX5writeEh+0x1c>
    cursor_y += textsize*8;
 80a117c:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
 80a117e:	8a63      	ldrh	r3, [r4, #18]
 80a1180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a1184:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a1186:	2300      	movs	r3, #0
 80a1188:	8223      	strh	r3, [r4, #16]
 80a118a:	e020      	b.n	80a11ce <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
 80a118c:	290d      	cmp	r1, #13
 80a118e:	d01e      	beq.n	80a11ce <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a1190:	7e02      	ldrb	r2, [r0, #24]
 80a1192:	9202      	str	r2, [sp, #8]
 80a1194:	8ac2      	ldrh	r2, [r0, #22]
 80a1196:	9201      	str	r2, [sp, #4]
 80a1198:	8a82      	ldrh	r2, [r0, #20]
 80a119a:	9200      	str	r2, [sp, #0]
 80a119c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a11a0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a11a4:	f7ff ff62 	bl	80a106c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a11a8:	7e21      	ldrb	r1, [r4, #24]
 80a11aa:	8a23      	ldrh	r3, [r4, #16]
 80a11ac:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a11b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a11b4:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
 80a11b6:	b21b      	sxth	r3, r3
 80a11b8:	460a      	mov	r2, r1
 80a11ba:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a11bc:	b138      	cbz	r0, 80a11ce <_ZN12Adafruit_GFX5writeEh+0x5e>
 80a11be:	f06f 0505 	mvn.w	r5, #5
 80a11c2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a11c6:	fb05 0101 	mla	r1, r5, r1, r0
 80a11ca:	428b      	cmp	r3, r1
 80a11cc:	dcd7      	bgt.n	80a117e <_ZN12Adafruit_GFX5writeEh+0xe>
}
 80a11ce:	2001      	movs	r0, #1
 80a11d0:	b005      	add	sp, #20
 80a11d2:	bd30      	pop	{r4, r5, pc}

080a11d4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
 80a11d4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a11d6:	8242      	strh	r2, [r0, #18]
}
 80a11d8:	4770      	bx	lr

080a11da <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
 80a11da:	2901      	cmp	r1, #1
 80a11dc:	bf38      	it	cc
 80a11de:	2101      	movcc	r1, #1
 80a11e0:	7601      	strb	r1, [r0, #24]
}
 80a11e2:	4770      	bx	lr

080a11e4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
 80a11e4:	82c1      	strh	r1, [r0, #22]
 80a11e6:	8281      	strh	r1, [r0, #20]
}
 80a11e8:	4770      	bx	lr

080a11ea <_ZN12Adafruit_GFX11getRotationEv>:
}
 80a11ea:	7e40      	ldrb	r0, [r0, #25]
 80a11ec:	4770      	bx	lr

080a11ee <_ZN12Adafruit_GFX5widthEv>:
}
 80a11ee:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a11f2:	4770      	bx	lr

080a11f4 <_ZN12Adafruit_GFX6heightEv>:
}
 80a11f4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a11f8:	4770      	bx	lr
	...

080a11fc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <HAL_Validate_Pin_Function+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	685b      	ldr	r3, [r3, #4]
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601b0 	.word	0x080601b0

080a120c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <HAL_Pin_Mode+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	689b      	ldr	r3, [r3, #8]
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601b0 	.word	0x080601b0

080a121c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <HAL_Get_Pin_Mode+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	68db      	ldr	r3, [r3, #12]
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601b0 	.word	0x080601b0

080a122c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <HAL_GPIO_Write+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	691b      	ldr	r3, [r3, #16]
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601b0 	.word	0x080601b0

080a123c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <hal_adc_read+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601b0 	.word	0x080601b0

080a124c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <HAL_RNG_GetRandomNumber+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	685b      	ldr	r3, [r3, #4]
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	0806019c 	.word	0x0806019c

080a125c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <HAL_Delay_Microseconds+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	68db      	ldr	r3, [r3, #12]
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	0806019c 	.word	0x0806019c

080a126c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	695b      	ldr	r3, [r3, #20]
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	0806019c 	.word	0x0806019c

080a127c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <os_mutex_recursive_create+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601d0 	.word	0x080601d0

080a128c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <os_mutex_recursive_destroy+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601d0 	.word	0x080601d0

080a129c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <os_mutex_recursive_lock+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601d0 	.word	0x080601d0

080a12ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <os_mutex_recursive_unlock+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601d0 	.word	0x080601d0

080a12bc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <hal_usart_init+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	699b      	ldr	r3, [r3, #24]
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601c4 	.word	0x080601c4

080a12cc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <hal_usart_write+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601c4 	.word	0x080601c4

080a12dc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <hal_usart_available+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601c4 	.word	0x080601c4

080a12ec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <hal_usart_read+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601c4 	.word	0x080601c4

080a12fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b02      	ldr	r3, [pc, #8]	; (80a1308 <hal_usart_peek+0xc>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1304:	9301      	str	r3, [sp, #4]
 80a1306:	bd08      	pop	{r3, pc}
 80a1308:	080601c4 	.word	0x080601c4

080a130c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a130c:	b508      	push	{r3, lr}
 80a130e:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <hal_usart_flush+0xc>)
 80a1310:	681b      	ldr	r3, [r3, #0]
 80a1312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1314:	9301      	str	r3, [sp, #4]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	080601c4 	.word	0x080601c4

080a131c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a131c:	b508      	push	{r3, lr}
 80a131e:	4b02      	ldr	r3, [pc, #8]	; (80a1328 <hal_usart_is_enabled+0xc>)
 80a1320:	681b      	ldr	r3, [r3, #0]
 80a1322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1324:	9301      	str	r3, [sp, #4]
 80a1326:	bd08      	pop	{r3, pc}
 80a1328:	080601c4 	.word	0x080601c4

080a132c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <hal_usart_available_data_for_write+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601c4 	.word	0x080601c4

080a133c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a133c:	b508      	push	{r3, lr}
 80a133e:	4b02      	ldr	r3, [pc, #8]	; (80a1348 <hal_i2c_begin+0xc>)
 80a1340:	681b      	ldr	r3, [r3, #0]
 80a1342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1344:	9301      	str	r3, [sp, #4]
 80a1346:	bd08      	pop	{r3, pc}
 80a1348:	080601ac 	.word	0x080601ac

080a134c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a134c:	b508      	push	{r3, lr}
 80a134e:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <hal_i2c_begin_transmission+0xc>)
 80a1350:	681b      	ldr	r3, [r3, #0]
 80a1352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1354:	9301      	str	r3, [sp, #4]
 80a1356:	bd08      	pop	{r3, pc}
 80a1358:	080601ac 	.word	0x080601ac

080a135c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a135c:	b508      	push	{r3, lr}
 80a135e:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <hal_i2c_end_transmission+0xc>)
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1364:	9301      	str	r3, [sp, #4]
 80a1366:	bd08      	pop	{r3, pc}
 80a1368:	080601ac 	.word	0x080601ac

080a136c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a136c:	b508      	push	{r3, lr}
 80a136e:	4b02      	ldr	r3, [pc, #8]	; (80a1378 <hal_i2c_write+0xc>)
 80a1370:	681b      	ldr	r3, [r3, #0]
 80a1372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1374:	9301      	str	r3, [sp, #4]
 80a1376:	bd08      	pop	{r3, pc}
 80a1378:	080601ac 	.word	0x080601ac

080a137c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a137c:	b508      	push	{r3, lr}
 80a137e:	4b02      	ldr	r3, [pc, #8]	; (80a1388 <hal_i2c_available+0xc>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1384:	9301      	str	r3, [sp, #4]
 80a1386:	bd08      	pop	{r3, pc}
 80a1388:	080601ac 	.word	0x080601ac

080a138c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a138c:	b508      	push	{r3, lr}
 80a138e:	4b02      	ldr	r3, [pc, #8]	; (80a1398 <hal_i2c_read+0xc>)
 80a1390:	681b      	ldr	r3, [r3, #0]
 80a1392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1394:	9301      	str	r3, [sp, #4]
 80a1396:	bd08      	pop	{r3, pc}
 80a1398:	080601ac 	.word	0x080601ac

080a139c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a139c:	b508      	push	{r3, lr}
 80a139e:	4b02      	ldr	r3, [pc, #8]	; (80a13a8 <hal_i2c_peek+0xc>)
 80a13a0:	681b      	ldr	r3, [r3, #0]
 80a13a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a13a4:	9301      	str	r3, [sp, #4]
 80a13a6:	bd08      	pop	{r3, pc}
 80a13a8:	080601ac 	.word	0x080601ac

080a13ac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a13ac:	b508      	push	{r3, lr}
 80a13ae:	4b02      	ldr	r3, [pc, #8]	; (80a13b8 <hal_i2c_flush+0xc>)
 80a13b0:	681b      	ldr	r3, [r3, #0]
 80a13b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a13b4:	9301      	str	r3, [sp, #4]
 80a13b6:	bd08      	pop	{r3, pc}
 80a13b8:	080601ac 	.word	0x080601ac

080a13bc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a13bc:	b508      	push	{r3, lr}
 80a13be:	4b02      	ldr	r3, [pc, #8]	; (80a13c8 <hal_i2c_is_enabled+0xc>)
 80a13c0:	681b      	ldr	r3, [r3, #0]
 80a13c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a13c4:	9301      	str	r3, [sp, #4]
 80a13c6:	bd08      	pop	{r3, pc}
 80a13c8:	080601ac 	.word	0x080601ac

080a13cc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a13cc:	b508      	push	{r3, lr}
 80a13ce:	4b03      	ldr	r3, [pc, #12]	; (80a13dc <hal_i2c_init+0x10>)
 80a13d0:	681b      	ldr	r3, [r3, #0]
 80a13d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a13d6:	9301      	str	r3, [sp, #4]
 80a13d8:	bd08      	pop	{r3, pc}
 80a13da:	0000      	.short	0x0000
 80a13dc:	080601ac 	.word	0x080601ac

080a13e0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <hal_spi_begin+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	681b      	ldr	r3, [r3, #0]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601b4 	.word	0x080601b4

080a13f0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <hal_spi_set_bit_order+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	689b      	ldr	r3, [r3, #8]
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601b4 	.word	0x080601b4

080a1400 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <hal_spi_set_data_mode+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	68db      	ldr	r3, [r3, #12]
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601b4 	.word	0x080601b4

080a1410 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <hal_spi_set_clock_divider+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	691b      	ldr	r3, [r3, #16]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601b4 	.word	0x080601b4

080a1420 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <hal_spi_transfer+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	695b      	ldr	r3, [r3, #20]
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601b4 	.word	0x080601b4

080a1430 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <hal_spi_init+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	69db      	ldr	r3, [r3, #28]
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601b4 	.word	0x080601b4

080a1440 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <hal_spi_is_enabled+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	6a1b      	ldr	r3, [r3, #32]
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601b4 	.word	0x080601b4

080a1450 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <hal_spi_info+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601b4 	.word	0x080601b4

080a1460 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <HAL_USB_USART_Init+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	681b      	ldr	r3, [r3, #0]
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601d8 	.word	0x080601d8

080a1470 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <HAL_USB_USART_Begin+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	685b      	ldr	r3, [r3, #4]
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601d8 	.word	0x080601d8

080a1480 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <HAL_USB_USART_Available_Data+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	691b      	ldr	r3, [r3, #16]
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601d8 	.word	0x080601d8

080a1490 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	695b      	ldr	r3, [r3, #20]
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601d8 	.word	0x080601d8

080a14a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <HAL_USB_USART_Receive_Data+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	699b      	ldr	r3, [r3, #24]
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601d8 	.word	0x080601d8

080a14b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14b0:	b508      	push	{r3, lr}
 80a14b2:	4b02      	ldr	r3, [pc, #8]	; (80a14bc <HAL_USB_USART_Send_Data+0xc>)
 80a14b4:	681b      	ldr	r3, [r3, #0]
 80a14b6:	69db      	ldr	r3, [r3, #28]
 80a14b8:	9301      	str	r3, [sp, #4]
 80a14ba:	bd08      	pop	{r3, pc}
 80a14bc:	080601d8 	.word	0x080601d8

080a14c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <HAL_USB_USART_Flush_Data+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	6a1b      	ldr	r3, [r3, #32]
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601d8 	.word	0x080601d8

080a14d0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <inet_gethostbyname+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601c0 	.word	0x080601c0

080a14e0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <LED_SetSignalingColor+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	685b      	ldr	r3, [r3, #4]
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080201a8 	.word	0x080201a8

080a14f0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <LED_Signaling_Start+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	689b      	ldr	r3, [r3, #8]
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080201a8 	.word	0x080201a8

080a1500 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <LED_Signaling_Stop+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	68db      	ldr	r3, [r3, #12]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080201a8 	.word	0x080201a8

080a1510 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <LED_RGB_IsOverRidden+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	699b      	ldr	r3, [r3, #24]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080201a8 	.word	0x080201a8

080a1520 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <LED_On+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	69db      	ldr	r3, [r3, #28]
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080201a8 	.word	0x080201a8

080a1530 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <panic_+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080201a8 	.word	0x080201a8

080a1540 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <set_system_mode+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	685b      	ldr	r3, [r3, #4]
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601a4 	.word	0x080601a4

080a1550 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <system_delay_ms+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	695b      	ldr	r3, [r3, #20]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601a4 	.word	0x080601a4

080a1560 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <system_thread_set_state+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601a4 	.word	0x080601a4

080a1570 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b03      	ldr	r3, [pc, #12]	; (80a1580 <system_ctrl_set_app_request_handler+0x10>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a157a:	9301      	str	r3, [sp, #4]
 80a157c:	bd08      	pop	{r3, pc}
 80a157e:	0000      	.short	0x0000
 80a1580:	080601a4 	.word	0x080601a4

080a1584 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b03      	ldr	r3, [pc, #12]	; (80a1594 <system_ctrl_set_result+0x10>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a158e:	9301      	str	r3, [sp, #4]
 80a1590:	bd08      	pop	{r3, pc}
 80a1592:	0000      	.short	0x0000
 80a1594:	080601a4 	.word	0x080601a4

080a1598 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <network_connect+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	685b      	ldr	r3, [r3, #4]
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601c8 	.word	0x080601c8

080a15a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <network_connecting+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	689b      	ldr	r3, [r3, #8]
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601c8 	.word	0x080601c8

080a15b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <network_disconnect+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	68db      	ldr	r3, [r3, #12]
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601c8 	.word	0x080601c8

080a15c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <network_ready+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	691b      	ldr	r3, [r3, #16]
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601c8 	.word	0x080601c8

080a15d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <network_on+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	695b      	ldr	r3, [r3, #20]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601c8 	.word	0x080601c8

080a15e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <network_off+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	699b      	ldr	r3, [r3, #24]
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601c8 	.word	0x080601c8

080a15f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <network_listen+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	69db      	ldr	r3, [r3, #28]
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601c8 	.word	0x080601c8

080a1608 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <network_listening+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6a1b      	ldr	r3, [r3, #32]
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601c8 	.word	0x080601c8

080a1618 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <network_set_listen_timeout+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601c8 	.word	0x080601c8

080a1628 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <network_get_listen_timeout+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601c8 	.word	0x080601c8

080a1638 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <network_is_on+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601c8 	.word	0x080601c8

080a1648 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b02      	ldr	r3, [pc, #8]	; (80a1654 <network_is_off+0xc>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1650:	9301      	str	r3, [sp, #4]
 80a1652:	bd08      	pop	{r3, pc}
 80a1654:	080601c8 	.word	0x080601c8

080a1658 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1658:	b508      	push	{r3, lr}
 80a165a:	4b02      	ldr	r3, [pc, #8]	; (80a1664 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a165c:	681b      	ldr	r3, [r3, #0]
 80a165e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1660:	9301      	str	r3, [sp, #4]
 80a1662:	bd08      	pop	{r3, pc}
 80a1664:	080601cc 	.word	0x080601cc

080a1668 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1668:	b508      	push	{r3, lr}
 80a166a:	4b02      	ldr	r3, [pc, #8]	; (80a1674 <malloc+0xc>)
 80a166c:	681b      	ldr	r3, [r3, #0]
 80a166e:	681b      	ldr	r3, [r3, #0]
 80a1670:	9301      	str	r3, [sp, #4]
 80a1672:	bd08      	pop	{r3, pc}
 80a1674:	080601a0 	.word	0x080601a0

080a1678 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <free+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	685b      	ldr	r3, [r3, #4]
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601a0 	.word	0x080601a0

080a1688 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <newlib_impure_ptr_callback+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601a0 	.word	0x080601a0

080a1698 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1698:	6880      	ldr	r0, [r0, #8]
 80a169a:	f7ff be07 	b.w	80a12ac <os_mutex_recursive_unlock>

080a169e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a169e:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a16a0:	2600      	movs	r6, #0
 80a16a2:	4604      	mov	r4, r0
 80a16a4:	460d      	mov	r5, r1
 80a16a6:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a16aa:	f7ff fde7 	bl	80a127c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a16ae:	4628      	mov	r0, r5
    _spi = spi;
 80a16b0:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a16b2:	f7ff febd 	bl	80a1430 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a16b6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a16b8:	6066      	str	r6, [r4, #4]
}
 80a16ba:	bd70      	pop	{r4, r5, r6, pc}

080a16bc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a16bc:	b510      	push	{r4, lr}
 80a16be:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a16c0:	6880      	ldr	r0, [r0, #8]
 80a16c2:	f7ff fdeb 	bl	80a129c <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a16c6:	7820      	ldrb	r0, [r4, #0]
 80a16c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a16cc:	f7ff fe88 	bl	80a13e0 <hal_spi_begin>
        unlock();
 80a16d0:	4620      	mov	r0, r4
 80a16d2:	f7ff ffe1 	bl	80a1698 <_ZN8SPIClass6unlockEv>
    }
}
 80a16d6:	bd10      	pop	{r4, pc}

080a16d8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a16d8:	b538      	push	{r3, r4, r5, lr}
 80a16da:	4604      	mov	r4, r0
 80a16dc:	460d      	mov	r5, r1
 80a16de:	6880      	ldr	r0, [r0, #8]
 80a16e0:	f7ff fddc 	bl	80a129c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 80a16e4:	7820      	ldrb	r0, [r4, #0]
 80a16e6:	4629      	mov	r1, r5
 80a16e8:	f7ff fe82 	bl	80a13f0 <hal_spi_set_bit_order>
        unlock();
 80a16ec:	4620      	mov	r0, r4
 80a16ee:	f7ff ffd3 	bl	80a1698 <_ZN8SPIClass6unlockEv>
    }
}
 80a16f2:	bd38      	pop	{r3, r4, r5, pc}

080a16f4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 80a16f4:	b538      	push	{r3, r4, r5, lr}
 80a16f6:	4604      	mov	r4, r0
 80a16f8:	460d      	mov	r5, r1
 80a16fa:	6880      	ldr	r0, [r0, #8]
 80a16fc:	f7ff fdce 	bl	80a129c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 80a1700:	7820      	ldrb	r0, [r4, #0]
 80a1702:	4629      	mov	r1, r5
 80a1704:	f7ff fe7c 	bl	80a1400 <hal_spi_set_data_mode>
        unlock();
 80a1708:	4620      	mov	r0, r4
 80a170a:	f7ff ffc5 	bl	80a1698 <_ZN8SPIClass6unlockEv>
    }
}
 80a170e:	bd38      	pop	{r3, r4, r5, pc}

080a1710 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a1710:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a1712:	2400      	movs	r4, #0
 80a1714:	0840      	lsrs	r0, r0, #1
 80a1716:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1718:	6818      	ldr	r0, [r3, #0]
 80a171a:	b2e5      	uxtb	r5, r4
 80a171c:	4288      	cmp	r0, r1
 80a171e:	d906      	bls.n	80a172e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1720:	3401      	adds	r4, #1
 80a1722:	2c08      	cmp	r4, #8
 80a1724:	d002      	beq.n	80a172c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a1726:	0840      	lsrs	r0, r0, #1
 80a1728:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a172a:	e7f5      	b.n	80a1718 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a172c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1730:	5d5b      	ldrb	r3, [r3, r5]
 80a1732:	7013      	strb	r3, [r2, #0]
}
 80a1734:	bd30      	pop	{r4, r5, pc}
 80a1736:	bf00      	nop
 80a1738:	080a398c 	.word	0x080a398c

080a173c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a173c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 80a173e:	2500      	movs	r5, #0
{
 80a1740:	4604      	mov	r4, r0
 80a1742:	b089      	sub	sp, #36	; 0x24
 80a1744:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a1746:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 80a174a:	9502      	str	r5, [sp, #8]
 80a174c:	f7ff fda6 	bl	80a129c <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1750:	4629      	mov	r1, r5
 80a1752:	2214      	movs	r2, #20
 80a1754:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a1756:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1758:	f001 fd9a 	bl	80a3290 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a175c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a175e:	462a      	mov	r2, r5
 80a1760:	4638      	mov	r0, r7
 80a1762:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1764:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 80a1768:	f7ff fe72 	bl	80a1450 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a176c:	ab02      	add	r3, sp, #8
 80a176e:	f10d 0207 	add.w	r2, sp, #7
 80a1772:	4631      	mov	r1, r6
 80a1774:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 80a1776:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a177a:	f7ff ffc9 	bl	80a1710 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 80a177e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1782:	7820      	ldrb	r0, [r4, #0]
 80a1784:	f7ff fe44 	bl	80a1410 <hal_spi_set_clock_divider>
        unlock();
 80a1788:	4620      	mov	r0, r4
 80a178a:	f7ff ff85 	bl	80a1698 <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 80a178e:	9802      	ldr	r0, [sp, #8]
 80a1790:	b009      	add	sp, #36	; 0x24
 80a1792:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1794 <_ZN8SPIClass15setClockDividerEh>:
{
 80a1794:	b538      	push	{r3, r4, r5, lr}
 80a1796:	4604      	mov	r4, r0
 80a1798:	6880      	ldr	r0, [r0, #8]
 80a179a:	460d      	mov	r5, r1
 80a179c:	f7ff fd7e 	bl	80a129c <os_mutex_recursive_lock>
        if (_dividerReference)
 80a17a0:	6861      	ldr	r1, [r4, #4]
 80a17a2:	b199      	cbz	r1, 80a17cc <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 80a17a4:	2300      	movs	r3, #0
 80a17a6:	4a0c      	ldr	r2, [pc, #48]	; (80a17d8 <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 80a17a8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80a17ac:	4285      	cmp	r5, r0
 80a17ae:	d002      	beq.n	80a17b6 <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 80a17b0:	3301      	adds	r3, #1
 80a17b2:	2b08      	cmp	r3, #8
 80a17b4:	d1f8      	bne.n	80a17a8 <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 80a17b6:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 80a17b8:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 80a17ba:	2201      	movs	r2, #1
 80a17bc:	4620      	mov	r0, r4
 80a17be:	40d9      	lsrs	r1, r3
 80a17c0:	f7ff ffbc 	bl	80a173c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 80a17c4:	4620      	mov	r0, r4
 80a17c6:	f7ff ff67 	bl	80a1698 <_ZN8SPIClass6unlockEv>
}
 80a17ca:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 80a17cc:	4629      	mov	r1, r5
 80a17ce:	7820      	ldrb	r0, [r4, #0]
 80a17d0:	f7ff fe1e 	bl	80a1410 <hal_spi_set_clock_divider>
 80a17d4:	e7f6      	b.n	80a17c4 <_ZN8SPIClass15setClockDividerEh+0x30>
 80a17d6:	bf00      	nop
 80a17d8:	080a398c 	.word	0x080a398c

080a17dc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a17dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a17de:	7800      	ldrb	r0, [r0, #0]
 80a17e0:	f7ff fe1e 	bl	80a1420 <hal_spi_transfer>
}
 80a17e4:	b2c0      	uxtb	r0, r0
 80a17e6:	bd08      	pop	{r3, pc}

080a17e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a17e8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a17ea:	2000      	movs	r0, #0
 80a17ec:	4b04      	ldr	r3, [pc, #16]	; (80a1800 <_GLOBAL__sub_I_System+0x18>)
 80a17ee:	601a      	str	r2, [r3, #0]
 80a17f0:	4b04      	ldr	r3, [pc, #16]	; (80a1804 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a17f2:	4a05      	ldr	r2, [pc, #20]	; (80a1808 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a17f4:	6018      	str	r0, [r3, #0]
 80a17f6:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a17f8:	7198      	strb	r0, [r3, #6]
 80a17fa:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a17fc:	f7ff bea0 	b.w	80a1540 <set_system_mode>
 80a1800:	2000050c 	.word	0x2000050c
 80a1804:	20000500 	.word	0x20000500
 80a1808:	ffff0000 	.word	0xffff0000

080a180c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a180e:	4606      	mov	r6, r0
 80a1810:	460d      	mov	r5, r1
  size_t n = 0;
 80a1812:	2400      	movs	r4, #0
 80a1814:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1816:	42bd      	cmp	r5, r7
 80a1818:	d00c      	beq.n	80a1834 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a181a:	6833      	ldr	r3, [r6, #0]
 80a181c:	4630      	mov	r0, r6
 80a181e:	689b      	ldr	r3, [r3, #8]
 80a1820:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1824:	4798      	blx	r3
     if (chunk>=0)
 80a1826:	1e03      	subs	r3, r0, #0
 80a1828:	db01      	blt.n	80a182e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a182a:	441c      	add	r4, r3
  while (size--) {
 80a182c:	e7f3      	b.n	80a1816 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a182e:	2c00      	cmp	r4, #0
 80a1830:	bf08      	it	eq
 80a1832:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1834:	4620      	mov	r0, r4
 80a1836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1838 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1838:	b570      	push	{r4, r5, r6, lr}
 80a183a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a183c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a183e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1840:	b149      	cbz	r1, 80a1856 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1842:	f001 fd51 	bl	80a32e8 <strlen>
 80a1846:	682b      	ldr	r3, [r5, #0]
 80a1848:	4602      	mov	r2, r0
 80a184a:	4621      	mov	r1, r4
 80a184c:	4628      	mov	r0, r5
    }
 80a184e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1852:	68db      	ldr	r3, [r3, #12]
 80a1854:	4718      	bx	r3
    }
 80a1856:	bd70      	pop	{r4, r5, r6, pc}

080a1858 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1858:	b508      	push	{r3, lr}
  return write(str);
 80a185a:	f7ff ffed 	bl	80a1838 <_ZN5Print5writeEPKc>
}
 80a185e:	bd08      	pop	{r3, pc}

080a1860 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1860:	6803      	ldr	r3, [r0, #0]
 80a1862:	689b      	ldr	r3, [r3, #8]
 80a1864:	4718      	bx	r3

080a1866 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1866:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1868:	2a01      	cmp	r2, #1
 80a186a:	bf98      	it	ls
 80a186c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a186e:	b530      	push	{r4, r5, lr}
 80a1870:	b08b      	sub	sp, #44	; 0x2c
 80a1872:	460c      	mov	r4, r1
  *str = '\0';
 80a1874:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1878:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a187a:	4625      	mov	r5, r4
 80a187c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1880:	fb04 5312 	mls	r3, r4, r2, r5
 80a1884:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1886:	2b09      	cmp	r3, #9
 80a1888:	bf94      	ite	ls
 80a188a:	3330      	addls	r3, #48	; 0x30
 80a188c:	3337      	addhi	r3, #55	; 0x37
 80a188e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1890:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1892:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1896:	d9f0      	bls.n	80a187a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1898:	f7ff ffce 	bl	80a1838 <_ZN5Print5writeEPKc>
}
 80a189c:	b00b      	add	sp, #44	; 0x2c
 80a189e:	bd30      	pop	{r4, r5, pc}

080a18a0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a18a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a18a4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a18a6:	4619      	mov	r1, r3
 80a18a8:	4610      	mov	r0, r2
{
 80a18aa:	4692      	mov	sl, r2
 80a18ac:	461f      	mov	r7, r3
 80a18ae:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a18b2:	f001 f9cd 	bl	80a2c50 <__aeabi_dcmpun>
 80a18b6:	b140      	cbz	r0, 80a18ca <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a18b8:	4950      	ldr	r1, [pc, #320]	; (80a19fc <_ZN5Print10printFloatEdh+0x15c>)
 80a18ba:	4628      	mov	r0, r5
 80a18bc:	f7ff ffbc 	bl	80a1838 <_ZN5Print5writeEPKc>
 80a18c0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a18c2:	4620      	mov	r0, r4
 80a18c4:	b003      	add	sp, #12
 80a18c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a18ca:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a18ce:	f04f 32ff 	mov.w	r2, #4294967295
 80a18d2:	4650      	mov	r0, sl
 80a18d4:	4621      	mov	r1, r4
 80a18d6:	4b4a      	ldr	r3, [pc, #296]	; (80a1a00 <_ZN5Print10printFloatEdh+0x160>)
 80a18d8:	f001 f9ba 	bl	80a2c50 <__aeabi_dcmpun>
 80a18dc:	b948      	cbnz	r0, 80a18f2 <_ZN5Print10printFloatEdh+0x52>
 80a18de:	f04f 32ff 	mov.w	r2, #4294967295
 80a18e2:	4650      	mov	r0, sl
 80a18e4:	4621      	mov	r1, r4
 80a18e6:	4b46      	ldr	r3, [pc, #280]	; (80a1a00 <_ZN5Print10printFloatEdh+0x160>)
 80a18e8:	f001 f994 	bl	80a2c14 <__aeabi_dcmple>
 80a18ec:	b908      	cbnz	r0, 80a18f2 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a18ee:	4945      	ldr	r1, [pc, #276]	; (80a1a04 <_ZN5Print10printFloatEdh+0x164>)
 80a18f0:	e7e3      	b.n	80a18ba <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a18f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a18f6:	4650      	mov	r0, sl
 80a18f8:	4639      	mov	r1, r7
 80a18fa:	4b43      	ldr	r3, [pc, #268]	; (80a1a08 <_ZN5Print10printFloatEdh+0x168>)
 80a18fc:	f001 f99e 	bl	80a2c3c <__aeabi_dcmpgt>
 80a1900:	b108      	cbz	r0, 80a1906 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a1902:	4942      	ldr	r1, [pc, #264]	; (80a1a0c <_ZN5Print10printFloatEdh+0x16c>)
 80a1904:	e7d9      	b.n	80a18ba <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1906:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a190a:	4650      	mov	r0, sl
 80a190c:	4639      	mov	r1, r7
 80a190e:	4b40      	ldr	r3, [pc, #256]	; (80a1a10 <_ZN5Print10printFloatEdh+0x170>)
 80a1910:	f001 f976 	bl	80a2c00 <__aeabi_dcmplt>
 80a1914:	2800      	cmp	r0, #0
 80a1916:	d1f4      	bne.n	80a1902 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a1918:	2200      	movs	r2, #0
 80a191a:	2300      	movs	r3, #0
 80a191c:	4650      	mov	r0, sl
 80a191e:	4639      	mov	r1, r7
 80a1920:	f001 f96e 	bl	80a2c00 <__aeabi_dcmplt>
 80a1924:	4604      	mov	r4, r0
 80a1926:	b130      	cbz	r0, 80a1936 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a1928:	212d      	movs	r1, #45	; 0x2d
 80a192a:	4628      	mov	r0, r5
 80a192c:	f7ff ff98 	bl	80a1860 <_ZN5Print5printEc>
 80a1930:	4604      	mov	r4, r0
     number = -number;
 80a1932:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a1936:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a193a:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a193c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a1940:	4934      	ldr	r1, [pc, #208]	; (80a1a14 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a1942:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a1a1c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a1946:	fa5f f38b 	uxtb.w	r3, fp
 80a194a:	429e      	cmp	r6, r3
 80a194c:	d906      	bls.n	80a195c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a194e:	4642      	mov	r2, r8
 80a1950:	464b      	mov	r3, r9
 80a1952:	f001 f80d 	bl	80a2970 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a1956:	f10b 0b01 	add.w	fp, fp, #1
 80a195a:	e7f4      	b.n	80a1946 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a195c:	463b      	mov	r3, r7
 80a195e:	4652      	mov	r2, sl
 80a1960:	f000 fd26 	bl	80a23b0 <__adddf3>
 80a1964:	4689      	mov	r9, r1
 80a1966:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a1968:	f001 f9b0 	bl	80a2ccc <__aeabi_d2uiz>
 80a196c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a196e:	f000 fe5b 	bl	80a2628 <__aeabi_ui2d>
 80a1972:	4602      	mov	r2, r0
 80a1974:	460b      	mov	r3, r1
 80a1976:	4640      	mov	r0, r8
 80a1978:	4649      	mov	r1, r9
 80a197a:	f000 fd17 	bl	80a23ac <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a197e:	220a      	movs	r2, #10
 80a1980:	4680      	mov	r8, r0
 80a1982:	4689      	mov	r9, r1
 80a1984:	4628      	mov	r0, r5
 80a1986:	4639      	mov	r1, r7
 80a1988:	f7ff ff6d 	bl	80a1866 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a198c:	4404      	add	r4, r0
  if (digits > 0) {
 80a198e:	b126      	cbz	r6, 80a199a <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a1990:	4628      	mov	r0, r5
 80a1992:	4921      	ldr	r1, [pc, #132]	; (80a1a18 <_ZN5Print10printFloatEdh+0x178>)
 80a1994:	f7ff ff50 	bl	80a1838 <_ZN5Print5writeEPKc>
    n += print(".");
 80a1998:	4404      	add	r4, r0
    remainder *= 10.0;
 80a199a:	f04f 0a00 	mov.w	sl, #0
 80a199e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a1a1c <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a19a2:	3e01      	subs	r6, #1
 80a19a4:	b2f6      	uxtb	r6, r6
 80a19a6:	2eff      	cmp	r6, #255	; 0xff
 80a19a8:	d08b      	beq.n	80a18c2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a19aa:	4652      	mov	r2, sl
 80a19ac:	465b      	mov	r3, fp
 80a19ae:	4640      	mov	r0, r8
 80a19b0:	4649      	mov	r1, r9
 80a19b2:	f000 feb3 	bl	80a271c <__aeabi_dmul>
 80a19b6:	4680      	mov	r8, r0
 80a19b8:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a19ba:	f001 f95f 	bl	80a2c7c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a19be:	1e07      	subs	r7, r0, #0
 80a19c0:	da19      	bge.n	80a19f6 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a19c2:	212d      	movs	r1, #45	; 0x2d
 80a19c4:	4628      	mov	r0, r5
 80a19c6:	f7ff ff4b 	bl	80a1860 <_ZN5Print5printEc>
 80a19ca:	4603      	mov	r3, r0
            val = -n;
 80a19cc:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a19ce:	220a      	movs	r2, #10
 80a19d0:	4628      	mov	r0, r5
 80a19d2:	9301      	str	r3, [sp, #4]
 80a19d4:	f7ff ff47 	bl	80a1866 <_ZN5Print11printNumberEmh>
 80a19d8:	9b01      	ldr	r3, [sp, #4]
 80a19da:	4403      	add	r3, r0
    remainder -= toPrint;
 80a19dc:	4638      	mov	r0, r7
    n += print(toPrint);
 80a19de:	441c      	add	r4, r3
    remainder -= toPrint;
 80a19e0:	f000 fe32 	bl	80a2648 <__aeabi_i2d>
 80a19e4:	4602      	mov	r2, r0
 80a19e6:	460b      	mov	r3, r1
 80a19e8:	4640      	mov	r0, r8
 80a19ea:	4649      	mov	r1, r9
 80a19ec:	f000 fcde 	bl	80a23ac <__aeabi_dsub>
 80a19f0:	4680      	mov	r8, r0
 80a19f2:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a19f4:	e7d5      	b.n	80a19a2 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a19f6:	4639      	mov	r1, r7
        size_t t = 0;
 80a19f8:	2300      	movs	r3, #0
 80a19fa:	e7e8      	b.n	80a19ce <_ZN5Print10printFloatEdh+0x12e>
 80a19fc:	080a3994 	.word	0x080a3994
 80a1a00:	7fefffff 	.word	0x7fefffff
 80a1a04:	080a3998 	.word	0x080a3998
 80a1a08:	41efffff 	.word	0x41efffff
 80a1a0c:	080a399c 	.word	0x080a399c
 80a1a10:	c1efffff 	.word	0xc1efffff
 80a1a14:	3fe00000 	.word	0x3fe00000
 80a1a18:	080a39a0 	.word	0x080a39a0
 80a1a1c:	40240000 	.word	0x40240000

080a1a20 <_ZN5Print5printEfi>:
{
 80a1a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1a22:	4605      	mov	r5, r0
 80a1a24:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a1a26:	4608      	mov	r0, r1
 80a1a28:	f000 fe20 	bl	80a266c <__aeabi_f2d>
 80a1a2c:	b2e4      	uxtb	r4, r4
 80a1a2e:	4602      	mov	r2, r0
 80a1a30:	460b      	mov	r3, r1
 80a1a32:	4628      	mov	r0, r5
 80a1a34:	9400      	str	r4, [sp, #0]
 80a1a36:	f7ff ff33 	bl	80a18a0 <_ZN5Print10printFloatEdh>
}
 80a1a3a:	b003      	add	sp, #12
 80a1a3c:	bd30      	pop	{r4, r5, pc}

080a1a3e <_ZN5Print5printEdi>:
  return printFloat(n, digits);
 80a1a3e:	f89d 1000 	ldrb.w	r1, [sp]
 80a1a42:	9100      	str	r1, [sp, #0]
 80a1a44:	f7ff bf2c 	b.w	80a18a0 <_ZN5Print10printFloatEdh>

080a1a48 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1a48:	2300      	movs	r3, #0
 80a1a4a:	6840      	ldr	r0, [r0, #4]
 80a1a4c:	461a      	mov	r2, r3
 80a1a4e:	4619      	mov	r1, r3
 80a1a50:	f7ff bdc2 	b.w	80a15d8 <network_on>

080a1a54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1a54:	4b01      	ldr	r3, [pc, #4]	; (80a1a5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1a56:	4a02      	ldr	r2, [pc, #8]	; (80a1a60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1a58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1a5a:	4770      	bx	lr
 80a1a5c:	20000510 	.word	0x20000510
 80a1a60:	080a39a2 	.word	0x080a39a2

080a1a64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1a64:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1a66:	681a      	ldr	r2, [r3, #0]
 80a1a68:	4b02      	ldr	r3, [pc, #8]	; (80a1a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1a6a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1a6c:	4770      	bx	lr
 80a1a6e:	bf00      	nop
 80a1a70:	20000418 	.word	0x20000418
 80a1a74:	20000514 	.word	0x20000514

080a1a78 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1a78:	2100      	movs	r1, #0
 80a1a7a:	f7ff bd69 	b.w	80a1550 <system_delay_ms>

080a1a7e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a1a7e:	b510      	push	{r4, lr}
 80a1a80:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a1a82:	f7ff fd45 	bl	80a1510 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a1a86:	4284      	cmp	r4, r0
 80a1a88:	d008      	beq.n	80a1a9c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a1a8a:	b11c      	cbz	r4, 80a1a94 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a1a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a1a90:	f7ff bd2e 	b.w	80a14f0 <LED_Signaling_Start>
}
 80a1a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a1a98:	f7ff bd32 	b.w	80a1500 <LED_Signaling_Stop>
}
 80a1a9c:	bd10      	pop	{r4, pc}

080a1a9e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a1a9e:	b570      	push	{r4, r5, r6, lr}
 80a1aa0:	4605      	mov	r5, r0
 80a1aa2:	460e      	mov	r6, r1
 80a1aa4:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a1aa6:	f7ff fd33 	bl	80a1510 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a1aaa:	b150      	cbz	r0, 80a1ac2 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a1aac:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a1ab0:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a1ab4:	f7ff fd14 	bl	80a14e0 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a1ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
 80a1abc:	20e7      	movs	r0, #231	; 0xe7
 80a1abe:	f7ff bd2f 	b.w	80a1520 <LED_On>
}
 80a1ac2:	bd70      	pop	{r4, r5, r6, pc}

080a1ac4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ac4:	2200      	movs	r2, #0
 80a1ac6:	4b01      	ldr	r3, [pc, #4]	; (80a1acc <_GLOBAL__sub_I_RGB+0x8>)
 80a1ac8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1aca:	4770      	bx	lr
 80a1acc:	20000518 	.word	0x20000518

080a1ad0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1ad0:	4b01      	ldr	r3, [pc, #4]	; (80a1ad8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1ad2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1ad4:	4770      	bx	lr
 80a1ad6:	bf00      	nop
 80a1ad8:	2000041c 	.word	0x2000041c

080a1adc <serialEventRun>:
{
 80a1adc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1ade:	4b13      	ldr	r3, [pc, #76]	; (80a1b2c <serialEventRun+0x50>)
 80a1ae0:	b143      	cbz	r3, 80a1af4 <serialEventRun+0x18>
 80a1ae2:	f000 f967 	bl	80a1db4 <_Z16_fetch_usbserialv>
 80a1ae6:	6803      	ldr	r3, [r0, #0]
 80a1ae8:	691b      	ldr	r3, [r3, #16]
 80a1aea:	4798      	blx	r3
 80a1aec:	2800      	cmp	r0, #0
 80a1aee:	dd01      	ble.n	80a1af4 <serialEventRun+0x18>
        serialEvent();
 80a1af0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1af4:	4b0e      	ldr	r3, [pc, #56]	; (80a1b30 <serialEventRun+0x54>)
 80a1af6:	b143      	cbz	r3, 80a1b0a <serialEventRun+0x2e>
 80a1af8:	f000 f9fe 	bl	80a1ef8 <_Z22__fetch_global_Serial1v>
 80a1afc:	6803      	ldr	r3, [r0, #0]
 80a1afe:	691b      	ldr	r3, [r3, #16]
 80a1b00:	4798      	blx	r3
 80a1b02:	2800      	cmp	r0, #0
 80a1b04:	dd01      	ble.n	80a1b0a <serialEventRun+0x2e>
        serialEvent1();
 80a1b06:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1b0a:	4b0a      	ldr	r3, [pc, #40]	; (80a1b34 <serialEventRun+0x58>)
 80a1b0c:	b10b      	cbz	r3, 80a1b12 <serialEventRun+0x36>
 80a1b0e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1b12:	4b09      	ldr	r3, [pc, #36]	; (80a1b38 <serialEventRun+0x5c>)
 80a1b14:	b143      	cbz	r3, 80a1b28 <serialEventRun+0x4c>
 80a1b16:	f000 f979 	bl	80a1e0c <_Z17_fetch_usbserial1v>
 80a1b1a:	6803      	ldr	r3, [r0, #0]
 80a1b1c:	691b      	ldr	r3, [r3, #16]
 80a1b1e:	4798      	blx	r3
 80a1b20:	2800      	cmp	r0, #0
 80a1b22:	dd01      	ble.n	80a1b28 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1b24:	f3af 8000 	nop.w
}
 80a1b28:	bd08      	pop	{r3, pc}
 80a1b2a:	bf00      	nop
	...

080a1b3c <_post_loop>:
{
 80a1b3c:	b508      	push	{r3, lr}
	serialEventRun();
 80a1b3e:	f7ff ffcd 	bl	80a1adc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1b42:	f7ff fb93 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1b46:	4b01      	ldr	r3, [pc, #4]	; (80a1b4c <_post_loop+0x10>)
 80a1b48:	6018      	str	r0, [r3, #0]
}
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	20000590 	.word	0x20000590

080a1b50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b50:	4805      	ldr	r0, [pc, #20]	; (80a1b68 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1b52:	4a06      	ldr	r2, [pc, #24]	; (80a1b6c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1b54:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b56:	1a12      	subs	r2, r2, r0
 80a1b58:	4905      	ldr	r1, [pc, #20]	; (80a1b70 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1b5a:	f001 fb8b 	bl	80a3274 <memcpy>
    __backup_sram_signature = signature;
 80a1b5e:	4b05      	ldr	r3, [pc, #20]	; (80a1b74 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1b60:	4a05      	ldr	r2, [pc, #20]	; (80a1b78 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1b62:	601a      	str	r2, [r3, #0]
}
 80a1b64:	bd08      	pop	{r3, pc}
 80a1b66:	bf00      	nop
 80a1b68:	40024000 	.word	0x40024000
 80a1b6c:	40024004 	.word	0x40024004
 80a1b70:	080a3b00 	.word	0x080a3b00
 80a1b74:	40024000 	.word	0x40024000
 80a1b78:	9a271c1e 	.word	0x9a271c1e

080a1b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b7c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1b7e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b80:	461a      	mov	r2, r3
 80a1b82:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b86:	9300      	str	r3, [sp, #0]
 80a1b88:	f7ff fcfc 	bl	80a1584 <system_ctrl_set_result>
}
 80a1b8c:	b003      	add	sp, #12
 80a1b8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1b94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1b94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1b96:	8843      	ldrh	r3, [r0, #2]
 80a1b98:	2b0a      	cmp	r3, #10
 80a1b9a:	d008      	beq.n	80a1bae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1b9c:	2b50      	cmp	r3, #80	; 0x50
 80a1b9e:	d10b      	bne.n	80a1bb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1ba0:	4b09      	ldr	r3, [pc, #36]	; (80a1bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1ba2:	681b      	ldr	r3, [r3, #0]
 80a1ba4:	b14b      	cbz	r3, 80a1bba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1ba6:	b003      	add	sp, #12
 80a1ba8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1bac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1bae:	f7ff ffe5 	bl	80a1b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1bb2:	b003      	add	sp, #12
 80a1bb4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1bb8:	2300      	movs	r3, #0
 80a1bba:	461a      	mov	r2, r3
 80a1bbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1bc0:	9300      	str	r3, [sp, #0]
 80a1bc2:	f7ff fcdf 	bl	80a1584 <system_ctrl_set_result>
}
 80a1bc6:	e7f4      	b.n	80a1bb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1bc8:	2000052c 	.word	0x2000052c

080a1bcc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1bcc:	2100      	movs	r1, #0
{
 80a1bce:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1bd0:	4811      	ldr	r0, [pc, #68]	; (80a1c18 <module_user_init_hook+0x4c>)
 80a1bd2:	f7ff fd59 	bl	80a1688 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a1bd6:	4b11      	ldr	r3, [pc, #68]	; (80a1c1c <module_user_init_hook+0x50>)
 80a1bd8:	681a      	ldr	r2, [r3, #0]
 80a1bda:	4b11      	ldr	r3, [pc, #68]	; (80a1c20 <module_user_init_hook+0x54>)
 80a1bdc:	429a      	cmp	r2, r3
 80a1bde:	bf0c      	ite	eq
 80a1be0:	2201      	moveq	r2, #1
 80a1be2:	2200      	movne	r2, #0
 80a1be4:	4b0f      	ldr	r3, [pc, #60]	; (80a1c24 <module_user_init_hook+0x58>)
 80a1be6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1be8:	d001      	beq.n	80a1bee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1bea:	f7ff ffb1 	bl	80a1b50 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1bee:	f7ff fb2d 	bl	80a124c <HAL_RNG_GetRandomNumber>
 80a1bf2:	4604      	mov	r4, r0
    srand(seed);
 80a1bf4:	f001 fb54 	bl	80a32a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1bf8:	4b0b      	ldr	r3, [pc, #44]	; (80a1c28 <module_user_init_hook+0x5c>)
 80a1bfa:	b113      	cbz	r3, 80a1c02 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1c02:	2100      	movs	r1, #0
 80a1c04:	4808      	ldr	r0, [pc, #32]	; (80a1c28 <module_user_init_hook+0x5c>)
 80a1c06:	f7ff fd27 	bl	80a1658 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1c0e:	2100      	movs	r1, #0
 80a1c10:	4806      	ldr	r0, [pc, #24]	; (80a1c2c <module_user_init_hook+0x60>)
 80a1c12:	f7ff bcad 	b.w	80a1570 <system_ctrl_set_app_request_handler>
 80a1c16:	bf00      	nop
 80a1c18:	080a1ad1 	.word	0x080a1ad1
 80a1c1c:	40024000 	.word	0x40024000
 80a1c20:	9a271c1e 	.word	0x9a271c1e
 80a1c24:	20000528 	.word	0x20000528
 80a1c28:	00000000 	.word	0x00000000
 80a1c2c:	080a1b95 	.word	0x080a1b95

080a1c30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c30:	4770      	bx	lr

080a1c32 <_ZN9IPAddressD0Ev>:
 80a1c32:	b510      	push	{r4, lr}
 80a1c34:	4604      	mov	r4, r0
 80a1c36:	2118      	movs	r1, #24
 80a1c38:	f000 fbb0 	bl	80a239c <_ZdlPvj>
 80a1c3c:	4620      	mov	r0, r4
 80a1c3e:	bd10      	pop	{r4, pc}

080a1c40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c42:	460e      	mov	r6, r1
 80a1c44:	2400      	movs	r4, #0
 80a1c46:	f100 0708 	add.w	r7, r0, #8
 80a1c4a:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a1c4c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1c50:	220a      	movs	r2, #10
 80a1c52:	4630      	mov	r0, r6
 80a1c54:	f7ff fe07 	bl	80a1866 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1c5c:	d101      	bne.n	80a1c62 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1c62:	2c00      	cmp	r4, #0
 80a1c64:	d0f2      	beq.n	80a1c4c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1c66:	212e      	movs	r1, #46	; 0x2e
 80a1c68:	4630      	mov	r0, r6
 80a1c6a:	f7ff fdf9 	bl	80a1860 <_ZN5Print5printEc>
 80a1c6e:	4404      	add	r4, r0
 80a1c70:	e7ec      	b.n	80a1c4c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1c74 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1c74:	b510      	push	{r4, lr}
 80a1c76:	4604      	mov	r4, r0
 80a1c78:	4b04      	ldr	r3, [pc, #16]	; (80a1c8c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1c7a:	2211      	movs	r2, #17
 80a1c7c:	2100      	movs	r1, #0
 80a1c7e:	f840 3b04 	str.w	r3, [r0], #4
 80a1c82:	f001 fb05 	bl	80a3290 <memset>
}
 80a1c86:	4620      	mov	r0, r4
 80a1c88:	bd10      	pop	{r4, pc}
 80a1c8a:	bf00      	nop
 80a1c8c:	080a39cc 	.word	0x080a39cc

080a1c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1c90:	4603      	mov	r3, r0
 80a1c92:	4a07      	ldr	r2, [pc, #28]	; (80a1cb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1c94:	b510      	push	{r4, lr}
 80a1c96:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1c9a:	f101 0210 	add.w	r2, r1, #16
 80a1c9e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1ca2:	4291      	cmp	r1, r2
 80a1ca4:	f843 4b04 	str.w	r4, [r3], #4
 80a1ca8:	d1f9      	bne.n	80a1c9e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1caa:	780a      	ldrb	r2, [r1, #0]
 80a1cac:	701a      	strb	r2, [r3, #0]
}
 80a1cae:	bd10      	pop	{r4, pc}
 80a1cb0:	080a39cc 	.word	0x080a39cc

080a1cb4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1cb4:	4a02      	ldr	r2, [pc, #8]	; (80a1cc0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1cb6:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1cba:	2204      	movs	r2, #4
 80a1cbc:	7502      	strb	r2, [r0, #20]
}
 80a1cbe:	4770      	bx	lr
 80a1cc0:	080a39cc 	.word	0x080a39cc

080a1cc4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1cc4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1cc6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1cca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1cce:	2304      	movs	r3, #4
 80a1cd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1cd4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1cd8:	6044      	str	r4, [r0, #4]
 80a1cda:	7503      	strb	r3, [r0, #20]
}
 80a1cdc:	bd10      	pop	{r4, pc}
	...

080a1ce0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1ce2:	4d04      	ldr	r5, [pc, #16]	; (80a1cf4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1ce4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1ce6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1cea:	9500      	str	r5, [sp, #0]
 80a1cec:	f7ff ffea 	bl	80a1cc4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1cf0:	b003      	add	sp, #12
 80a1cf2:	bd30      	pop	{r4, r5, pc}
 80a1cf4:	080a39cc 	.word	0x080a39cc

080a1cf8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1cf8:	7441      	strb	r1, [r0, #17]
}
 80a1cfa:	4770      	bx	lr

080a1cfc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1cfc:	4770      	bx	lr

080a1cfe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1cfe:	4770      	bx	lr

080a1d00 <_ZN9USBSerial4readEv>:
{
 80a1d00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1d02:	2100      	movs	r1, #0
 80a1d04:	7c00      	ldrb	r0, [r0, #16]
 80a1d06:	f7ff fbcb 	bl	80a14a0 <HAL_USB_USART_Receive_Data>
}
 80a1d0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1d0e:	bd08      	pop	{r3, pc}

080a1d10 <_ZN9USBSerial4peekEv>:
{
 80a1d10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1d12:	2101      	movs	r1, #1
 80a1d14:	7c00      	ldrb	r0, [r0, #16]
 80a1d16:	f7ff fbc3 	bl	80a14a0 <HAL_USB_USART_Receive_Data>
}
 80a1d1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1d1e:	bd08      	pop	{r3, pc}

080a1d20 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1d20:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1d22:	7c00      	ldrb	r0, [r0, #16]
 80a1d24:	f7ff fbb4 	bl	80a1490 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1d28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d2c:	bd08      	pop	{r3, pc}

080a1d2e <_ZN9USBSerial9availableEv>:
{
 80a1d2e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1d30:	7c00      	ldrb	r0, [r0, #16]
 80a1d32:	f7ff fba5 	bl	80a1480 <HAL_USB_USART_Available_Data>
}
 80a1d36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d3a:	bd08      	pop	{r3, pc}

080a1d3c <_ZN9USBSerial5writeEh>:
{
 80a1d3c:	b538      	push	{r3, r4, r5, lr}
 80a1d3e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d40:	7c00      	ldrb	r0, [r0, #16]
{
 80a1d42:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d44:	f7ff fba4 	bl	80a1490 <HAL_USB_USART_Available_Data_For_Write>
 80a1d48:	2800      	cmp	r0, #0
 80a1d4a:	dc01      	bgt.n	80a1d50 <_ZN9USBSerial5writeEh+0x14>
 80a1d4c:	7c60      	ldrb	r0, [r4, #17]
 80a1d4e:	b128      	cbz	r0, 80a1d5c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1d50:	4629      	mov	r1, r5
 80a1d52:	7c20      	ldrb	r0, [r4, #16]
 80a1d54:	f7ff fbac 	bl	80a14b0 <HAL_USB_USART_Send_Data>
 80a1d58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1d5c:	bd38      	pop	{r3, r4, r5, pc}

080a1d5e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1d5e:	7c00      	ldrb	r0, [r0, #16]
 80a1d60:	f7ff bbae 	b.w	80a14c0 <HAL_USB_USART_Flush_Data>

080a1d64 <_ZN9USBSerialD0Ev>:
 80a1d64:	b510      	push	{r4, lr}
 80a1d66:	4604      	mov	r4, r0
 80a1d68:	2114      	movs	r1, #20
 80a1d6a:	f000 fb17 	bl	80a239c <_ZdlPvj>
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	bd10      	pop	{r4, pc}

080a1d72 <__tcf_1>:
 80a1d72:	4770      	bx	lr

080a1d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d74:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d7a:	4604      	mov	r4, r0
 80a1d7c:	4608      	mov	r0, r1
 80a1d7e:	2100      	movs	r1, #0
 80a1d80:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1d84:	4b04      	ldr	r3, [pc, #16]	; (80a1d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1d86:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d88:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1d8a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1d8c:	4611      	mov	r1, r2
  _blocking = true;
 80a1d8e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1d90:	f7ff fb66 	bl	80a1460 <HAL_USB_USART_Init>
}
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	bd10      	pop	{r4, pc}
 80a1d98:	080a39e0 	.word	0x080a39e0

080a1d9c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1d9c:	2200      	movs	r2, #0
 80a1d9e:	7c00      	ldrb	r0, [r0, #16]
 80a1da0:	f7ff bb66 	b.w	80a1470 <HAL_USB_USART_Begin>

080a1da4 <_Z19acquireSerialBufferv>:
{
 80a1da4:	b510      	push	{r4, lr}
 80a1da6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1da8:	2214      	movs	r2, #20
 80a1daa:	2100      	movs	r1, #0
 80a1dac:	f001 fa70 	bl	80a3290 <memset>
}
 80a1db0:	4620      	mov	r0, r4
 80a1db2:	bd10      	pop	{r4, pc}

080a1db4 <_Z16_fetch_usbserialv>:
{
 80a1db4:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1db6:	4d0e      	ldr	r5, [pc, #56]	; (80a1df0 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1db8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1dba:	a801      	add	r0, sp, #4
 80a1dbc:	f7ff fff2 	bl	80a1da4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1dc0:	7829      	ldrb	r1, [r5, #0]
 80a1dc2:	f3bf 8f5b 	dmb	ish
 80a1dc6:	f011 0401 	ands.w	r4, r1, #1
 80a1dca:	d10e      	bne.n	80a1dea <_Z16_fetch_usbserialv+0x36>
 80a1dcc:	4628      	mov	r0, r5
 80a1dce:	f7fe f975 	bl	80a00bc <__cxa_guard_acquire>
 80a1dd2:	b150      	cbz	r0, 80a1dea <_Z16_fetch_usbserialv+0x36>
 80a1dd4:	4621      	mov	r1, r4
 80a1dd6:	aa01      	add	r2, sp, #4
 80a1dd8:	4806      	ldr	r0, [pc, #24]	; (80a1df4 <_Z16_fetch_usbserialv+0x40>)
 80a1dda:	f7ff ffcb 	bl	80a1d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1dde:	4628      	mov	r0, r5
 80a1de0:	f7fe f971 	bl	80a00c6 <__cxa_guard_release>
 80a1de4:	4804      	ldr	r0, [pc, #16]	; (80a1df8 <_Z16_fetch_usbserialv+0x44>)
 80a1de6:	f001 fa3f 	bl	80a3268 <atexit>
	return _usbserial;
}
 80a1dea:	4802      	ldr	r0, [pc, #8]	; (80a1df4 <_Z16_fetch_usbserialv+0x40>)
 80a1dec:	b007      	add	sp, #28
 80a1dee:	bd30      	pop	{r4, r5, pc}
 80a1df0:	20000530 	.word	0x20000530
 80a1df4:	20000538 	.word	0x20000538
 80a1df8:	080a1cfd 	.word	0x080a1cfd

080a1dfc <_Z23acquireUSBSerial1Bufferv>:
 80a1dfc:	b510      	push	{r4, lr}
 80a1dfe:	4604      	mov	r4, r0
 80a1e00:	2214      	movs	r2, #20
 80a1e02:	2100      	movs	r1, #0
 80a1e04:	f001 fa44 	bl	80a3290 <memset>
 80a1e08:	4620      	mov	r0, r4
 80a1e0a:	bd10      	pop	{r4, pc}

080a1e0c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1e0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e0e:	4c0e      	ldr	r4, [pc, #56]	; (80a1e48 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1e10:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1e12:	a801      	add	r0, sp, #4
 80a1e14:	f7ff fff2 	bl	80a1dfc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e18:	7823      	ldrb	r3, [r4, #0]
 80a1e1a:	f3bf 8f5b 	dmb	ish
 80a1e1e:	07db      	lsls	r3, r3, #31
 80a1e20:	d40e      	bmi.n	80a1e40 <_Z17_fetch_usbserial1v+0x34>
 80a1e22:	4620      	mov	r0, r4
 80a1e24:	f7fe f94a 	bl	80a00bc <__cxa_guard_acquire>
 80a1e28:	b150      	cbz	r0, 80a1e40 <_Z17_fetch_usbserial1v+0x34>
 80a1e2a:	2101      	movs	r1, #1
 80a1e2c:	aa01      	add	r2, sp, #4
 80a1e2e:	4807      	ldr	r0, [pc, #28]	; (80a1e4c <_Z17_fetch_usbserial1v+0x40>)
 80a1e30:	f7ff ffa0 	bl	80a1d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	f7fe f946 	bl	80a00c6 <__cxa_guard_release>
 80a1e3a:	4805      	ldr	r0, [pc, #20]	; (80a1e50 <_Z17_fetch_usbserial1v+0x44>)
 80a1e3c:	f001 fa14 	bl	80a3268 <atexit>
  return _usbserial1;
}
 80a1e40:	4802      	ldr	r0, [pc, #8]	; (80a1e4c <_Z17_fetch_usbserial1v+0x40>)
 80a1e42:	b006      	add	sp, #24
 80a1e44:	bd10      	pop	{r4, pc}
 80a1e46:	bf00      	nop
 80a1e48:	20000534 	.word	0x20000534
 80a1e4c:	2000054c 	.word	0x2000054c
 80a1e50:	080a1d73 	.word	0x080a1d73

080a1e54 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1e54:	4770      	bx	lr

080a1e56 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e56:	7441      	strb	r1, [r0, #17]
}
 80a1e58:	4770      	bx	lr

080a1e5a <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1e5a:	4770      	bx	lr

080a1e5c <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1e5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1e5e:	7c00      	ldrb	r0, [r0, #16]
 80a1e60:	f7ff fa64 	bl	80a132c <hal_usart_available_data_for_write>
}
 80a1e64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e68:	bd08      	pop	{r3, pc}

080a1e6a <_ZN11USARTSerial9availableEv>:
{
 80a1e6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1e6c:	7c00      	ldrb	r0, [r0, #16]
 80a1e6e:	f7ff fa35 	bl	80a12dc <hal_usart_available>
}
 80a1e72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e76:	bd08      	pop	{r3, pc}

080a1e78 <_ZN11USARTSerial4peekEv>:
{
 80a1e78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1e7a:	7c00      	ldrb	r0, [r0, #16]
 80a1e7c:	f7ff fa3e 	bl	80a12fc <hal_usart_peek>
}
 80a1e80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e84:	bd08      	pop	{r3, pc}

080a1e86 <_ZN11USARTSerial4readEv>:
{
 80a1e86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1e88:	7c00      	ldrb	r0, [r0, #16]
 80a1e8a:	f7ff fa2f 	bl	80a12ec <hal_usart_read>
}
 80a1e8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e92:	bd08      	pop	{r3, pc}

080a1e94 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1e94:	7c00      	ldrb	r0, [r0, #16]
 80a1e96:	f7ff ba39 	b.w	80a130c <hal_usart_flush>

080a1e9a <_ZN11USARTSerial5writeEh>:
{
 80a1e9a:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e9c:	7c46      	ldrb	r6, [r0, #17]
{
 80a1e9e:	4604      	mov	r4, r0
 80a1ea0:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1ea2:	b12e      	cbz	r6, 80a1eb0 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1ea4:	4629      	mov	r1, r5
 80a1ea6:	7c20      	ldrb	r0, [r4, #16]
}
 80a1ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1eac:	f7ff ba0e 	b.w	80a12cc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1eb0:	7c00      	ldrb	r0, [r0, #16]
 80a1eb2:	f7ff fa3b 	bl	80a132c <hal_usart_available_data_for_write>
 80a1eb6:	2800      	cmp	r0, #0
 80a1eb8:	dcf4      	bgt.n	80a1ea4 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1eba:	4630      	mov	r0, r6
 80a1ebc:	bd70      	pop	{r4, r5, r6, pc}

080a1ebe <_ZN11USARTSerialD0Ev>:
 80a1ebe:	b510      	push	{r4, lr}
 80a1ec0:	4604      	mov	r4, r0
 80a1ec2:	2114      	movs	r1, #20
 80a1ec4:	f000 fa6a 	bl	80a239c <_ZdlPvj>
 80a1ec8:	4620      	mov	r0, r4
 80a1eca:	bd10      	pop	{r4, pc}

080a1ecc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1ecc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1ed0:	b510      	push	{r4, lr}
 80a1ed2:	4604      	mov	r4, r0
 80a1ed4:	4608      	mov	r0, r1
 80a1ed6:	4611      	mov	r1, r2
 80a1ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1edc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1ee0:	4a04      	ldr	r2, [pc, #16]	; (80a1ef4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1ee2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1ee4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1ee6:	2201      	movs	r2, #1
 80a1ee8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1eea:	461a      	mov	r2, r3
 80a1eec:	f7ff f9e6 	bl	80a12bc <hal_usart_init>
}
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	bd10      	pop	{r4, pc}
 80a1ef4:	080a3a10 	.word	0x080a3a10

080a1ef8 <_Z22__fetch_global_Serial1v>:
{
 80a1ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
 80a1efa:	4c19      	ldr	r4, [pc, #100]	; (80a1f60 <_Z22__fetch_global_Serial1v+0x68>)
 80a1efc:	6826      	ldr	r6, [r4, #0]
 80a1efe:	b94e      	cbnz	r6, 80a1f14 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a1f00:	2084      	movs	r0, #132	; 0x84
 80a1f02:	f7fe f8ca 	bl	80a009a <_Znwj>
 80a1f06:	4605      	mov	r5, r0
 80a1f08:	b118      	cbz	r0, 80a1f12 <_Z22__fetch_global_Serial1v+0x1a>
 80a1f0a:	2284      	movs	r2, #132	; 0x84
 80a1f0c:	4631      	mov	r1, r6
 80a1f0e:	f001 f9bf 	bl	80a3290 <memset>
 80a1f12:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
 80a1f14:	4d13      	ldr	r5, [pc, #76]	; (80a1f64 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1f16:	682f      	ldr	r7, [r5, #0]
 80a1f18:	b94f      	cbnz	r7, 80a1f2e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a1f1a:	2084      	movs	r0, #132	; 0x84
 80a1f1c:	f7fe f8bd 	bl	80a009a <_Znwj>
 80a1f20:	4606      	mov	r6, r0
 80a1f22:	b118      	cbz	r0, 80a1f2c <_Z22__fetch_global_Serial1v+0x34>
 80a1f24:	2284      	movs	r2, #132	; 0x84
 80a1f26:	4639      	mov	r1, r7
 80a1f28:	f001 f9b2 	bl	80a3290 <memset>
 80a1f2c:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1f2e:	4f0e      	ldr	r7, [pc, #56]	; (80a1f68 <_Z22__fetch_global_Serial1v+0x70>)
 80a1f30:	7839      	ldrb	r1, [r7, #0]
 80a1f32:	f3bf 8f5b 	dmb	ish
 80a1f36:	f011 0601 	ands.w	r6, r1, #1
 80a1f3a:	d10f      	bne.n	80a1f5c <_Z22__fetch_global_Serial1v+0x64>
 80a1f3c:	4638      	mov	r0, r7
 80a1f3e:	f7fe f8bd 	bl	80a00bc <__cxa_guard_acquire>
 80a1f42:	b158      	cbz	r0, 80a1f5c <_Z22__fetch_global_Serial1v+0x64>
 80a1f44:	4631      	mov	r1, r6
 80a1f46:	682b      	ldr	r3, [r5, #0]
 80a1f48:	6822      	ldr	r2, [r4, #0]
 80a1f4a:	4808      	ldr	r0, [pc, #32]	; (80a1f6c <_Z22__fetch_global_Serial1v+0x74>)
 80a1f4c:	f7ff ffbe 	bl	80a1ecc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1f50:	4638      	mov	r0, r7
 80a1f52:	f7fe f8b8 	bl	80a00c6 <__cxa_guard_release>
 80a1f56:	4806      	ldr	r0, [pc, #24]	; (80a1f70 <_Z22__fetch_global_Serial1v+0x78>)
 80a1f58:	f001 f986 	bl	80a3268 <atexit>
#endif
	return serial1;
}
 80a1f5c:	4803      	ldr	r0, [pc, #12]	; (80a1f6c <_Z22__fetch_global_Serial1v+0x74>)
 80a1f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1f60:	20000564 	.word	0x20000564
 80a1f64:	20000568 	.word	0x20000568
 80a1f68:	20000560 	.word	0x20000560
 80a1f6c:	2000056c 	.word	0x2000056c
 80a1f70:	080a1e5b 	.word	0x080a1e5b

080a1f74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1f74:	4770      	bx	lr

080a1f76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f78:	4606      	mov	r6, r0
 80a1f7a:	4615      	mov	r5, r2
 80a1f7c:	460c      	mov	r4, r1
 80a1f7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f80:	42bc      	cmp	r4, r7
 80a1f82:	d006      	beq.n	80a1f92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1f84:	6833      	ldr	r3, [r6, #0]
 80a1f86:	4630      	mov	r0, r6
 80a1f88:	689b      	ldr	r3, [r3, #8]
 80a1f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1f8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1f90:	e7f6      	b.n	80a1f80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1f92:	4628      	mov	r0, r5
 80a1f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1f96:	2200      	movs	r2, #0
 80a1f98:	7c00      	ldrb	r0, [r0, #16]
 80a1f9a:	f7ff b9e7 	b.w	80a136c <hal_i2c_write>

080a1f9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1f9e:	2100      	movs	r1, #0
 80a1fa0:	7c00      	ldrb	r0, [r0, #16]
 80a1fa2:	f7ff b9eb 	b.w	80a137c <hal_i2c_available>

080a1fa6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1fa6:	2100      	movs	r1, #0
 80a1fa8:	7c00      	ldrb	r0, [r0, #16]
 80a1faa:	f7ff b9ef 	b.w	80a138c <hal_i2c_read>

080a1fae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1fae:	2100      	movs	r1, #0
 80a1fb0:	7c00      	ldrb	r0, [r0, #16]
 80a1fb2:	f7ff b9f3 	b.w	80a139c <hal_i2c_peek>

080a1fb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1fb6:	2100      	movs	r1, #0
 80a1fb8:	7c00      	ldrb	r0, [r0, #16]
 80a1fba:	f7ff b9f7 	b.w	80a13ac <hal_i2c_flush>

080a1fbe <_ZN7TwoWireD0Ev>:
 80a1fbe:	b510      	push	{r4, lr}
 80a1fc0:	4604      	mov	r4, r0
 80a1fc2:	2114      	movs	r1, #20
 80a1fc4:	f000 f9ea 	bl	80a239c <_ZdlPvj>
 80a1fc8:	4620      	mov	r0, r4
 80a1fca:	bd10      	pop	{r4, pc}

080a1fcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1fcc:	b510      	push	{r4, lr}
 80a1fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fd2:	4604      	mov	r4, r0
 80a1fd4:	4608      	mov	r0, r1
 80a1fd6:	2100      	movs	r1, #0
 80a1fd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1fdc:	4b03      	ldr	r3, [pc, #12]	; (80a1fec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1fde:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1fe0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1fe2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1fe4:	f7ff f9f2 	bl	80a13cc <hal_i2c_init>
}
 80a1fe8:	4620      	mov	r0, r4
 80a1fea:	bd10      	pop	{r4, pc}
 80a1fec:	080a3a40 	.word	0x080a3a40

080a1ff0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1ff0:	2300      	movs	r3, #0
 80a1ff2:	7c00      	ldrb	r0, [r0, #16]
 80a1ff4:	461a      	mov	r2, r3
 80a1ff6:	4619      	mov	r1, r3
 80a1ff8:	f7ff b9a0 	b.w	80a133c <hal_i2c_begin>

080a1ffc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1ffc:	2200      	movs	r2, #0
 80a1ffe:	7c00      	ldrb	r0, [r0, #16]
 80a2000:	f7ff b9a4 	b.w	80a134c <hal_i2c_begin_transmission>

080a2004 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a2004:	b2c9      	uxtb	r1, r1
 80a2006:	f7ff bff9 	b.w	80a1ffc <_ZN7TwoWire17beginTransmissionEh>

080a200a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a200a:	2200      	movs	r2, #0
 80a200c:	7c00      	ldrb	r0, [r0, #16]
 80a200e:	f7ff b9a5 	b.w	80a135c <hal_i2c_end_transmission>

080a2012 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a2012:	2101      	movs	r1, #1
 80a2014:	f7ff bff9 	b.w	80a200a <_ZN7TwoWire15endTransmissionEh>

080a2018 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2018:	2200      	movs	r2, #0
 80a201a:	6840      	ldr	r0, [r0, #4]
 80a201c:	4611      	mov	r1, r2
 80a201e:	f7ff bad3 	b.w	80a15c8 <network_ready>

080a2022 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2022:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2024:	4615      	mov	r5, r2
 80a2026:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2028:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a202a:	460e      	mov	r6, r1
 80a202c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a202e:	2100      	movs	r1, #0
 80a2030:	a803      	add	r0, sp, #12
 80a2032:	f001 f92d 	bl	80a3290 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2036:	4628      	mov	r0, r5
 80a2038:	f001 f956 	bl	80a32e8 <strlen>
 80a203c:	2700      	movs	r7, #0
 80a203e:	b281      	uxth	r1, r0
 80a2040:	6873      	ldr	r3, [r6, #4]
 80a2042:	4628      	mov	r0, r5
 80a2044:	9700      	str	r7, [sp, #0]
 80a2046:	aa03      	add	r2, sp, #12
 80a2048:	f7ff fa42 	bl	80a14d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a204c:	b130      	cbz	r0, 80a205c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a204e:	4639      	mov	r1, r7
 80a2050:	4620      	mov	r0, r4
 80a2052:	f7ff fe2f 	bl	80a1cb4 <_ZN9IPAddressC1Em>
    }
 80a2056:	4620      	mov	r0, r4
 80a2058:	b009      	add	sp, #36	; 0x24
 80a205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a205c:	4620      	mov	r0, r4
 80a205e:	a903      	add	r1, sp, #12
 80a2060:	f7ff fe16 	bl	80a1c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2064:	e7f7      	b.n	80a2056 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2066 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2066:	2200      	movs	r2, #0
 80a2068:	6840      	ldr	r0, [r0, #4]
 80a206a:	4611      	mov	r1, r2
 80a206c:	f7ff bacc 	b.w	80a1608 <network_listening>

080a2070 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2070:	2200      	movs	r2, #0
 80a2072:	6840      	ldr	r0, [r0, #4]
 80a2074:	4611      	mov	r1, r2
 80a2076:	f7ff bad7 	b.w	80a1628 <network_get_listen_timeout>

080a207a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a207a:	2200      	movs	r2, #0
 80a207c:	6840      	ldr	r0, [r0, #4]
 80a207e:	f7ff bacb 	b.w	80a1618 <network_set_listen_timeout>

080a2082 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2082:	2200      	movs	r2, #0
 80a2084:	6840      	ldr	r0, [r0, #4]
 80a2086:	f081 0101 	eor.w	r1, r1, #1
 80a208a:	f7ff bab5 	b.w	80a15f8 <network_listen>

080a208e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a208e:	2300      	movs	r3, #0
 80a2090:	6840      	ldr	r0, [r0, #4]
 80a2092:	461a      	mov	r2, r3
 80a2094:	4619      	mov	r1, r3
 80a2096:	f7ff baa7 	b.w	80a15e8 <network_off>

080a209a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a209a:	2200      	movs	r2, #0
 80a209c:	6840      	ldr	r0, [r0, #4]
 80a209e:	4611      	mov	r1, r2
 80a20a0:	f7ff ba82 	b.w	80a15a8 <network_connecting>

080a20a4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a20a4:	2200      	movs	r2, #0
 80a20a6:	2102      	movs	r1, #2
 80a20a8:	6840      	ldr	r0, [r0, #4]
 80a20aa:	f7ff ba85 	b.w	80a15b8 <network_disconnect>

080a20ae <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a20ae:	2300      	movs	r3, #0
 80a20b0:	6840      	ldr	r0, [r0, #4]
 80a20b2:	461a      	mov	r2, r3
 80a20b4:	f7ff ba70 	b.w	80a1598 <network_connect>

080a20b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a20b8:	2204      	movs	r2, #4
 80a20ba:	4b02      	ldr	r3, [pc, #8]	; (80a20c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a20bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a20be:	4a02      	ldr	r2, [pc, #8]	; (80a20c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a20c0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a20c2:	4770      	bx	lr
 80a20c4:	20000580 	.word	0x20000580
 80a20c8:	080a3a68 	.word	0x080a3a68

080a20cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a20cc:	2300      	movs	r3, #0
 80a20ce:	6840      	ldr	r0, [r0, #4]
 80a20d0:	461a      	mov	r2, r3
 80a20d2:	f7ff ba61 	b.w	80a1598 <network_connect>

080a20d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a20d6:	2200      	movs	r2, #0
 80a20d8:	2102      	movs	r1, #2
 80a20da:	6840      	ldr	r0, [r0, #4]
 80a20dc:	f7ff ba6c 	b.w	80a15b8 <network_disconnect>

080a20e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a20e0:	2200      	movs	r2, #0
 80a20e2:	6840      	ldr	r0, [r0, #4]
 80a20e4:	4611      	mov	r1, r2
 80a20e6:	f7ff ba5f 	b.w	80a15a8 <network_connecting>

080a20ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a20ea:	2200      	movs	r2, #0
 80a20ec:	6840      	ldr	r0, [r0, #4]
 80a20ee:	4611      	mov	r1, r2
 80a20f0:	f7ff ba6a 	b.w	80a15c8 <network_ready>

080a20f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a20f4:	2300      	movs	r3, #0
 80a20f6:	6840      	ldr	r0, [r0, #4]
 80a20f8:	461a      	mov	r2, r3
 80a20fa:	4619      	mov	r1, r3
 80a20fc:	f7ff ba6c 	b.w	80a15d8 <network_on>

080a2100 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2100:	2300      	movs	r3, #0
 80a2102:	6840      	ldr	r0, [r0, #4]
 80a2104:	461a      	mov	r2, r3
 80a2106:	4619      	mov	r1, r3
 80a2108:	f7ff ba6e 	b.w	80a15e8 <network_off>

080a210c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a210c:	2100      	movs	r1, #0
 80a210e:	6840      	ldr	r0, [r0, #4]
 80a2110:	f7ff ba92 	b.w	80a1638 <network_is_on>

080a2114 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2114:	2100      	movs	r1, #0
 80a2116:	6840      	ldr	r0, [r0, #4]
 80a2118:	f7ff ba96 	b.w	80a1648 <network_is_off>

080a211c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a211c:	2200      	movs	r2, #0
 80a211e:	6840      	ldr	r0, [r0, #4]
 80a2120:	f081 0101 	eor.w	r1, r1, #1
 80a2124:	f7ff ba68 	b.w	80a15f8 <network_listen>

080a2128 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2128:	2200      	movs	r2, #0
 80a212a:	6840      	ldr	r0, [r0, #4]
 80a212c:	f7ff ba74 	b.w	80a1618 <network_set_listen_timeout>

080a2130 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2130:	2200      	movs	r2, #0
 80a2132:	6840      	ldr	r0, [r0, #4]
 80a2134:	4611      	mov	r1, r2
 80a2136:	f7ff ba77 	b.w	80a1628 <network_get_listen_timeout>

080a213a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a213a:	2200      	movs	r2, #0
 80a213c:	6840      	ldr	r0, [r0, #4]
 80a213e:	4611      	mov	r1, r2
 80a2140:	f7ff ba62 	b.w	80a1608 <network_listening>

080a2144 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2144:	b570      	push	{r4, r5, r6, lr}
 80a2146:	4615      	mov	r5, r2
 80a2148:	b08e      	sub	sp, #56	; 0x38
 80a214a:	4604      	mov	r4, r0
    IPAddress addr;
 80a214c:	a808      	add	r0, sp, #32
 80a214e:	f7ff fd91 	bl	80a1c74 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2152:	2211      	movs	r2, #17
 80a2154:	2100      	movs	r1, #0
 80a2156:	a803      	add	r0, sp, #12
 80a2158:	f001 f89a 	bl	80a3290 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a215c:	2600      	movs	r6, #0
 80a215e:	4628      	mov	r0, r5
 80a2160:	f001 f8c2 	bl	80a32e8 <strlen>
 80a2164:	4b0a      	ldr	r3, [pc, #40]	; (80a2190 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2166:	9600      	str	r6, [sp, #0]
 80a2168:	b281      	uxth	r1, r0
 80a216a:	685b      	ldr	r3, [r3, #4]
 80a216c:	4628      	mov	r0, r5
 80a216e:	aa03      	add	r2, sp, #12
 80a2170:	f7ff f9ae 	bl	80a14d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2174:	b130      	cbz	r0, 80a2184 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2176:	4631      	mov	r1, r6
 80a2178:	4620      	mov	r0, r4
 80a217a:	f7ff fd9b 	bl	80a1cb4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a217e:	4620      	mov	r0, r4
 80a2180:	b00e      	add	sp, #56	; 0x38
 80a2182:	bd70      	pop	{r4, r5, r6, pc}
 80a2184:	4620      	mov	r0, r4
 80a2186:	a903      	add	r1, sp, #12
 80a2188:	f7ff fd82 	bl	80a1c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a218c:	e7f7      	b.n	80a217e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a218e:	bf00      	nop
 80a2190:	20000580 	.word	0x20000580

080a2194 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2194:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2196:	4a03      	ldr	r2, [pc, #12]	; (80a21a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2198:	601a      	str	r2, [r3, #0]
 80a219a:	2200      	movs	r2, #0
 80a219c:	605a      	str	r2, [r3, #4]

} // spark
 80a219e:	4770      	bx	lr
 80a21a0:	20000588 	.word	0x20000588
 80a21a4:	080a3aa4 	.word	0x080a3aa4

080a21a8 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a21a8:	4b02      	ldr	r3, [pc, #8]	; (80a21b4 <__tcf_0+0xc>)
 80a21aa:	6898      	ldr	r0, [r3, #8]
 80a21ac:	b108      	cbz	r0, 80a21b2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a21ae:	f7ff b86d 	b.w	80a128c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a21b2:	4770      	bx	lr
 80a21b4:	200004f4 	.word	0x200004f4

080a21b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a21b8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a21ba:	b570      	push	{r4, r5, r6, lr}
 80a21bc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a21be:	d901      	bls.n	80a21c4 <pinAvailable+0xc>
    return false;
 80a21c0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a21c2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a21c4:	f1a0 030d 	sub.w	r3, r0, #13
 80a21c8:	2b02      	cmp	r3, #2
 80a21ca:	d90b      	bls.n	80a21e4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a21cc:	2801      	cmp	r0, #1
 80a21ce:	d824      	bhi.n	80a221a <pinAvailable+0x62>
 80a21d0:	f000 f8c0 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a21d4:	2100      	movs	r1, #0
 80a21d6:	7c00      	ldrb	r0, [r0, #16]
 80a21d8:	f7ff f8f0 	bl	80a13bc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a21dc:	f080 0001 	eor.w	r0, r0, #1
 80a21e0:	b2c0      	uxtb	r0, r0
 80a21e2:	e7ee      	b.n	80a21c2 <pinAvailable+0xa>
 80a21e4:	4e12      	ldr	r6, [pc, #72]	; (80a2230 <pinAvailable+0x78>)
 80a21e6:	7831      	ldrb	r1, [r6, #0]
 80a21e8:	f3bf 8f5b 	dmb	ish
 80a21ec:	f011 0501 	ands.w	r5, r1, #1
 80a21f0:	d10d      	bne.n	80a220e <pinAvailable+0x56>
 80a21f2:	4630      	mov	r0, r6
 80a21f4:	f7fd ff62 	bl	80a00bc <__cxa_guard_acquire>
 80a21f8:	b148      	cbz	r0, 80a220e <pinAvailable+0x56>
 80a21fa:	4629      	mov	r1, r5
 80a21fc:	480d      	ldr	r0, [pc, #52]	; (80a2234 <pinAvailable+0x7c>)
 80a21fe:	f7ff fa4e 	bl	80a169e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2202:	4630      	mov	r0, r6
 80a2204:	f7fd ff5f 	bl	80a00c6 <__cxa_guard_release>
 80a2208:	480b      	ldr	r0, [pc, #44]	; (80a2238 <pinAvailable+0x80>)
 80a220a:	f001 f82d 	bl	80a3268 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a220e:	4b09      	ldr	r3, [pc, #36]	; (80a2234 <pinAvailable+0x7c>)
 80a2210:	7818      	ldrb	r0, [r3, #0]
 80a2212:	f7ff f915 	bl	80a1440 <hal_spi_is_enabled>
 80a2216:	2800      	cmp	r0, #0
 80a2218:	d1d2      	bne.n	80a21c0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a221a:	3c12      	subs	r4, #18
 80a221c:	2c01      	cmp	r4, #1
 80a221e:	d805      	bhi.n	80a222c <pinAvailable+0x74>
 80a2220:	f7ff fe6a 	bl	80a1ef8 <_Z22__fetch_global_Serial1v>
 80a2224:	7c00      	ldrb	r0, [r0, #16]
 80a2226:	f7ff f879 	bl	80a131c <hal_usart_is_enabled>
 80a222a:	e7d7      	b.n	80a21dc <pinAvailable+0x24>
  return true; // 'pin' is available
 80a222c:	2001      	movs	r0, #1
 80a222e:	e7c8      	b.n	80a21c2 <pinAvailable+0xa>
 80a2230:	200004f0 	.word	0x200004f0
 80a2234:	200004f4 	.word	0x200004f4
 80a2238:	080a21a9 	.word	0x080a21a9

080a223c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a223c:	2817      	cmp	r0, #23
{
 80a223e:	b538      	push	{r3, r4, r5, lr}
 80a2240:	4604      	mov	r4, r0
 80a2242:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2244:	d80a      	bhi.n	80a225c <pinMode+0x20>
 80a2246:	29ff      	cmp	r1, #255	; 0xff
 80a2248:	d008      	beq.n	80a225c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a224a:	f7ff ffb5 	bl	80a21b8 <pinAvailable>
 80a224e:	b128      	cbz	r0, 80a225c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2250:	4629      	mov	r1, r5
 80a2252:	4620      	mov	r0, r4
}
 80a2254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2258:	f7fe bfd8 	b.w	80a120c <HAL_Pin_Mode>
}
 80a225c:	bd38      	pop	{r3, r4, r5, pc}

080a225e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a225e:	b538      	push	{r3, r4, r5, lr}
 80a2260:	4604      	mov	r4, r0
 80a2262:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2264:	f7fe ffda 	bl	80a121c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2268:	28ff      	cmp	r0, #255	; 0xff
 80a226a:	d010      	beq.n	80a228e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a226c:	2806      	cmp	r0, #6
 80a226e:	d804      	bhi.n	80a227a <digitalWrite+0x1c>
 80a2270:	234d      	movs	r3, #77	; 0x4d
 80a2272:	fa23 f000 	lsr.w	r0, r3, r0
 80a2276:	07c3      	lsls	r3, r0, #31
 80a2278:	d409      	bmi.n	80a228e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a227a:	4620      	mov	r0, r4
 80a227c:	f7ff ff9c 	bl	80a21b8 <pinAvailable>
 80a2280:	b128      	cbz	r0, 80a228e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2282:	4629      	mov	r1, r5
 80a2284:	4620      	mov	r0, r4
}
 80a2286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a228a:	f7fe bfcf 	b.w	80a122c <HAL_GPIO_Write>
}
 80a228e:	bd38      	pop	{r3, r4, r5, pc}

080a2290 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2290:	b510      	push	{r4, lr}
 80a2292:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2294:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2296:	bf9c      	itt	ls
 80a2298:	340a      	addls	r4, #10
 80a229a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a229c:	4620      	mov	r0, r4
 80a229e:	f7ff ff8b 	bl	80a21b8 <pinAvailable>
 80a22a2:	b150      	cbz	r0, 80a22ba <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a22a4:	2103      	movs	r1, #3
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	f7fe ffa8 	bl	80a11fc <HAL_Validate_Pin_Function>
 80a22ac:	2803      	cmp	r0, #3
 80a22ae:	d104      	bne.n	80a22ba <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a22b0:	4620      	mov	r0, r4
}
 80a22b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a22b6:	f7fe bfc1 	b.w	80a123c <hal_adc_read>
}
 80a22ba:	2000      	movs	r0, #0
 80a22bc:	bd10      	pop	{r4, pc}

080a22be <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a22be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a22c2:	4690      	mov	r8, r2
 80a22c4:	461f      	mov	r7, r3
 80a22c6:	2400      	movs	r4, #0
 80a22c8:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a22ca:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
 80a22cc:	f1b8 0f00 	cmp.w	r8, #0
 80a22d0:	d113      	bne.n	80a22fa <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a22d2:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a22d6:	4630      	mov	r0, r6
 80a22d8:	f001 0101 	and.w	r1, r1, #1
 80a22dc:	f7ff ffbf 	bl	80a225e <digitalWrite>
    digitalWrite(clockPin, HIGH);
 80a22e0:	2101      	movs	r1, #1
 80a22e2:	4628      	mov	r0, r5
 80a22e4:	f7ff ffbb 	bl	80a225e <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a22e8:	3401      	adds	r4, #1
 80a22ea:	2100      	movs	r1, #0
 80a22ec:	4628      	mov	r0, r5
 80a22ee:	f7ff ffb6 	bl	80a225e <digitalWrite>
  for (i = 0; i < 8; i++)  {
 80a22f2:	2c08      	cmp	r4, #8
 80a22f4:	d1ea      	bne.n	80a22cc <shiftOut+0xe>
  }
}
 80a22f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a22fa:	f1c4 0107 	rsb	r1, r4, #7
 80a22fe:	fa47 f101 	asr.w	r1, r7, r1
 80a2302:	e7e8      	b.n	80a22d6 <shiftOut+0x18>

080a2304 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2304:	2300      	movs	r3, #0
 80a2306:	b507      	push	{r0, r1, r2, lr}
 80a2308:	461a      	mov	r2, r3
 80a230a:	4619      	mov	r1, r3
 80a230c:	9300      	str	r3, [sp, #0]
 80a230e:	4803      	ldr	r0, [pc, #12]	; (80a231c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2310:	f7ff fce6 	bl	80a1ce0 <_ZN9IPAddressC1Ehhhh>
 80a2314:	b003      	add	sp, #12
 80a2316:	f85d fb04 	ldr.w	pc, [sp], #4
 80a231a:	bf00      	nop
 80a231c:	20000594 	.word	0x20000594

080a2320 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2320:	4770      	bx	lr
	...

080a2324 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2324:	2300      	movs	r3, #0
{
 80a2326:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2328:	2520      	movs	r5, #32
 80a232a:	8043      	strh	r3, [r0, #2]
 80a232c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a232e:	4e08      	ldr	r6, [pc, #32]	; (80a2350 <_Z17acquireWireBufferv+0x2c>)
{
 80a2330:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2332:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2334:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2336:	6085      	str	r5, [r0, #8]
 80a2338:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a233a:	4628      	mov	r0, r5
 80a233c:	f000 f830 	bl	80a23a0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2340:	4631      	mov	r1, r6
	};
 80a2342:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2344:	4628      	mov	r0, r5
 80a2346:	f000 f82b 	bl	80a23a0 <_ZnajRKSt9nothrow_t>
	};
 80a234a:	60e0      	str	r0, [r4, #12]
}
 80a234c:	4620      	mov	r0, r4
 80a234e:	bd70      	pop	{r4, r5, r6, pc}
 80a2350:	080a3ad8 	.word	0x080a3ad8

080a2354 <_Z19__fetch_global_Wirev>:
{
 80a2354:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2356:	4d0e      	ldr	r5, [pc, #56]	; (80a2390 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2358:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a235a:	7829      	ldrb	r1, [r5, #0]
 80a235c:	f3bf 8f5b 	dmb	ish
 80a2360:	f011 0401 	ands.w	r4, r1, #1
 80a2364:	d111      	bne.n	80a238a <_Z19__fetch_global_Wirev+0x36>
 80a2366:	4628      	mov	r0, r5
 80a2368:	f7fd fea8 	bl	80a00bc <__cxa_guard_acquire>
 80a236c:	b168      	cbz	r0, 80a238a <_Z19__fetch_global_Wirev+0x36>
 80a236e:	a801      	add	r0, sp, #4
 80a2370:	f7ff ffd8 	bl	80a2324 <_Z17acquireWireBufferv>
 80a2374:	4621      	mov	r1, r4
 80a2376:	aa01      	add	r2, sp, #4
 80a2378:	4806      	ldr	r0, [pc, #24]	; (80a2394 <_Z19__fetch_global_Wirev+0x40>)
 80a237a:	f7ff fe27 	bl	80a1fcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a237e:	4628      	mov	r0, r5
 80a2380:	f7fd fea1 	bl	80a00c6 <__cxa_guard_release>
 80a2384:	4804      	ldr	r0, [pc, #16]	; (80a2398 <_Z19__fetch_global_Wirev+0x44>)
 80a2386:	f000 ff6f 	bl	80a3268 <atexit>
	return wire;
}
 80a238a:	4802      	ldr	r0, [pc, #8]	; (80a2394 <_Z19__fetch_global_Wirev+0x40>)
 80a238c:	b007      	add	sp, #28
 80a238e:	bd30      	pop	{r4, r5, pc}
 80a2390:	200005ac 	.word	0x200005ac
 80a2394:	200005b0 	.word	0x200005b0
 80a2398:	080a2321 	.word	0x080a2321

080a239c <_ZdlPvj>:
 80a239c:	f7fd be81 	b.w	80a00a2 <_ZdlPv>

080a23a0 <_ZnajRKSt9nothrow_t>:
 80a23a0:	f7fd be7d 	b.w	80a009e <_Znaj>

080a23a4 <__aeabi_drsub>:
 80a23a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a23a8:	e002      	b.n	80a23b0 <__adddf3>
 80a23aa:	bf00      	nop

080a23ac <__aeabi_dsub>:
 80a23ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a23b0 <__adddf3>:
 80a23b0:	b530      	push	{r4, r5, lr}
 80a23b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a23b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a23ba:	ea94 0f05 	teq	r4, r5
 80a23be:	bf08      	it	eq
 80a23c0:	ea90 0f02 	teqeq	r0, r2
 80a23c4:	bf1f      	itttt	ne
 80a23c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a23ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a23ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a23d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a23d6:	f000 80e2 	beq.w	80a259e <__adddf3+0x1ee>
 80a23da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a23de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a23e2:	bfb8      	it	lt
 80a23e4:	426d      	neglt	r5, r5
 80a23e6:	dd0c      	ble.n	80a2402 <__adddf3+0x52>
 80a23e8:	442c      	add	r4, r5
 80a23ea:	ea80 0202 	eor.w	r2, r0, r2
 80a23ee:	ea81 0303 	eor.w	r3, r1, r3
 80a23f2:	ea82 0000 	eor.w	r0, r2, r0
 80a23f6:	ea83 0101 	eor.w	r1, r3, r1
 80a23fa:	ea80 0202 	eor.w	r2, r0, r2
 80a23fe:	ea81 0303 	eor.w	r3, r1, r3
 80a2402:	2d36      	cmp	r5, #54	; 0x36
 80a2404:	bf88      	it	hi
 80a2406:	bd30      	pophi	{r4, r5, pc}
 80a2408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a240c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2418:	d002      	beq.n	80a2420 <__adddf3+0x70>
 80a241a:	4240      	negs	r0, r0
 80a241c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a242c:	d002      	beq.n	80a2434 <__adddf3+0x84>
 80a242e:	4252      	negs	r2, r2
 80a2430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2434:	ea94 0f05 	teq	r4, r5
 80a2438:	f000 80a7 	beq.w	80a258a <__adddf3+0x1da>
 80a243c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2440:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2444:	db0d      	blt.n	80a2462 <__adddf3+0xb2>
 80a2446:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a244a:	fa22 f205 	lsr.w	r2, r2, r5
 80a244e:	1880      	adds	r0, r0, r2
 80a2450:	f141 0100 	adc.w	r1, r1, #0
 80a2454:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2458:	1880      	adds	r0, r0, r2
 80a245a:	fa43 f305 	asr.w	r3, r3, r5
 80a245e:	4159      	adcs	r1, r3
 80a2460:	e00e      	b.n	80a2480 <__adddf3+0xd0>
 80a2462:	f1a5 0520 	sub.w	r5, r5, #32
 80a2466:	f10e 0e20 	add.w	lr, lr, #32
 80a246a:	2a01      	cmp	r2, #1
 80a246c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2470:	bf28      	it	cs
 80a2472:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2476:	fa43 f305 	asr.w	r3, r3, r5
 80a247a:	18c0      	adds	r0, r0, r3
 80a247c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2484:	d507      	bpl.n	80a2496 <__adddf3+0xe6>
 80a2486:	f04f 0e00 	mov.w	lr, #0
 80a248a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a248e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2492:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a249a:	d31b      	bcc.n	80a24d4 <__adddf3+0x124>
 80a249c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a24a0:	d30c      	bcc.n	80a24bc <__adddf3+0x10c>
 80a24a2:	0849      	lsrs	r1, r1, #1
 80a24a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a24a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a24ac:	f104 0401 	add.w	r4, r4, #1
 80a24b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a24b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a24b8:	f080 809a 	bcs.w	80a25f0 <__adddf3+0x240>
 80a24bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a24c0:	bf08      	it	eq
 80a24c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a24c6:	f150 0000 	adcs.w	r0, r0, #0
 80a24ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a24ce:	ea41 0105 	orr.w	r1, r1, r5
 80a24d2:	bd30      	pop	{r4, r5, pc}
 80a24d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a24d8:	4140      	adcs	r0, r0
 80a24da:	eb41 0101 	adc.w	r1, r1, r1
 80a24de:	3c01      	subs	r4, #1
 80a24e0:	bf28      	it	cs
 80a24e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a24e6:	d2e9      	bcs.n	80a24bc <__adddf3+0x10c>
 80a24e8:	f091 0f00 	teq	r1, #0
 80a24ec:	bf04      	itt	eq
 80a24ee:	4601      	moveq	r1, r0
 80a24f0:	2000      	moveq	r0, #0
 80a24f2:	fab1 f381 	clz	r3, r1
 80a24f6:	bf08      	it	eq
 80a24f8:	3320      	addeq	r3, #32
 80a24fa:	f1a3 030b 	sub.w	r3, r3, #11
 80a24fe:	f1b3 0220 	subs.w	r2, r3, #32
 80a2502:	da0c      	bge.n	80a251e <__adddf3+0x16e>
 80a2504:	320c      	adds	r2, #12
 80a2506:	dd08      	ble.n	80a251a <__adddf3+0x16a>
 80a2508:	f102 0c14 	add.w	ip, r2, #20
 80a250c:	f1c2 020c 	rsb	r2, r2, #12
 80a2510:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2514:	fa21 f102 	lsr.w	r1, r1, r2
 80a2518:	e00c      	b.n	80a2534 <__adddf3+0x184>
 80a251a:	f102 0214 	add.w	r2, r2, #20
 80a251e:	bfd8      	it	le
 80a2520:	f1c2 0c20 	rsble	ip, r2, #32
 80a2524:	fa01 f102 	lsl.w	r1, r1, r2
 80a2528:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a252c:	bfdc      	itt	le
 80a252e:	ea41 010c 	orrle.w	r1, r1, ip
 80a2532:	4090      	lslle	r0, r2
 80a2534:	1ae4      	subs	r4, r4, r3
 80a2536:	bfa2      	ittt	ge
 80a2538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a253c:	4329      	orrge	r1, r5
 80a253e:	bd30      	popge	{r4, r5, pc}
 80a2540:	ea6f 0404 	mvn.w	r4, r4
 80a2544:	3c1f      	subs	r4, #31
 80a2546:	da1c      	bge.n	80a2582 <__adddf3+0x1d2>
 80a2548:	340c      	adds	r4, #12
 80a254a:	dc0e      	bgt.n	80a256a <__adddf3+0x1ba>
 80a254c:	f104 0414 	add.w	r4, r4, #20
 80a2550:	f1c4 0220 	rsb	r2, r4, #32
 80a2554:	fa20 f004 	lsr.w	r0, r0, r4
 80a2558:	fa01 f302 	lsl.w	r3, r1, r2
 80a255c:	ea40 0003 	orr.w	r0, r0, r3
 80a2560:	fa21 f304 	lsr.w	r3, r1, r4
 80a2564:	ea45 0103 	orr.w	r1, r5, r3
 80a2568:	bd30      	pop	{r4, r5, pc}
 80a256a:	f1c4 040c 	rsb	r4, r4, #12
 80a256e:	f1c4 0220 	rsb	r2, r4, #32
 80a2572:	fa20 f002 	lsr.w	r0, r0, r2
 80a2576:	fa01 f304 	lsl.w	r3, r1, r4
 80a257a:	ea40 0003 	orr.w	r0, r0, r3
 80a257e:	4629      	mov	r1, r5
 80a2580:	bd30      	pop	{r4, r5, pc}
 80a2582:	fa21 f004 	lsr.w	r0, r1, r4
 80a2586:	4629      	mov	r1, r5
 80a2588:	bd30      	pop	{r4, r5, pc}
 80a258a:	f094 0f00 	teq	r4, #0
 80a258e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2592:	bf06      	itte	eq
 80a2594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2598:	3401      	addeq	r4, #1
 80a259a:	3d01      	subne	r5, #1
 80a259c:	e74e      	b.n	80a243c <__adddf3+0x8c>
 80a259e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a25a2:	bf18      	it	ne
 80a25a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a25a8:	d029      	beq.n	80a25fe <__adddf3+0x24e>
 80a25aa:	ea94 0f05 	teq	r4, r5
 80a25ae:	bf08      	it	eq
 80a25b0:	ea90 0f02 	teqeq	r0, r2
 80a25b4:	d005      	beq.n	80a25c2 <__adddf3+0x212>
 80a25b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a25ba:	bf04      	itt	eq
 80a25bc:	4619      	moveq	r1, r3
 80a25be:	4610      	moveq	r0, r2
 80a25c0:	bd30      	pop	{r4, r5, pc}
 80a25c2:	ea91 0f03 	teq	r1, r3
 80a25c6:	bf1e      	ittt	ne
 80a25c8:	2100      	movne	r1, #0
 80a25ca:	2000      	movne	r0, #0
 80a25cc:	bd30      	popne	{r4, r5, pc}
 80a25ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a25d2:	d105      	bne.n	80a25e0 <__adddf3+0x230>
 80a25d4:	0040      	lsls	r0, r0, #1
 80a25d6:	4149      	adcs	r1, r1
 80a25d8:	bf28      	it	cs
 80a25da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a25de:	bd30      	pop	{r4, r5, pc}
 80a25e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a25e4:	bf3c      	itt	cc
 80a25e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a25ea:	bd30      	popcc	{r4, r5, pc}
 80a25ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a25f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a25f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a25f8:	f04f 0000 	mov.w	r0, #0
 80a25fc:	bd30      	pop	{r4, r5, pc}
 80a25fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2602:	bf1a      	itte	ne
 80a2604:	4619      	movne	r1, r3
 80a2606:	4610      	movne	r0, r2
 80a2608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a260c:	bf1c      	itt	ne
 80a260e:	460b      	movne	r3, r1
 80a2610:	4602      	movne	r2, r0
 80a2612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2616:	bf06      	itte	eq
 80a2618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a261c:	ea91 0f03 	teqeq	r1, r3
 80a2620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2624:	bd30      	pop	{r4, r5, pc}
 80a2626:	bf00      	nop

080a2628 <__aeabi_ui2d>:
 80a2628:	f090 0f00 	teq	r0, #0
 80a262c:	bf04      	itt	eq
 80a262e:	2100      	moveq	r1, #0
 80a2630:	4770      	bxeq	lr
 80a2632:	b530      	push	{r4, r5, lr}
 80a2634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a263c:	f04f 0500 	mov.w	r5, #0
 80a2640:	f04f 0100 	mov.w	r1, #0
 80a2644:	e750      	b.n	80a24e8 <__adddf3+0x138>
 80a2646:	bf00      	nop

080a2648 <__aeabi_i2d>:
 80a2648:	f090 0f00 	teq	r0, #0
 80a264c:	bf04      	itt	eq
 80a264e:	2100      	moveq	r1, #0
 80a2650:	4770      	bxeq	lr
 80a2652:	b530      	push	{r4, r5, lr}
 80a2654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a265c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2660:	bf48      	it	mi
 80a2662:	4240      	negmi	r0, r0
 80a2664:	f04f 0100 	mov.w	r1, #0
 80a2668:	e73e      	b.n	80a24e8 <__adddf3+0x138>
 80a266a:	bf00      	nop

080a266c <__aeabi_f2d>:
 80a266c:	0042      	lsls	r2, r0, #1
 80a266e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2672:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a267a:	bf1f      	itttt	ne
 80a267c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2688:	4770      	bxne	lr
 80a268a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a268e:	bf08      	it	eq
 80a2690:	4770      	bxeq	lr
 80a2692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2696:	bf04      	itt	eq
 80a2698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a269c:	4770      	bxeq	lr
 80a269e:	b530      	push	{r4, r5, lr}
 80a26a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a26a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a26a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a26ac:	e71c      	b.n	80a24e8 <__adddf3+0x138>
 80a26ae:	bf00      	nop

080a26b0 <__aeabi_ul2d>:
 80a26b0:	ea50 0201 	orrs.w	r2, r0, r1
 80a26b4:	bf08      	it	eq
 80a26b6:	4770      	bxeq	lr
 80a26b8:	b530      	push	{r4, r5, lr}
 80a26ba:	f04f 0500 	mov.w	r5, #0
 80a26be:	e00a      	b.n	80a26d6 <__aeabi_l2d+0x16>

080a26c0 <__aeabi_l2d>:
 80a26c0:	ea50 0201 	orrs.w	r2, r0, r1
 80a26c4:	bf08      	it	eq
 80a26c6:	4770      	bxeq	lr
 80a26c8:	b530      	push	{r4, r5, lr}
 80a26ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a26ce:	d502      	bpl.n	80a26d6 <__aeabi_l2d+0x16>
 80a26d0:	4240      	negs	r0, r0
 80a26d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a26d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a26da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a26de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a26e2:	f43f aed8 	beq.w	80a2496 <__adddf3+0xe6>
 80a26e6:	f04f 0203 	mov.w	r2, #3
 80a26ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a26ee:	bf18      	it	ne
 80a26f0:	3203      	addne	r2, #3
 80a26f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a26f6:	bf18      	it	ne
 80a26f8:	3203      	addne	r2, #3
 80a26fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a26fe:	f1c2 0320 	rsb	r3, r2, #32
 80a2702:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2706:	fa20 f002 	lsr.w	r0, r0, r2
 80a270a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a270e:	ea40 000e 	orr.w	r0, r0, lr
 80a2712:	fa21 f102 	lsr.w	r1, r1, r2
 80a2716:	4414      	add	r4, r2
 80a2718:	e6bd      	b.n	80a2496 <__adddf3+0xe6>
 80a271a:	bf00      	nop

080a271c <__aeabi_dmul>:
 80a271c:	b570      	push	{r4, r5, r6, lr}
 80a271e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a272a:	bf1d      	ittte	ne
 80a272c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2730:	ea94 0f0c 	teqne	r4, ip
 80a2734:	ea95 0f0c 	teqne	r5, ip
 80a2738:	f000 f8de 	bleq	80a28f8 <__aeabi_dmul+0x1dc>
 80a273c:	442c      	add	r4, r5
 80a273e:	ea81 0603 	eor.w	r6, r1, r3
 80a2742:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2746:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a274a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a274e:	bf18      	it	ne
 80a2750:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a275c:	d038      	beq.n	80a27d0 <__aeabi_dmul+0xb4>
 80a275e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2762:	f04f 0500 	mov.w	r5, #0
 80a2766:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a276a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a276e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2772:	f04f 0600 	mov.w	r6, #0
 80a2776:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a277a:	f09c 0f00 	teq	ip, #0
 80a277e:	bf18      	it	ne
 80a2780:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2784:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2788:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a278c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2790:	d204      	bcs.n	80a279c <__aeabi_dmul+0x80>
 80a2792:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2796:	416d      	adcs	r5, r5
 80a2798:	eb46 0606 	adc.w	r6, r6, r6
 80a279c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a27a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a27a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a27a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a27ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a27b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a27b4:	bf88      	it	hi
 80a27b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a27ba:	d81e      	bhi.n	80a27fa <__aeabi_dmul+0xde>
 80a27bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a27c0:	bf08      	it	eq
 80a27c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a27c6:	f150 0000 	adcs.w	r0, r0, #0
 80a27ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a27ce:	bd70      	pop	{r4, r5, r6, pc}
 80a27d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a27d4:	ea46 0101 	orr.w	r1, r6, r1
 80a27d8:	ea40 0002 	orr.w	r0, r0, r2
 80a27dc:	ea81 0103 	eor.w	r1, r1, r3
 80a27e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a27e4:	bfc2      	ittt	gt
 80a27e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a27ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a27ee:	bd70      	popgt	{r4, r5, r6, pc}
 80a27f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a27f4:	f04f 0e00 	mov.w	lr, #0
 80a27f8:	3c01      	subs	r4, #1
 80a27fa:	f300 80ab 	bgt.w	80a2954 <__aeabi_dmul+0x238>
 80a27fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2802:	bfde      	ittt	le
 80a2804:	2000      	movle	r0, #0
 80a2806:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a280a:	bd70      	pople	{r4, r5, r6, pc}
 80a280c:	f1c4 0400 	rsb	r4, r4, #0
 80a2810:	3c20      	subs	r4, #32
 80a2812:	da35      	bge.n	80a2880 <__aeabi_dmul+0x164>
 80a2814:	340c      	adds	r4, #12
 80a2816:	dc1b      	bgt.n	80a2850 <__aeabi_dmul+0x134>
 80a2818:	f104 0414 	add.w	r4, r4, #20
 80a281c:	f1c4 0520 	rsb	r5, r4, #32
 80a2820:	fa00 f305 	lsl.w	r3, r0, r5
 80a2824:	fa20 f004 	lsr.w	r0, r0, r4
 80a2828:	fa01 f205 	lsl.w	r2, r1, r5
 80a282c:	ea40 0002 	orr.w	r0, r0, r2
 80a2830:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2834:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a283c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2840:	eb42 0106 	adc.w	r1, r2, r6
 80a2844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2848:	bf08      	it	eq
 80a284a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a284e:	bd70      	pop	{r4, r5, r6, pc}
 80a2850:	f1c4 040c 	rsb	r4, r4, #12
 80a2854:	f1c4 0520 	rsb	r5, r4, #32
 80a2858:	fa00 f304 	lsl.w	r3, r0, r4
 80a285c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2860:	fa01 f204 	lsl.w	r2, r1, r4
 80a2864:	ea40 0002 	orr.w	r0, r0, r2
 80a2868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a286c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2870:	f141 0100 	adc.w	r1, r1, #0
 80a2874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2878:	bf08      	it	eq
 80a287a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a287e:	bd70      	pop	{r4, r5, r6, pc}
 80a2880:	f1c4 0520 	rsb	r5, r4, #32
 80a2884:	fa00 f205 	lsl.w	r2, r0, r5
 80a2888:	ea4e 0e02 	orr.w	lr, lr, r2
 80a288c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2890:	fa01 f205 	lsl.w	r2, r1, r5
 80a2894:	ea43 0302 	orr.w	r3, r3, r2
 80a2898:	fa21 f004 	lsr.w	r0, r1, r4
 80a289c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a28a0:	fa21 f204 	lsr.w	r2, r1, r4
 80a28a4:	ea20 0002 	bic.w	r0, r0, r2
 80a28a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a28ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a28b0:	bf08      	it	eq
 80a28b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a28b6:	bd70      	pop	{r4, r5, r6, pc}
 80a28b8:	f094 0f00 	teq	r4, #0
 80a28bc:	d10f      	bne.n	80a28de <__aeabi_dmul+0x1c2>
 80a28be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a28c2:	0040      	lsls	r0, r0, #1
 80a28c4:	eb41 0101 	adc.w	r1, r1, r1
 80a28c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a28cc:	bf08      	it	eq
 80a28ce:	3c01      	subeq	r4, #1
 80a28d0:	d0f7      	beq.n	80a28c2 <__aeabi_dmul+0x1a6>
 80a28d2:	ea41 0106 	orr.w	r1, r1, r6
 80a28d6:	f095 0f00 	teq	r5, #0
 80a28da:	bf18      	it	ne
 80a28dc:	4770      	bxne	lr
 80a28de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a28e2:	0052      	lsls	r2, r2, #1
 80a28e4:	eb43 0303 	adc.w	r3, r3, r3
 80a28e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a28ec:	bf08      	it	eq
 80a28ee:	3d01      	subeq	r5, #1
 80a28f0:	d0f7      	beq.n	80a28e2 <__aeabi_dmul+0x1c6>
 80a28f2:	ea43 0306 	orr.w	r3, r3, r6
 80a28f6:	4770      	bx	lr
 80a28f8:	ea94 0f0c 	teq	r4, ip
 80a28fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2900:	bf18      	it	ne
 80a2902:	ea95 0f0c 	teqne	r5, ip
 80a2906:	d00c      	beq.n	80a2922 <__aeabi_dmul+0x206>
 80a2908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a290c:	bf18      	it	ne
 80a290e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2912:	d1d1      	bne.n	80a28b8 <__aeabi_dmul+0x19c>
 80a2914:	ea81 0103 	eor.w	r1, r1, r3
 80a2918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a291c:	f04f 0000 	mov.w	r0, #0
 80a2920:	bd70      	pop	{r4, r5, r6, pc}
 80a2922:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2926:	bf06      	itte	eq
 80a2928:	4610      	moveq	r0, r2
 80a292a:	4619      	moveq	r1, r3
 80a292c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2930:	d019      	beq.n	80a2966 <__aeabi_dmul+0x24a>
 80a2932:	ea94 0f0c 	teq	r4, ip
 80a2936:	d102      	bne.n	80a293e <__aeabi_dmul+0x222>
 80a2938:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a293c:	d113      	bne.n	80a2966 <__aeabi_dmul+0x24a>
 80a293e:	ea95 0f0c 	teq	r5, ip
 80a2942:	d105      	bne.n	80a2950 <__aeabi_dmul+0x234>
 80a2944:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2948:	bf1c      	itt	ne
 80a294a:	4610      	movne	r0, r2
 80a294c:	4619      	movne	r1, r3
 80a294e:	d10a      	bne.n	80a2966 <__aeabi_dmul+0x24a>
 80a2950:	ea81 0103 	eor.w	r1, r1, r3
 80a2954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2958:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a295c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2960:	f04f 0000 	mov.w	r0, #0
 80a2964:	bd70      	pop	{r4, r5, r6, pc}
 80a2966:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a296a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a296e:	bd70      	pop	{r4, r5, r6, pc}

080a2970 <__aeabi_ddiv>:
 80a2970:	b570      	push	{r4, r5, r6, lr}
 80a2972:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2976:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a297a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a297e:	bf1d      	ittte	ne
 80a2980:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2984:	ea94 0f0c 	teqne	r4, ip
 80a2988:	ea95 0f0c 	teqne	r5, ip
 80a298c:	f000 f8a7 	bleq	80a2ade <__aeabi_ddiv+0x16e>
 80a2990:	eba4 0405 	sub.w	r4, r4, r5
 80a2994:	ea81 0e03 	eor.w	lr, r1, r3
 80a2998:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a299c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a29a0:	f000 8088 	beq.w	80a2ab4 <__aeabi_ddiv+0x144>
 80a29a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a29a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a29ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a29b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a29b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a29b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a29bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a29c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a29c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a29c8:	429d      	cmp	r5, r3
 80a29ca:	bf08      	it	eq
 80a29cc:	4296      	cmpeq	r6, r2
 80a29ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a29d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a29d6:	d202      	bcs.n	80a29de <__aeabi_ddiv+0x6e>
 80a29d8:	085b      	lsrs	r3, r3, #1
 80a29da:	ea4f 0232 	mov.w	r2, r2, rrx
 80a29de:	1ab6      	subs	r6, r6, r2
 80a29e0:	eb65 0503 	sbc.w	r5, r5, r3
 80a29e4:	085b      	lsrs	r3, r3, #1
 80a29e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a29ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a29ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a29f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a29f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a29fa:	bf22      	ittt	cs
 80a29fc:	1ab6      	subcs	r6, r6, r2
 80a29fe:	4675      	movcs	r5, lr
 80a2a00:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2a04:	085b      	lsrs	r3, r3, #1
 80a2a06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2a12:	bf22      	ittt	cs
 80a2a14:	1ab6      	subcs	r6, r6, r2
 80a2a16:	4675      	movcs	r5, lr
 80a2a18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2a1c:	085b      	lsrs	r3, r3, #1
 80a2a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a22:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2a2a:	bf22      	ittt	cs
 80a2a2c:	1ab6      	subcs	r6, r6, r2
 80a2a2e:	4675      	movcs	r5, lr
 80a2a30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2a34:	085b      	lsrs	r3, r3, #1
 80a2a36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2a42:	bf22      	ittt	cs
 80a2a44:	1ab6      	subcs	r6, r6, r2
 80a2a46:	4675      	movcs	r5, lr
 80a2a48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2a4c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2a50:	d018      	beq.n	80a2a84 <__aeabi_ddiv+0x114>
 80a2a52:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2a56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2a5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2a5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2a62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2a66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2a6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2a6e:	d1c0      	bne.n	80a29f2 <__aeabi_ddiv+0x82>
 80a2a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2a74:	d10b      	bne.n	80a2a8e <__aeabi_ddiv+0x11e>
 80a2a76:	ea41 0100 	orr.w	r1, r1, r0
 80a2a7a:	f04f 0000 	mov.w	r0, #0
 80a2a7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2a82:	e7b6      	b.n	80a29f2 <__aeabi_ddiv+0x82>
 80a2a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2a88:	bf04      	itt	eq
 80a2a8a:	4301      	orreq	r1, r0
 80a2a8c:	2000      	moveq	r0, #0
 80a2a8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2a92:	bf88      	it	hi
 80a2a94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2a98:	f63f aeaf 	bhi.w	80a27fa <__aeabi_dmul+0xde>
 80a2a9c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2aa0:	bf04      	itt	eq
 80a2aa2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2aa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2aaa:	f150 0000 	adcs.w	r0, r0, #0
 80a2aae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2ab2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ab4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2ab8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2abc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2ac0:	bfc2      	ittt	gt
 80a2ac2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2ac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2aca:	bd70      	popgt	{r4, r5, r6, pc}
 80a2acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ad0:	f04f 0e00 	mov.w	lr, #0
 80a2ad4:	3c01      	subs	r4, #1
 80a2ad6:	e690      	b.n	80a27fa <__aeabi_dmul+0xde>
 80a2ad8:	ea45 0e06 	orr.w	lr, r5, r6
 80a2adc:	e68d      	b.n	80a27fa <__aeabi_dmul+0xde>
 80a2ade:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2ae2:	ea94 0f0c 	teq	r4, ip
 80a2ae6:	bf08      	it	eq
 80a2ae8:	ea95 0f0c 	teqeq	r5, ip
 80a2aec:	f43f af3b 	beq.w	80a2966 <__aeabi_dmul+0x24a>
 80a2af0:	ea94 0f0c 	teq	r4, ip
 80a2af4:	d10a      	bne.n	80a2b0c <__aeabi_ddiv+0x19c>
 80a2af6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2afa:	f47f af34 	bne.w	80a2966 <__aeabi_dmul+0x24a>
 80a2afe:	ea95 0f0c 	teq	r5, ip
 80a2b02:	f47f af25 	bne.w	80a2950 <__aeabi_dmul+0x234>
 80a2b06:	4610      	mov	r0, r2
 80a2b08:	4619      	mov	r1, r3
 80a2b0a:	e72c      	b.n	80a2966 <__aeabi_dmul+0x24a>
 80a2b0c:	ea95 0f0c 	teq	r5, ip
 80a2b10:	d106      	bne.n	80a2b20 <__aeabi_ddiv+0x1b0>
 80a2b12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2b16:	f43f aefd 	beq.w	80a2914 <__aeabi_dmul+0x1f8>
 80a2b1a:	4610      	mov	r0, r2
 80a2b1c:	4619      	mov	r1, r3
 80a2b1e:	e722      	b.n	80a2966 <__aeabi_dmul+0x24a>
 80a2b20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b24:	bf18      	it	ne
 80a2b26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b2a:	f47f aec5 	bne.w	80a28b8 <__aeabi_dmul+0x19c>
 80a2b2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2b32:	f47f af0d 	bne.w	80a2950 <__aeabi_dmul+0x234>
 80a2b36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2b3a:	f47f aeeb 	bne.w	80a2914 <__aeabi_dmul+0x1f8>
 80a2b3e:	e712      	b.n	80a2966 <__aeabi_dmul+0x24a>

080a2b40 <__gedf2>:
 80a2b40:	f04f 3cff 	mov.w	ip, #4294967295
 80a2b44:	e006      	b.n	80a2b54 <__cmpdf2+0x4>
 80a2b46:	bf00      	nop

080a2b48 <__ledf2>:
 80a2b48:	f04f 0c01 	mov.w	ip, #1
 80a2b4c:	e002      	b.n	80a2b54 <__cmpdf2+0x4>
 80a2b4e:	bf00      	nop

080a2b50 <__cmpdf2>:
 80a2b50:	f04f 0c01 	mov.w	ip, #1
 80a2b54:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2b58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2b64:	bf18      	it	ne
 80a2b66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2b6a:	d01b      	beq.n	80a2ba4 <__cmpdf2+0x54>
 80a2b6c:	b001      	add	sp, #4
 80a2b6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2b72:	bf0c      	ite	eq
 80a2b74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2b78:	ea91 0f03 	teqne	r1, r3
 80a2b7c:	bf02      	ittt	eq
 80a2b7e:	ea90 0f02 	teqeq	r0, r2
 80a2b82:	2000      	moveq	r0, #0
 80a2b84:	4770      	bxeq	lr
 80a2b86:	f110 0f00 	cmn.w	r0, #0
 80a2b8a:	ea91 0f03 	teq	r1, r3
 80a2b8e:	bf58      	it	pl
 80a2b90:	4299      	cmppl	r1, r3
 80a2b92:	bf08      	it	eq
 80a2b94:	4290      	cmpeq	r0, r2
 80a2b96:	bf2c      	ite	cs
 80a2b98:	17d8      	asrcs	r0, r3, #31
 80a2b9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2b9e:	f040 0001 	orr.w	r0, r0, #1
 80a2ba2:	4770      	bx	lr
 80a2ba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2bac:	d102      	bne.n	80a2bb4 <__cmpdf2+0x64>
 80a2bae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2bb2:	d107      	bne.n	80a2bc4 <__cmpdf2+0x74>
 80a2bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2bbc:	d1d6      	bne.n	80a2b6c <__cmpdf2+0x1c>
 80a2bbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2bc2:	d0d3      	beq.n	80a2b6c <__cmpdf2+0x1c>
 80a2bc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2bc8:	4770      	bx	lr
 80a2bca:	bf00      	nop

080a2bcc <__aeabi_cdrcmple>:
 80a2bcc:	4684      	mov	ip, r0
 80a2bce:	4610      	mov	r0, r2
 80a2bd0:	4662      	mov	r2, ip
 80a2bd2:	468c      	mov	ip, r1
 80a2bd4:	4619      	mov	r1, r3
 80a2bd6:	4663      	mov	r3, ip
 80a2bd8:	e000      	b.n	80a2bdc <__aeabi_cdcmpeq>
 80a2bda:	bf00      	nop

080a2bdc <__aeabi_cdcmpeq>:
 80a2bdc:	b501      	push	{r0, lr}
 80a2bde:	f7ff ffb7 	bl	80a2b50 <__cmpdf2>
 80a2be2:	2800      	cmp	r0, #0
 80a2be4:	bf48      	it	mi
 80a2be6:	f110 0f00 	cmnmi.w	r0, #0
 80a2bea:	bd01      	pop	{r0, pc}

080a2bec <__aeabi_dcmpeq>:
 80a2bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2bf0:	f7ff fff4 	bl	80a2bdc <__aeabi_cdcmpeq>
 80a2bf4:	bf0c      	ite	eq
 80a2bf6:	2001      	moveq	r0, #1
 80a2bf8:	2000      	movne	r0, #0
 80a2bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2bfe:	bf00      	nop

080a2c00 <__aeabi_dcmplt>:
 80a2c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c04:	f7ff ffea 	bl	80a2bdc <__aeabi_cdcmpeq>
 80a2c08:	bf34      	ite	cc
 80a2c0a:	2001      	movcc	r0, #1
 80a2c0c:	2000      	movcs	r0, #0
 80a2c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c12:	bf00      	nop

080a2c14 <__aeabi_dcmple>:
 80a2c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c18:	f7ff ffe0 	bl	80a2bdc <__aeabi_cdcmpeq>
 80a2c1c:	bf94      	ite	ls
 80a2c1e:	2001      	movls	r0, #1
 80a2c20:	2000      	movhi	r0, #0
 80a2c22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c26:	bf00      	nop

080a2c28 <__aeabi_dcmpge>:
 80a2c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c2c:	f7ff ffce 	bl	80a2bcc <__aeabi_cdrcmple>
 80a2c30:	bf94      	ite	ls
 80a2c32:	2001      	movls	r0, #1
 80a2c34:	2000      	movhi	r0, #0
 80a2c36:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c3a:	bf00      	nop

080a2c3c <__aeabi_dcmpgt>:
 80a2c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c40:	f7ff ffc4 	bl	80a2bcc <__aeabi_cdrcmple>
 80a2c44:	bf34      	ite	cc
 80a2c46:	2001      	movcc	r0, #1
 80a2c48:	2000      	movcs	r0, #0
 80a2c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c4e:	bf00      	nop

080a2c50 <__aeabi_dcmpun>:
 80a2c50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2c54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c58:	d102      	bne.n	80a2c60 <__aeabi_dcmpun+0x10>
 80a2c5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2c5e:	d10a      	bne.n	80a2c76 <__aeabi_dcmpun+0x26>
 80a2c60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c68:	d102      	bne.n	80a2c70 <__aeabi_dcmpun+0x20>
 80a2c6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2c6e:	d102      	bne.n	80a2c76 <__aeabi_dcmpun+0x26>
 80a2c70:	f04f 0000 	mov.w	r0, #0
 80a2c74:	4770      	bx	lr
 80a2c76:	f04f 0001 	mov.w	r0, #1
 80a2c7a:	4770      	bx	lr

080a2c7c <__aeabi_d2iz>:
 80a2c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2c80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2c84:	d215      	bcs.n	80a2cb2 <__aeabi_d2iz+0x36>
 80a2c86:	d511      	bpl.n	80a2cac <__aeabi_d2iz+0x30>
 80a2c88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2c8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2c90:	d912      	bls.n	80a2cb8 <__aeabi_d2iz+0x3c>
 80a2c92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2c9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2ca2:	fa23 f002 	lsr.w	r0, r3, r2
 80a2ca6:	bf18      	it	ne
 80a2ca8:	4240      	negne	r0, r0
 80a2caa:	4770      	bx	lr
 80a2cac:	f04f 0000 	mov.w	r0, #0
 80a2cb0:	4770      	bx	lr
 80a2cb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2cb6:	d105      	bne.n	80a2cc4 <__aeabi_d2iz+0x48>
 80a2cb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2cbc:	bf08      	it	eq
 80a2cbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2cc2:	4770      	bx	lr
 80a2cc4:	f04f 0000 	mov.w	r0, #0
 80a2cc8:	4770      	bx	lr
 80a2cca:	bf00      	nop

080a2ccc <__aeabi_d2uiz>:
 80a2ccc:	004a      	lsls	r2, r1, #1
 80a2cce:	d211      	bcs.n	80a2cf4 <__aeabi_d2uiz+0x28>
 80a2cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2cd4:	d211      	bcs.n	80a2cfa <__aeabi_d2uiz+0x2e>
 80a2cd6:	d50d      	bpl.n	80a2cf4 <__aeabi_d2uiz+0x28>
 80a2cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2ce0:	d40e      	bmi.n	80a2d00 <__aeabi_d2uiz+0x34>
 80a2ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2cee:	fa23 f002 	lsr.w	r0, r3, r2
 80a2cf2:	4770      	bx	lr
 80a2cf4:	f04f 0000 	mov.w	r0, #0
 80a2cf8:	4770      	bx	lr
 80a2cfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2cfe:	d102      	bne.n	80a2d06 <__aeabi_d2uiz+0x3a>
 80a2d00:	f04f 30ff 	mov.w	r0, #4294967295
 80a2d04:	4770      	bx	lr
 80a2d06:	f04f 0000 	mov.w	r0, #0
 80a2d0a:	4770      	bx	lr

080a2d0c <__aeabi_d2f>:
 80a2d0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2d10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2d14:	bf24      	itt	cs
 80a2d16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2d1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a2d1e:	d90d      	bls.n	80a2d3c <__aeabi_d2f+0x30>
 80a2d20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2d24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2d28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2d2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2d30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2d34:	bf08      	it	eq
 80a2d36:	f020 0001 	biceq.w	r0, r0, #1
 80a2d3a:	4770      	bx	lr
 80a2d3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2d40:	d121      	bne.n	80a2d86 <__aeabi_d2f+0x7a>
 80a2d42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2d46:	bfbc      	itt	lt
 80a2d48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2d4c:	4770      	bxlt	lr
 80a2d4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2d56:	f1c2 0218 	rsb	r2, r2, #24
 80a2d5a:	f1c2 0c20 	rsb	ip, r2, #32
 80a2d5e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2d62:	fa20 f002 	lsr.w	r0, r0, r2
 80a2d66:	bf18      	it	ne
 80a2d68:	f040 0001 	orrne.w	r0, r0, #1
 80a2d6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2d74:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2d78:	ea40 000c 	orr.w	r0, r0, ip
 80a2d7c:	fa23 f302 	lsr.w	r3, r3, r2
 80a2d80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2d84:	e7cc      	b.n	80a2d20 <__aeabi_d2f+0x14>
 80a2d86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2d8a:	d107      	bne.n	80a2d9c <__aeabi_d2f+0x90>
 80a2d8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2d90:	bf1e      	ittt	ne
 80a2d92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2d96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2d9a:	4770      	bxne	lr
 80a2d9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2da0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2da8:	4770      	bx	lr
 80a2daa:	bf00      	nop

080a2dac <__aeabi_frsub>:
 80a2dac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2db0:	e002      	b.n	80a2db8 <__addsf3>
 80a2db2:	bf00      	nop

080a2db4 <__aeabi_fsub>:
 80a2db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2db8 <__addsf3>:
 80a2db8:	0042      	lsls	r2, r0, #1
 80a2dba:	bf1f      	itttt	ne
 80a2dbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2dc0:	ea92 0f03 	teqne	r2, r3
 80a2dc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2dc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2dcc:	d06a      	beq.n	80a2ea4 <__addsf3+0xec>
 80a2dce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2dd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2dd6:	bfc1      	itttt	gt
 80a2dd8:	18d2      	addgt	r2, r2, r3
 80a2dda:	4041      	eorgt	r1, r0
 80a2ddc:	4048      	eorgt	r0, r1
 80a2dde:	4041      	eorgt	r1, r0
 80a2de0:	bfb8      	it	lt
 80a2de2:	425b      	neglt	r3, r3
 80a2de4:	2b19      	cmp	r3, #25
 80a2de6:	bf88      	it	hi
 80a2de8:	4770      	bxhi	lr
 80a2dea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2df6:	bf18      	it	ne
 80a2df8:	4240      	negne	r0, r0
 80a2dfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2dfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2e02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2e06:	bf18      	it	ne
 80a2e08:	4249      	negne	r1, r1
 80a2e0a:	ea92 0f03 	teq	r2, r3
 80a2e0e:	d03f      	beq.n	80a2e90 <__addsf3+0xd8>
 80a2e10:	f1a2 0201 	sub.w	r2, r2, #1
 80a2e14:	fa41 fc03 	asr.w	ip, r1, r3
 80a2e18:	eb10 000c 	adds.w	r0, r0, ip
 80a2e1c:	f1c3 0320 	rsb	r3, r3, #32
 80a2e20:	fa01 f103 	lsl.w	r1, r1, r3
 80a2e24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2e28:	d502      	bpl.n	80a2e30 <__addsf3+0x78>
 80a2e2a:	4249      	negs	r1, r1
 80a2e2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2e30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2e34:	d313      	bcc.n	80a2e5e <__addsf3+0xa6>
 80a2e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2e3a:	d306      	bcc.n	80a2e4a <__addsf3+0x92>
 80a2e3c:	0840      	lsrs	r0, r0, #1
 80a2e3e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2e42:	f102 0201 	add.w	r2, r2, #1
 80a2e46:	2afe      	cmp	r2, #254	; 0xfe
 80a2e48:	d251      	bcs.n	80a2eee <__addsf3+0x136>
 80a2e4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2e4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2e52:	bf08      	it	eq
 80a2e54:	f020 0001 	biceq.w	r0, r0, #1
 80a2e58:	ea40 0003 	orr.w	r0, r0, r3
 80a2e5c:	4770      	bx	lr
 80a2e5e:	0049      	lsls	r1, r1, #1
 80a2e60:	eb40 0000 	adc.w	r0, r0, r0
 80a2e64:	3a01      	subs	r2, #1
 80a2e66:	bf28      	it	cs
 80a2e68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2e6c:	d2ed      	bcs.n	80a2e4a <__addsf3+0x92>
 80a2e6e:	fab0 fc80 	clz	ip, r0
 80a2e72:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2e76:	ebb2 020c 	subs.w	r2, r2, ip
 80a2e7a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2e7e:	bfaa      	itet	ge
 80a2e80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2e84:	4252      	neglt	r2, r2
 80a2e86:	4318      	orrge	r0, r3
 80a2e88:	bfbc      	itt	lt
 80a2e8a:	40d0      	lsrlt	r0, r2
 80a2e8c:	4318      	orrlt	r0, r3
 80a2e8e:	4770      	bx	lr
 80a2e90:	f092 0f00 	teq	r2, #0
 80a2e94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2e98:	bf06      	itte	eq
 80a2e9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2e9e:	3201      	addeq	r2, #1
 80a2ea0:	3b01      	subne	r3, #1
 80a2ea2:	e7b5      	b.n	80a2e10 <__addsf3+0x58>
 80a2ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2eac:	bf18      	it	ne
 80a2eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2eb2:	d021      	beq.n	80a2ef8 <__addsf3+0x140>
 80a2eb4:	ea92 0f03 	teq	r2, r3
 80a2eb8:	d004      	beq.n	80a2ec4 <__addsf3+0x10c>
 80a2eba:	f092 0f00 	teq	r2, #0
 80a2ebe:	bf08      	it	eq
 80a2ec0:	4608      	moveq	r0, r1
 80a2ec2:	4770      	bx	lr
 80a2ec4:	ea90 0f01 	teq	r0, r1
 80a2ec8:	bf1c      	itt	ne
 80a2eca:	2000      	movne	r0, #0
 80a2ecc:	4770      	bxne	lr
 80a2ece:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2ed2:	d104      	bne.n	80a2ede <__addsf3+0x126>
 80a2ed4:	0040      	lsls	r0, r0, #1
 80a2ed6:	bf28      	it	cs
 80a2ed8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2edc:	4770      	bx	lr
 80a2ede:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2ee2:	bf3c      	itt	cc
 80a2ee4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2ee8:	4770      	bxcc	lr
 80a2eea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2eee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ef6:	4770      	bx	lr
 80a2ef8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2efc:	bf16      	itet	ne
 80a2efe:	4608      	movne	r0, r1
 80a2f00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2f04:	4601      	movne	r1, r0
 80a2f06:	0242      	lsls	r2, r0, #9
 80a2f08:	bf06      	itte	eq
 80a2f0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2f0e:	ea90 0f01 	teqeq	r0, r1
 80a2f12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2f16:	4770      	bx	lr

080a2f18 <__aeabi_ui2f>:
 80a2f18:	f04f 0300 	mov.w	r3, #0
 80a2f1c:	e004      	b.n	80a2f28 <__aeabi_i2f+0x8>
 80a2f1e:	bf00      	nop

080a2f20 <__aeabi_i2f>:
 80a2f20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2f24:	bf48      	it	mi
 80a2f26:	4240      	negmi	r0, r0
 80a2f28:	ea5f 0c00 	movs.w	ip, r0
 80a2f2c:	bf08      	it	eq
 80a2f2e:	4770      	bxeq	lr
 80a2f30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2f34:	4601      	mov	r1, r0
 80a2f36:	f04f 0000 	mov.w	r0, #0
 80a2f3a:	e01c      	b.n	80a2f76 <__aeabi_l2f+0x2a>

080a2f3c <__aeabi_ul2f>:
 80a2f3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f40:	bf08      	it	eq
 80a2f42:	4770      	bxeq	lr
 80a2f44:	f04f 0300 	mov.w	r3, #0
 80a2f48:	e00a      	b.n	80a2f60 <__aeabi_l2f+0x14>
 80a2f4a:	bf00      	nop

080a2f4c <__aeabi_l2f>:
 80a2f4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f50:	bf08      	it	eq
 80a2f52:	4770      	bxeq	lr
 80a2f54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2f58:	d502      	bpl.n	80a2f60 <__aeabi_l2f+0x14>
 80a2f5a:	4240      	negs	r0, r0
 80a2f5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f60:	ea5f 0c01 	movs.w	ip, r1
 80a2f64:	bf02      	ittt	eq
 80a2f66:	4684      	moveq	ip, r0
 80a2f68:	4601      	moveq	r1, r0
 80a2f6a:	2000      	moveq	r0, #0
 80a2f6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2f70:	bf08      	it	eq
 80a2f72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2f76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2f7a:	fabc f28c 	clz	r2, ip
 80a2f7e:	3a08      	subs	r2, #8
 80a2f80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2f84:	db10      	blt.n	80a2fa8 <__aeabi_l2f+0x5c>
 80a2f86:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2f8a:	4463      	add	r3, ip
 80a2f8c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2f90:	f1c2 0220 	rsb	r2, r2, #32
 80a2f94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2f98:	fa20 f202 	lsr.w	r2, r0, r2
 80a2f9c:	eb43 0002 	adc.w	r0, r3, r2
 80a2fa0:	bf08      	it	eq
 80a2fa2:	f020 0001 	biceq.w	r0, r0, #1
 80a2fa6:	4770      	bx	lr
 80a2fa8:	f102 0220 	add.w	r2, r2, #32
 80a2fac:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2fb0:	f1c2 0220 	rsb	r2, r2, #32
 80a2fb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2fb8:	fa21 f202 	lsr.w	r2, r1, r2
 80a2fbc:	eb43 0002 	adc.w	r0, r3, r2
 80a2fc0:	bf08      	it	eq
 80a2fc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2fc6:	4770      	bx	lr

080a2fc8 <__aeabi_fmul>:
 80a2fc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2fcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2fd0:	bf1e      	ittt	ne
 80a2fd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2fd6:	ea92 0f0c 	teqne	r2, ip
 80a2fda:	ea93 0f0c 	teqne	r3, ip
 80a2fde:	d06f      	beq.n	80a30c0 <__aeabi_fmul+0xf8>
 80a2fe0:	441a      	add	r2, r3
 80a2fe2:	ea80 0c01 	eor.w	ip, r0, r1
 80a2fe6:	0240      	lsls	r0, r0, #9
 80a2fe8:	bf18      	it	ne
 80a2fea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2fee:	d01e      	beq.n	80a302e <__aeabi_fmul+0x66>
 80a2ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2ff4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2ff8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2ffc:	fba0 3101 	umull	r3, r1, r0, r1
 80a3000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3004:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3008:	bf3e      	ittt	cc
 80a300a:	0049      	lslcc	r1, r1, #1
 80a300c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3010:	005b      	lslcc	r3, r3, #1
 80a3012:	ea40 0001 	orr.w	r0, r0, r1
 80a3016:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a301a:	2afd      	cmp	r2, #253	; 0xfd
 80a301c:	d81d      	bhi.n	80a305a <__aeabi_fmul+0x92>
 80a301e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3022:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3026:	bf08      	it	eq
 80a3028:	f020 0001 	biceq.w	r0, r0, #1
 80a302c:	4770      	bx	lr
 80a302e:	f090 0f00 	teq	r0, #0
 80a3032:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3036:	bf08      	it	eq
 80a3038:	0249      	lsleq	r1, r1, #9
 80a303a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a303e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3042:	3a7f      	subs	r2, #127	; 0x7f
 80a3044:	bfc2      	ittt	gt
 80a3046:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a304a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a304e:	4770      	bxgt	lr
 80a3050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3054:	f04f 0300 	mov.w	r3, #0
 80a3058:	3a01      	subs	r2, #1
 80a305a:	dc5d      	bgt.n	80a3118 <__aeabi_fmul+0x150>
 80a305c:	f112 0f19 	cmn.w	r2, #25
 80a3060:	bfdc      	itt	le
 80a3062:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3066:	4770      	bxle	lr
 80a3068:	f1c2 0200 	rsb	r2, r2, #0
 80a306c:	0041      	lsls	r1, r0, #1
 80a306e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3072:	f1c2 0220 	rsb	r2, r2, #32
 80a3076:	fa00 fc02 	lsl.w	ip, r0, r2
 80a307a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a307e:	f140 0000 	adc.w	r0, r0, #0
 80a3082:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3086:	bf08      	it	eq
 80a3088:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a308c:	4770      	bx	lr
 80a308e:	f092 0f00 	teq	r2, #0
 80a3092:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3096:	bf02      	ittt	eq
 80a3098:	0040      	lsleq	r0, r0, #1
 80a309a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a309e:	3a01      	subeq	r2, #1
 80a30a0:	d0f9      	beq.n	80a3096 <__aeabi_fmul+0xce>
 80a30a2:	ea40 000c 	orr.w	r0, r0, ip
 80a30a6:	f093 0f00 	teq	r3, #0
 80a30aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a30ae:	bf02      	ittt	eq
 80a30b0:	0049      	lsleq	r1, r1, #1
 80a30b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a30b6:	3b01      	subeq	r3, #1
 80a30b8:	d0f9      	beq.n	80a30ae <__aeabi_fmul+0xe6>
 80a30ba:	ea41 010c 	orr.w	r1, r1, ip
 80a30be:	e78f      	b.n	80a2fe0 <__aeabi_fmul+0x18>
 80a30c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a30c4:	ea92 0f0c 	teq	r2, ip
 80a30c8:	bf18      	it	ne
 80a30ca:	ea93 0f0c 	teqne	r3, ip
 80a30ce:	d00a      	beq.n	80a30e6 <__aeabi_fmul+0x11e>
 80a30d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a30d4:	bf18      	it	ne
 80a30d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a30da:	d1d8      	bne.n	80a308e <__aeabi_fmul+0xc6>
 80a30dc:	ea80 0001 	eor.w	r0, r0, r1
 80a30e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a30e4:	4770      	bx	lr
 80a30e6:	f090 0f00 	teq	r0, #0
 80a30ea:	bf17      	itett	ne
 80a30ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a30f0:	4608      	moveq	r0, r1
 80a30f2:	f091 0f00 	teqne	r1, #0
 80a30f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a30fa:	d014      	beq.n	80a3126 <__aeabi_fmul+0x15e>
 80a30fc:	ea92 0f0c 	teq	r2, ip
 80a3100:	d101      	bne.n	80a3106 <__aeabi_fmul+0x13e>
 80a3102:	0242      	lsls	r2, r0, #9
 80a3104:	d10f      	bne.n	80a3126 <__aeabi_fmul+0x15e>
 80a3106:	ea93 0f0c 	teq	r3, ip
 80a310a:	d103      	bne.n	80a3114 <__aeabi_fmul+0x14c>
 80a310c:	024b      	lsls	r3, r1, #9
 80a310e:	bf18      	it	ne
 80a3110:	4608      	movne	r0, r1
 80a3112:	d108      	bne.n	80a3126 <__aeabi_fmul+0x15e>
 80a3114:	ea80 0001 	eor.w	r0, r0, r1
 80a3118:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a311c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3120:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3124:	4770      	bx	lr
 80a3126:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a312a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a312e:	4770      	bx	lr

080a3130 <__aeabi_fdiv>:
 80a3130:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3134:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3138:	bf1e      	ittt	ne
 80a313a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a313e:	ea92 0f0c 	teqne	r2, ip
 80a3142:	ea93 0f0c 	teqne	r3, ip
 80a3146:	d069      	beq.n	80a321c <__aeabi_fdiv+0xec>
 80a3148:	eba2 0203 	sub.w	r2, r2, r3
 80a314c:	ea80 0c01 	eor.w	ip, r0, r1
 80a3150:	0249      	lsls	r1, r1, #9
 80a3152:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3156:	d037      	beq.n	80a31c8 <__aeabi_fdiv+0x98>
 80a3158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a315c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3160:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3164:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3168:	428b      	cmp	r3, r1
 80a316a:	bf38      	it	cc
 80a316c:	005b      	lslcc	r3, r3, #1
 80a316e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3172:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3176:	428b      	cmp	r3, r1
 80a3178:	bf24      	itt	cs
 80a317a:	1a5b      	subcs	r3, r3, r1
 80a317c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3180:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3184:	bf24      	itt	cs
 80a3186:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a318a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a318e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3192:	bf24      	itt	cs
 80a3194:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3198:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a319c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a31a0:	bf24      	itt	cs
 80a31a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a31a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a31aa:	011b      	lsls	r3, r3, #4
 80a31ac:	bf18      	it	ne
 80a31ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a31b2:	d1e0      	bne.n	80a3176 <__aeabi_fdiv+0x46>
 80a31b4:	2afd      	cmp	r2, #253	; 0xfd
 80a31b6:	f63f af50 	bhi.w	80a305a <__aeabi_fmul+0x92>
 80a31ba:	428b      	cmp	r3, r1
 80a31bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a31c0:	bf08      	it	eq
 80a31c2:	f020 0001 	biceq.w	r0, r0, #1
 80a31c6:	4770      	bx	lr
 80a31c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a31cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a31d0:	327f      	adds	r2, #127	; 0x7f
 80a31d2:	bfc2      	ittt	gt
 80a31d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a31d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a31dc:	4770      	bxgt	lr
 80a31de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31e2:	f04f 0300 	mov.w	r3, #0
 80a31e6:	3a01      	subs	r2, #1
 80a31e8:	e737      	b.n	80a305a <__aeabi_fmul+0x92>
 80a31ea:	f092 0f00 	teq	r2, #0
 80a31ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a31f2:	bf02      	ittt	eq
 80a31f4:	0040      	lsleq	r0, r0, #1
 80a31f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a31fa:	3a01      	subeq	r2, #1
 80a31fc:	d0f9      	beq.n	80a31f2 <__aeabi_fdiv+0xc2>
 80a31fe:	ea40 000c 	orr.w	r0, r0, ip
 80a3202:	f093 0f00 	teq	r3, #0
 80a3206:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a320a:	bf02      	ittt	eq
 80a320c:	0049      	lsleq	r1, r1, #1
 80a320e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3212:	3b01      	subeq	r3, #1
 80a3214:	d0f9      	beq.n	80a320a <__aeabi_fdiv+0xda>
 80a3216:	ea41 010c 	orr.w	r1, r1, ip
 80a321a:	e795      	b.n	80a3148 <__aeabi_fdiv+0x18>
 80a321c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3220:	ea92 0f0c 	teq	r2, ip
 80a3224:	d108      	bne.n	80a3238 <__aeabi_fdiv+0x108>
 80a3226:	0242      	lsls	r2, r0, #9
 80a3228:	f47f af7d 	bne.w	80a3126 <__aeabi_fmul+0x15e>
 80a322c:	ea93 0f0c 	teq	r3, ip
 80a3230:	f47f af70 	bne.w	80a3114 <__aeabi_fmul+0x14c>
 80a3234:	4608      	mov	r0, r1
 80a3236:	e776      	b.n	80a3126 <__aeabi_fmul+0x15e>
 80a3238:	ea93 0f0c 	teq	r3, ip
 80a323c:	d104      	bne.n	80a3248 <__aeabi_fdiv+0x118>
 80a323e:	024b      	lsls	r3, r1, #9
 80a3240:	f43f af4c 	beq.w	80a30dc <__aeabi_fmul+0x114>
 80a3244:	4608      	mov	r0, r1
 80a3246:	e76e      	b.n	80a3126 <__aeabi_fmul+0x15e>
 80a3248:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a324c:	bf18      	it	ne
 80a324e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3252:	d1ca      	bne.n	80a31ea <__aeabi_fdiv+0xba>
 80a3254:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3258:	f47f af5c 	bne.w	80a3114 <__aeabi_fmul+0x14c>
 80a325c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3260:	f47f af3c 	bne.w	80a30dc <__aeabi_fmul+0x114>
 80a3264:	e75f      	b.n	80a3126 <__aeabi_fmul+0x15e>
 80a3266:	bf00      	nop

080a3268 <atexit>:
 80a3268:	2300      	movs	r3, #0
 80a326a:	4601      	mov	r1, r0
 80a326c:	461a      	mov	r2, r3
 80a326e:	4618      	mov	r0, r3
 80a3270:	f000 b842 	b.w	80a32f8 <__register_exitproc>

080a3274 <memcpy>:
 80a3274:	440a      	add	r2, r1
 80a3276:	4291      	cmp	r1, r2
 80a3278:	f100 33ff 	add.w	r3, r0, #4294967295
 80a327c:	d100      	bne.n	80a3280 <memcpy+0xc>
 80a327e:	4770      	bx	lr
 80a3280:	b510      	push	{r4, lr}
 80a3282:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3286:	4291      	cmp	r1, r2
 80a3288:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a328c:	d1f9      	bne.n	80a3282 <memcpy+0xe>
 80a328e:	bd10      	pop	{r4, pc}

080a3290 <memset>:
 80a3290:	4603      	mov	r3, r0
 80a3292:	4402      	add	r2, r0
 80a3294:	4293      	cmp	r3, r2
 80a3296:	d100      	bne.n	80a329a <memset+0xa>
 80a3298:	4770      	bx	lr
 80a329a:	f803 1b01 	strb.w	r1, [r3], #1
 80a329e:	e7f9      	b.n	80a3294 <memset+0x4>

080a32a0 <srand>:
 80a32a0:	b538      	push	{r3, r4, r5, lr}
 80a32a2:	4b0d      	ldr	r3, [pc, #52]	; (80a32d8 <srand+0x38>)
 80a32a4:	4604      	mov	r4, r0
 80a32a6:	681d      	ldr	r5, [r3, #0]
 80a32a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a32aa:	b97b      	cbnz	r3, 80a32cc <srand+0x2c>
 80a32ac:	2018      	movs	r0, #24
 80a32ae:	f7fe f9db 	bl	80a1668 <malloc>
 80a32b2:	4a0a      	ldr	r2, [pc, #40]	; (80a32dc <srand+0x3c>)
 80a32b4:	4b0a      	ldr	r3, [pc, #40]	; (80a32e0 <srand+0x40>)
 80a32b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a32b8:	e9c0 2300 	strd	r2, r3, [r0]
 80a32bc:	4b09      	ldr	r3, [pc, #36]	; (80a32e4 <srand+0x44>)
 80a32be:	2201      	movs	r2, #1
 80a32c0:	6083      	str	r3, [r0, #8]
 80a32c2:	230b      	movs	r3, #11
 80a32c4:	8183      	strh	r3, [r0, #12]
 80a32c6:	2300      	movs	r3, #0
 80a32c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a32cc:	2200      	movs	r2, #0
 80a32ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a32d0:	611c      	str	r4, [r3, #16]
 80a32d2:	615a      	str	r2, [r3, #20]
 80a32d4:	bd38      	pop	{r3, r4, r5, pc}
 80a32d6:	bf00      	nop
 80a32d8:	2000041c 	.word	0x2000041c
 80a32dc:	abcd330e 	.word	0xabcd330e
 80a32e0:	e66d1234 	.word	0xe66d1234
 80a32e4:	0005deec 	.word	0x0005deec

080a32e8 <strlen>:
 80a32e8:	4603      	mov	r3, r0
 80a32ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a32ee:	2a00      	cmp	r2, #0
 80a32f0:	d1fb      	bne.n	80a32ea <strlen+0x2>
 80a32f2:	1a18      	subs	r0, r3, r0
 80a32f4:	3801      	subs	r0, #1
 80a32f6:	4770      	bx	lr

080a32f8 <__register_exitproc>:
 80a32f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a32fc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a33bc <__register_exitproc+0xc4>
 80a3300:	4606      	mov	r6, r0
 80a3302:	f8d8 0000 	ldr.w	r0, [r8]
 80a3306:	461f      	mov	r7, r3
 80a3308:	460d      	mov	r5, r1
 80a330a:	4691      	mov	r9, r2
 80a330c:	f000 f858 	bl	80a33c0 <__retarget_lock_acquire_recursive>
 80a3310:	4b26      	ldr	r3, [pc, #152]	; (80a33ac <__register_exitproc+0xb4>)
 80a3312:	681c      	ldr	r4, [r3, #0]
 80a3314:	b934      	cbnz	r4, 80a3324 <__register_exitproc+0x2c>
 80a3316:	4c26      	ldr	r4, [pc, #152]	; (80a33b0 <__register_exitproc+0xb8>)
 80a3318:	601c      	str	r4, [r3, #0]
 80a331a:	4b26      	ldr	r3, [pc, #152]	; (80a33b4 <__register_exitproc+0xbc>)
 80a331c:	b113      	cbz	r3, 80a3324 <__register_exitproc+0x2c>
 80a331e:	681b      	ldr	r3, [r3, #0]
 80a3320:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3324:	6863      	ldr	r3, [r4, #4]
 80a3326:	2b1f      	cmp	r3, #31
 80a3328:	dd07      	ble.n	80a333a <__register_exitproc+0x42>
 80a332a:	f8d8 0000 	ldr.w	r0, [r8]
 80a332e:	f000 f849 	bl	80a33c4 <__retarget_lock_release_recursive>
 80a3332:	f04f 30ff 	mov.w	r0, #4294967295
 80a3336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a333a:	b35e      	cbz	r6, 80a3394 <__register_exitproc+0x9c>
 80a333c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3340:	b988      	cbnz	r0, 80a3366 <__register_exitproc+0x6e>
 80a3342:	4b1d      	ldr	r3, [pc, #116]	; (80a33b8 <__register_exitproc+0xc0>)
 80a3344:	b923      	cbnz	r3, 80a3350 <__register_exitproc+0x58>
 80a3346:	f8d8 0000 	ldr.w	r0, [r8]
 80a334a:	f000 f83a 	bl	80a33c2 <__retarget_lock_release>
 80a334e:	e7f0      	b.n	80a3332 <__register_exitproc+0x3a>
 80a3350:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3354:	f7fe f988 	bl	80a1668 <malloc>
 80a3358:	2800      	cmp	r0, #0
 80a335a:	d0f4      	beq.n	80a3346 <__register_exitproc+0x4e>
 80a335c:	2300      	movs	r3, #0
 80a335e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3362:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a3366:	2201      	movs	r2, #1
 80a3368:	6863      	ldr	r3, [r4, #4]
 80a336a:	2e02      	cmp	r6, #2
 80a336c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3370:	fa02 f203 	lsl.w	r2, r2, r3
 80a3374:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3378:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a337c:	ea43 0302 	orr.w	r3, r3, r2
 80a3380:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a3384:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3388:	bf02      	ittt	eq
 80a338a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a338e:	431a      	orreq	r2, r3
 80a3390:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a3394:	6863      	ldr	r3, [r4, #4]
 80a3396:	f8d8 0000 	ldr.w	r0, [r8]
 80a339a:	1c5a      	adds	r2, r3, #1
 80a339c:	3302      	adds	r3, #2
 80a339e:	6062      	str	r2, [r4, #4]
 80a33a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a33a4:	f000 f80e 	bl	80a33c4 <__retarget_lock_release_recursive>
 80a33a8:	2000      	movs	r0, #0
 80a33aa:	e7c4      	b.n	80a3336 <__register_exitproc+0x3e>
 80a33ac:	20000650 	.word	0x20000650
 80a33b0:	200005c4 	.word	0x200005c4
 80a33b4:	00000000 	.word	0x00000000
 80a33b8:	080a1669 	.word	0x080a1669
 80a33bc:	20000480 	.word	0x20000480

080a33c0 <__retarget_lock_acquire_recursive>:
 80a33c0:	4770      	bx	lr

080a33c2 <__retarget_lock_release>:
 80a33c2:	4770      	bx	lr

080a33c4 <__retarget_lock_release_recursive>:
 80a33c4:	4770      	bx	lr

080a33c6 <link_code_end>:
	...

080a33c8 <dynalib_user>:
 80a33c8:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a33d8:	0000 0000 6142 7474 7265 2079 6574 7473     ....Battery test
 80a33e8:	7265 0020 7543 6f74 6666 203a 4100 3a30     er .Cutoff: .A0:
 80a33f8:	0020 2820 5600 0029 6954 656d 203a 4100      . (.V).Time: .A
 80a3408:	6776 203a 5600 202c 6d00 0041 416d 3a68     vg: .V, .mA.mAh:
 80a3418:	0020 576d 3a68 0020                          .mWh: .

080a3420 <_ZTV15Adafruit_SH1106>:
	...
 80a3428:	09b9 080a 0a8d 080a 1171 080a 180d 080a     ........q.......
 80a3438:	09bd 080a 0e95 080a 07c5 080a 05d9 080a     ................
 80a3448:	0f51 080a 0fef 080a 1027 080a 1043 080a     Q.......'...C...

080a3458 <_ZL4font>:
 80a3458:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a3468:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a3478:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a3488:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a3498:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a34a8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a34b8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a34c8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a34d8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a34e8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a34f8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a3508:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a3518:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a3528:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a3538:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a3548:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a3558:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a3568:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a3578:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a3588:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a3598:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a35a8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a35b8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a35c8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a35d8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a35e8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a35f8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a3608:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a3618:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a3628:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a3638:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a3648:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a3658:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a3668:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a3678:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a3688:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a3698:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a36a8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a36b8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a36c8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a36d8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a36e8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a36f8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a3708:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a3718:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a3728:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a3738:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a3748:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a3758:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a3768:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a3778:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a3788:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a3798:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a37a8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a37b8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a37c8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a37d8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a37e8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a37f8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a3808:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a3818:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a3828:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a3838:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a3848:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a3858:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a3868:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a3878:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a3888:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a3898:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a38a8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a38b8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a38c8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a38d8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a38e8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a38f8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a3908:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a3918:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a3928:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a3938:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a3948:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080a3954 <_ZTV12Adafruit_GFX>:
	...
 80a3964:	1171 080a 180d 080a 00a9 080a 0e95 080a     q...............
 80a3974:	0fb9 080a 0fd5 080a 0f51 080a 0fef 080a     ........Q.......
 80a3984:	1027 080a 1043 080a                         '...C...

080a398c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a398c:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80a399c:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 80a39ac:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80a39bc:	7463 6d69 0065 0000                         ctime...

080a39c4 <_ZTV9IPAddress>:
	...
 80a39cc:	1c41 080a 1c31 080a 1c33 080a               A...1...3...

080a39d8 <_ZTV9USBSerial>:
	...
 80a39e0:	1cff 080a 1d65 080a 1d3d 080a 180d 080a     ....e...=.......
 80a39f0:	1d2f 080a 1d01 080a 1d11 080a 1d5f 080a     /..........._...
 80a3a00:	1d21 080a 1cf9 080a                         !.......

080a3a08 <_ZTV11USARTSerial>:
	...
 80a3a10:	1e55 080a 1ebf 080a 1e9b 080a 180d 080a     U...............
 80a3a20:	1e6b 080a 1e87 080a 1e79 080a 1e95 080a     k.......y.......
 80a3a30:	1e57 080a 1e5d 080a                         W...]...

080a3a38 <_ZTV7TwoWire>:
	...
 80a3a40:	1f75 080a 1fbf 080a 1f97 080a 1f77 080a     u...........w...
 80a3a50:	1f9f 080a 1fa7 080a 1faf 080a 1fb7 080a     ................

080a3a60 <_ZTVN5spark9WiFiClassE>:
	...
 80a3a68:	20af 080a 20a5 080a 209b 080a 2019 080a     . ... ... ... ..
 80a3a78:	1a49 080a 208f 080a 210d 080a 2115 080a     I.... ...!...!..
 80a3a88:	2083 080a 207b 080a 2071 080a 2067 080a     . ..{ ..q ..g ..
 80a3a98:	2023 080a                                   # ..

080a3a9c <_ZTVN5spark12NetworkClassE>:
	...
 80a3aa4:	20cd 080a 20d7 080a 20e1 080a 20eb 080a     . ... ... ... ..
 80a3ab4:	20f5 080a 2101 080a 210d 080a 2115 080a     . ...!...!...!..
 80a3ac4:	211d 080a 2129 080a 2131 080a 213b 080a     .!..)!..1!..;!..
 80a3ad4:	2145 080a                                   E!..

080a3ad8 <_ZSt7nothrow>:
	...

080a3ad9 <link_const_variable_data_end>:
 80a3ad9:	00          	.byte	0x00
	...

080a3adc <link_constructors_location>:
 80a3adc:	080a0575 	.word	0x080a0575
 80a3ae0:	080a17e9 	.word	0x080a17e9
 80a3ae4:	080a1a55 	.word	0x080a1a55
 80a3ae8:	080a1a65 	.word	0x080a1a65
 80a3aec:	080a1ac5 	.word	0x080a1ac5
 80a3af0:	080a20b9 	.word	0x080a20b9
 80a3af4:	080a2195 	.word	0x080a2195
 80a3af8:	080a2305 	.word	0x080a2305

080a3afc <link_constructors_end>:
 80a3afc:	00000000 	.word	0x00000000
